{"ast":null,"code":"var _jsxFileName = \"/Users/roderickmoise/Desktop/Documents/Downloads/ramp-fe-challenge/src/App.tsx\",\n  _s = $RefreshSig$();\nimport { Fragment, useCallback, useEffect, useMemo, useState } from \"react\";\nimport { InputSelect } from \"./components/InputSelect\";\nimport { Instructions } from \"./components/Instructions\";\nimport { Transactions } from \"./components/Transactions\";\nimport { useEmployees } from \"./hooks/useEmployees\";\nimport { usePaginatedTransactions } from \"./hooks/usePaginatedTransactions\";\nimport { useTransactionsByEmployee } from \"./hooks/useTransactionsByEmployee\";\nimport { EMPTY_EMPLOYEE } from \"./utils/constants\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport function App() {\n  _s();\n  const {\n    data: employees,\n    ...employeeUtils\n  } = useEmployees();\n  const {\n    data: paginatedTransactions,\n    ...paginatedTransactionsUtils\n  } = usePaginatedTransactions();\n  const {\n    data: transactionsByEmployee,\n    ...transactionsByEmployeeUtils\n  } = useTransactionsByEmployee();\n  const [isLoading, setIsLoading] = useState(false);\n  const [isAllEmployees, setIsAllEmployees] = useState(true);\n  const [hasMoreTransactions, setHasMoreTransactions] = useState(true);\n\n  // Log the structure of paginatedTransactions for debugging\n  useEffect(() => {\n    console.log(\"Paginated Transactions:\", paginatedTransactions);\n  }, [paginatedTransactions]);\n\n  // Use transactions based on the selection mode\n  const transactions = useMemo(() => {\n    if (isAllEmployees) {\n      return (paginatedTransactions === null || paginatedTransactions === void 0 ? void 0 : paginatedTransactions.data) || []; // Safe access\n    } else {\n      return transactionsByEmployee || []; // Specific employee's transactions\n    }\n  }, [paginatedTransactions, transactionsByEmployee, isAllEmployees]);\n  const loadAllTransactions = useCallback(async () => {\n    setIsLoading(true);\n    setIsAllEmployees(true);\n    transactionsByEmployeeUtils.invalidateData(); // Clear employee-specific transactions\n\n    console.log(\"Fetching all transactions...\");\n    await employeeUtils.fetchAll();\n    await paginatedTransactionsUtils.fetchAll();\n    setIsLoading(false);\n  }, [employeeUtils, paginatedTransactionsUtils, transactionsByEmployeeUtils]);\n  const loadTransactionsByEmployee = useCallback(async employeeId => {\n    if (!employeeId) return; // Prevent empty employeeId\n    setIsLoading(true);\n    setIsAllEmployees(false); // Switch to specific employee mode\n    paginatedTransactionsUtils.invalidateData(); // Invalidate paginated transactions\n\n    console.log(\"Fetching transactions for employee ID:\", employeeId);\n    await transactionsByEmployeeUtils.fetchById(employeeId);\n    setIsLoading(false);\n  }, [paginatedTransactionsUtils, transactionsByEmployeeUtils]);\n  useEffect(() => {\n    if (employees === null && !employeeUtils.loading) {\n      loadAllTransactions();\n    }\n  }, [employeeUtils.loading, employees, loadAllTransactions]);\n  const handleViewMore = async () => {\n    if (isAllEmployees && hasMoreTransactions) {\n      console.log(\"Loading more transactions...\");\n      await paginatedTransactionsUtils.fetchAll(); // Fetch additional transactions\n    } else {\n      console.warn(\"No more transactions to load.\");\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(Fragment, {\n    children: /*#__PURE__*/_jsxDEV(\"main\", {\n      className: \"MainContainer\",\n      children: [/*#__PURE__*/_jsxDEV(Instructions, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 80,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"hr\", {\n        className: \"RampBreak--l\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 82,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(InputSelect, {\n        isLoading: isLoading,\n        defaultValue: EMPTY_EMPLOYEE,\n        items: employees === null ? [] : [EMPTY_EMPLOYEE, ...employees],\n        label: \"Filter by employee\",\n        loadingLabel: \"Loading employees\",\n        parseItem: item => ({\n          value: item.id,\n          label: `${item.firstName} ${item.lastName}`\n        }),\n        onChange: async newValue => {\n          console.log(\"Selected employee:\", newValue);\n          if (newValue === null || newValue.id === \"all-employees\") {\n            console.log(\"Switching to All Employees...\");\n            await loadAllTransactions(); // Load all transactions\n          } else if (newValue.id) {\n            console.log(\"Loading transactions for specific employee:\", newValue.id);\n            await loadTransactionsByEmployee(newValue.id); // Load employee's transactions\n          }\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 84,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"RampBreak--l\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 106,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"RampGrid\",\n        children: [isLoading ? /*#__PURE__*/_jsxDEV(\"div\", {\n          children: \"Loading transactions...\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 109,\n          columnNumber: 24\n        }, this) : /*#__PURE__*/_jsxDEV(Transactions, {\n          transactions: transactions\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 109,\n          columnNumber: 61\n        }, this), isAllEmployees && hasMoreTransactions && /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"RampButton\",\n          disabled: paginatedTransactionsUtils.loading,\n          onClick: handleViewMore,\n          children: \"View More\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 112,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 108,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 79,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 78,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"LC+jH4wTGwiHxcf/ESIUBHPDITA=\", false, function () {\n  return [useEmployees, usePaginatedTransactions, useTransactionsByEmployee];\n});\n_c = App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["Fragment","useCallback","useEffect","useMemo","useState","InputSelect","Instructions","Transactions","useEmployees","usePaginatedTransactions","useTransactionsByEmployee","EMPTY_EMPLOYEE","jsxDEV","_jsxDEV","App","_s","data","employees","employeeUtils","paginatedTransactions","paginatedTransactionsUtils","transactionsByEmployee","transactionsByEmployeeUtils","isLoading","setIsLoading","isAllEmployees","setIsAllEmployees","hasMoreTransactions","setHasMoreTransactions","console","log","transactions","loadAllTransactions","invalidateData","fetchAll","loadTransactionsByEmployee","employeeId","fetchById","loading","handleViewMore","warn","children","className","fileName","_jsxFileName","lineNumber","columnNumber","defaultValue","items","label","loadingLabel","parseItem","item","value","id","firstName","lastName","onChange","newValue","disabled","onClick","_c","$RefreshReg$"],"sources":["/Users/roderickmoise/Desktop/Documents/Downloads/ramp-fe-challenge/src/App.tsx"],"sourcesContent":["import { Fragment, useCallback, useEffect, useMemo, useState } from \"react\"\nimport { InputSelect } from \"./components/InputSelect\"\nimport { Instructions } from \"./components/Instructions\"\nimport { Transactions } from \"./components/Transactions\"\nimport { useEmployees } from \"./hooks/useEmployees\"\nimport { usePaginatedTransactions } from \"./hooks/usePaginatedTransactions\"\nimport { useTransactionsByEmployee } from \"./hooks/useTransactionsByEmployee\"\nimport { EMPTY_EMPLOYEE } from \"./utils/constants\"\nimport { Employee } from \"./utils/types\"\n\nexport function App() {\n  const { data: employees, ...employeeUtils } = useEmployees()\n  const { data: paginatedTransactions, ...paginatedTransactionsUtils } = usePaginatedTransactions()\n  const { data: transactionsByEmployee, ...transactionsByEmployeeUtils } = useTransactionsByEmployee()\n\n  const [isLoading, setIsLoading] = useState(false)\n  const [isAllEmployees, setIsAllEmployees] = useState(true)\n  const [hasMoreTransactions, setHasMoreTransactions] = useState(true)\n\n  // Log the structure of paginatedTransactions for debugging\n  useEffect(() => {\n    console.log(\"Paginated Transactions:\", paginatedTransactions)\n  }, [paginatedTransactions])\n\n  // Use transactions based on the selection mode\n  const transactions = useMemo(() => {\n    if (isAllEmployees) {\n      return paginatedTransactions?.data || [] // Safe access\n    } else {\n      return transactionsByEmployee || [] // Specific employee's transactions\n    }\n  }, [paginatedTransactions, transactionsByEmployee, isAllEmployees])\n\n  const loadAllTransactions = useCallback(async () => {\n    setIsLoading(true)\n    setIsAllEmployees(true)\n    transactionsByEmployeeUtils.invalidateData() // Clear employee-specific transactions\n\n    console.log(\"Fetching all transactions...\")\n\n    await employeeUtils.fetchAll()\n    await paginatedTransactionsUtils.fetchAll()\n\n    setIsLoading(false)\n  }, [employeeUtils, paginatedTransactionsUtils, transactionsByEmployeeUtils])\n\n  const loadTransactionsByEmployee = useCallback(\n    async (employeeId: string) => {\n      if (!employeeId) return // Prevent empty employeeId\n      setIsLoading(true)\n      setIsAllEmployees(false) // Switch to specific employee mode\n      paginatedTransactionsUtils.invalidateData() // Invalidate paginated transactions\n\n      console.log(\"Fetching transactions for employee ID:\", employeeId)\n      await transactionsByEmployeeUtils.fetchById(employeeId)\n\n      setIsLoading(false)\n    },\n    [paginatedTransactionsUtils, transactionsByEmployeeUtils]\n  )\n\n  useEffect(() => {\n    if (employees === null && !employeeUtils.loading) {\n      loadAllTransactions()\n    }\n  }, [employeeUtils.loading, employees, loadAllTransactions])\n\n  const handleViewMore = async () => {\n    if (isAllEmployees && hasMoreTransactions) {\n      console.log(\"Loading more transactions...\")\n      await paginatedTransactionsUtils.fetchAll() // Fetch additional transactions\n    } else {\n      console.warn(\"No more transactions to load.\")\n    }\n  }\n\n  return (\n    <Fragment>\n      <main className=\"MainContainer\">\n        <Instructions />\n\n        <hr className=\"RampBreak--l\" />\n\n        <InputSelect<Employee>\n          isLoading={isLoading}\n          defaultValue={EMPTY_EMPLOYEE}\n          items={employees === null ? [] : [EMPTY_EMPLOYEE, ...employees]}\n          label=\"Filter by employee\"\n          loadingLabel=\"Loading employees\"\n          parseItem={(item) => ({\n            value: item.id,\n            label: `${item.firstName} ${item.lastName}`,\n          })}\n          onChange={async (newValue) => {\n            console.log(\"Selected employee:\", newValue)\n            if (newValue === null || newValue.id === \"all-employees\") {\n              console.log(\"Switching to All Employees...\")\n              await loadAllTransactions() // Load all transactions\n            } else if (newValue.id) {\n              console.log(\"Loading transactions for specific employee:\", newValue.id)\n              await loadTransactionsByEmployee(newValue.id) // Load employee's transactions\n            }\n          }}\n        />\n\n        <div className=\"RampBreak--l\" />\n\n        <div className=\"RampGrid\">\n          {isLoading ? <div>Loading transactions...</div> : <Transactions transactions={transactions} />}\n\n          {isAllEmployees && hasMoreTransactions && (\n            <button\n              className=\"RampButton\"\n              disabled={paginatedTransactionsUtils.loading}\n              onClick={handleViewMore}\n            >\n              View More\n            </button>\n          )}\n        </div>\n      </main>\n    </Fragment>\n  )\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}