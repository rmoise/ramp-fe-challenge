{"ast":null,"code":"var _jsxFileName = \"/Users/roderickmoise/Desktop/Documents/Downloads/ramp-fe-challenge/src/App.tsx\",\n  _s = $RefreshSig$();\nimport { Fragment, useCallback, useEffect, useMemo, useState } from \"react\";\nimport { InputSelect } from \"./components/InputSelect\";\nimport { Instructions } from \"./components/Instructions\";\nimport { Transactions } from \"./components/Transactions\";\nimport { useEmployees } from \"./hooks/useEmployees\";\nimport { usePaginatedTransactions } from \"./hooks/usePaginatedTransactions\";\nimport { useTransactionsByEmployee } from \"./hooks/useTransactionsByEmployee\";\nimport { EMPTY_EMPLOYEE } from \"./utils/constants\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport function App() {\n  _s();\n  const {\n    data: employees,\n    fetchAll: fetchEmployees,\n    loading: employeesLoading\n  } = useEmployees();\n  const {\n    data: paginatedTransactions,\n    fetchAll: fetchPaginatedTransactions,\n    loading: transactionsLoading\n  } = usePaginatedTransactions();\n  const {\n    data: transactionsByEmployee,\n    fetchById: fetchTransactionsByEmployee,\n    loading: employeeTransactionsLoading\n  } = useTransactionsByEmployee();\n  const [isLoading, setIsLoading] = useState(false);\n  const [selectedEmployee, setSelectedEmployee] = useState(null);\n  const transactions = useMemo(() => {\n    if (selectedEmployee) {\n      return transactionsByEmployee || [];\n    }\n    return (paginatedTransactions === null || paginatedTransactions === void 0 ? void 0 : paginatedTransactions.data) || [];\n  }, [selectedEmployee, transactionsByEmployee, paginatedTransactions]);\n  const loadTransactionsForAllEmployees = async () => {\n    setIsLoading(true);\n    await fetchPaginatedTransactions();\n    setIsLoading(false);\n  };\n  const loadTransactionsForEmployee = async employeeId => {\n    setIsLoading(true);\n    await fetchTransactionsByEmployee(employeeId);\n    setIsLoading(false);\n  };\n  useEffect(() => {\n    const initialize = async () => {\n      if (!employees && !employeesLoading) {\n        await fetchEmployees();\n        await loadTransactionsForAllEmployees(); // Load initial transactions\n      }\n    };\n    initialize();\n  }, [employees, employeesLoading, fetchEmployees]);\n  const handleEmployeeChange = useCallback(async newValue => {\n    setSelectedEmployee(newValue);\n    if (!newValue || newValue.id === \"all-employees\") {\n      await loadTransactionsForAllEmployees();\n    } else {\n      await loadTransactionsForEmployee(newValue.id);\n    }\n  }, []);\n  return /*#__PURE__*/_jsxDEV(Fragment, {\n    children: /*#__PURE__*/_jsxDEV(\"main\", {\n      className: \"MainContainer\",\n      children: [/*#__PURE__*/_jsxDEV(Instructions, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 68,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"hr\", {\n        className: \"RampBreak--l\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 69,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(InputSelect, {\n        isLoading: isLoading || employeesLoading,\n        defaultValue: EMPTY_EMPLOYEE,\n        items: employees ? [EMPTY_EMPLOYEE, ...employees] : [],\n        label: \"Filter by employee\",\n        loadingLabel: \"Loading employees...\",\n        parseItem: item => ({\n          value: item.id,\n          label: `${item.firstName} ${item.lastName}`\n        }),\n        onChange: handleEmployeeChange // Handle employee selection\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 71,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"RampBreak--l\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 84,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"RampGrid\",\n        children: [isLoading || transactionsLoading ? /*#__PURE__*/_jsxDEV(\"div\", {\n          children: \"Loading transactions...\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 88,\n          columnNumber: 13\n        }, this) : /*#__PURE__*/_jsxDEV(Transactions, {\n          transactions: transactions\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 90,\n          columnNumber: 13\n        }, this) // Display transactions\n        , !selectedEmployee && (paginatedTransactions === null || paginatedTransactions === void 0 ? void 0 : paginatedTransactions.nextPage) &&\n        /*#__PURE__*/\n        // Only show \"View More\" if all employees is selected\n        _jsxDEV(\"button\", {\n          className: \"RampButton\",\n          onClick: async () => {\n            await fetchPaginatedTransactions(); // Load more transactions\n          },\n          disabled: isLoading || transactionsLoading,\n          children: \"View More\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 95,\n          columnNumber: 15\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 86,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 67,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 66,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"3zqjqoBZjJtjo7kmsopcduVggaM=\", false, function () {\n  return [useEmployees, usePaginatedTransactions, useTransactionsByEmployee];\n});\n_c = App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["Fragment","useCallback","useEffect","useMemo","useState","InputSelect","Instructions","Transactions","useEmployees","usePaginatedTransactions","useTransactionsByEmployee","EMPTY_EMPLOYEE","jsxDEV","_jsxDEV","App","_s","data","employees","fetchAll","fetchEmployees","loading","employeesLoading","paginatedTransactions","fetchPaginatedTransactions","transactionsLoading","transactionsByEmployee","fetchById","fetchTransactionsByEmployee","employeeTransactionsLoading","isLoading","setIsLoading","selectedEmployee","setSelectedEmployee","transactions","loadTransactionsForAllEmployees","loadTransactionsForEmployee","employeeId","initialize","handleEmployeeChange","newValue","id","children","className","fileName","_jsxFileName","lineNumber","columnNumber","defaultValue","items","label","loadingLabel","parseItem","item","value","firstName","lastName","onChange","nextPage","onClick","disabled","_c","$RefreshReg$"],"sources":["/Users/roderickmoise/Desktop/Documents/Downloads/ramp-fe-challenge/src/App.tsx"],"sourcesContent":["import { Fragment, useCallback, useEffect, useMemo, useState } from \"react\"\nimport { InputSelect } from \"./components/InputSelect\"\nimport { Instructions } from \"./components/Instructions\"\nimport { Transactions } from \"./components/Transactions\"\nimport { useEmployees } from \"./hooks/useEmployees\"\nimport { usePaginatedTransactions } from \"./hooks/usePaginatedTransactions\"\nimport { useTransactionsByEmployee } from \"./hooks/useTransactionsByEmployee\"\nimport { EMPTY_EMPLOYEE } from \"./utils/constants\"\nimport { Employee } from \"./utils/types\"\n\nexport function App() {\n  const { data: employees, fetchAll: fetchEmployees, loading: employeesLoading } = useEmployees()\n  const {\n    data: paginatedTransactions,\n    fetchAll: fetchPaginatedTransactions,\n    loading: transactionsLoading,\n  } = usePaginatedTransactions()\n  const {\n    data: transactionsByEmployee,\n    fetchById: fetchTransactionsByEmployee,\n    loading: employeeTransactionsLoading,\n  } = useTransactionsByEmployee()\n\n  const [isLoading, setIsLoading] = useState(false)\n  const [selectedEmployee, setSelectedEmployee] = useState<Employee | null>(null)\n\n  const transactions = useMemo(() => {\n    if (selectedEmployee) {\n      return transactionsByEmployee || []\n    }\n    return paginatedTransactions?.data || []\n  }, [selectedEmployee, transactionsByEmployee, paginatedTransactions])\n\n  const loadTransactionsForAllEmployees = async () => {\n    setIsLoading(true)\n    await fetchPaginatedTransactions()\n    setIsLoading(false)\n  }\n\n  const loadTransactionsForEmployee = async (employeeId: string) => {\n    setIsLoading(true)\n    await fetchTransactionsByEmployee(employeeId)\n    setIsLoading(false)\n  }\n\n  useEffect(() => {\n    const initialize = async () => {\n      if (!employees && !employeesLoading) {\n        await fetchEmployees()\n        await loadTransactionsForAllEmployees() // Load initial transactions\n      }\n    }\n    initialize()\n  }, [employees, employeesLoading, fetchEmployees])\n\n  const handleEmployeeChange = useCallback(async (newValue: Employee | null) => {\n    setSelectedEmployee(newValue)\n    if (!newValue || newValue.id === \"all-employees\") {\n      await loadTransactionsForAllEmployees()\n    } else {\n      await loadTransactionsForEmployee(newValue.id)\n    }\n  }, [])\n\n  return (\n    <Fragment>\n      <main className=\"MainContainer\">\n        <Instructions />\n        <hr className=\"RampBreak--l\" />\n\n        <InputSelect<Employee>\n          isLoading={isLoading || employeesLoading}\n          defaultValue={EMPTY_EMPLOYEE}\n          items={employees ? [EMPTY_EMPLOYEE, ...employees] : []}\n          label=\"Filter by employee\"\n          loadingLabel=\"Loading employees...\"\n          parseItem={(item) => ({\n            value: item.id,\n            label: `${item.firstName} ${item.lastName}`,\n          })}\n          onChange={handleEmployeeChange} // Handle employee selection\n        />\n\n        <div className=\"RampBreak--l\" />\n\n        <div className=\"RampGrid\">\n          {isLoading || transactionsLoading ? (\n            <div>Loading transactions...</div>\n          ) : (\n            <Transactions transactions={transactions} /> // Display transactions\n          )}\n\n          {!selectedEmployee &&\n            paginatedTransactions?.nextPage && ( // Only show \"View More\" if all employees is selected\n              <button\n                className=\"RampButton\"\n                onClick={async () => {\n                  await fetchPaginatedTransactions() // Load more transactions\n                }}\n                disabled={isLoading || transactionsLoading}\n              >\n                View More\n              </button>\n            )}\n        </div>\n      </main>\n    </Fragment>\n  )\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}