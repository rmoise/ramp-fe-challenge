{"ast":null,"code":"var _jsxFileName = \"/Users/roderickmoise/Desktop/Documents/Downloads/ramp-fe-challenge/src/App.tsx\",\n  _s = $RefreshSig$();\nimport { Fragment, useCallback, useEffect, useState } from \"react\";\nimport { InputSelect } from \"./components/InputSelect\";\nimport { Instructions } from \"./components/Instructions\";\nimport { Transactions } from \"./components/Transactions\";\nimport { useEmployees } from \"./hooks/useEmployees\";\nimport { usePaginatedTransactions } from \"./hooks/usePaginatedTransactions\";\nimport { useTransactionsByEmployee } from \"./hooks/useTransactionsByEmployee\";\nimport { EMPTY_EMPLOYEE } from \"./utils/constants\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport function App() {\n  _s();\n  const {\n    data: employees,\n    fetchAll: fetchEmployees,\n    loading: employeesLoading\n  } = useEmployees();\n  const {\n    data: paginatedTransactions,\n    fetchAll: fetchPaginatedTransactions,\n    invalidateData: invalidatePaginatedTransactions\n  } = usePaginatedTransactions();\n  const {\n    data: transactionsByEmployee,\n    fetchById: fetchTransactionsByEmployee,\n    invalidateData: invalidateTransactionsByEmployee\n  } = useTransactionsByEmployee();\n  const [isLoading, setIsLoading] = useState(false);\n  const [isAllEmployees, setIsAllEmployees] = useState(true);\n  const [transactions, setTransactions] = useState([]);\n\n  // Merge transactions when data changes\n  useEffect(() => {\n    if (isAllEmployees && paginatedTransactions !== null && paginatedTransactions !== void 0 && paginatedTransactions.data) {\n      // For \"All Employees\", we might be paginating, so we merge transactions\n      setTransactions(prevTransactions => mergeTransactions(prevTransactions, paginatedTransactions.data));\n    } else if (!isAllEmployees && transactionsByEmployee) {\n      // When filtering by employee, we replace the transactions\n      setTransactions(mergeTransactions([], transactionsByEmployee));\n    } else {\n      setTransactions([]);\n    }\n  }, [isAllEmployees, paginatedTransactions, transactionsByEmployee]);\n  function mergeTransactions(prevTransactions, newTransactions) {\n    const transactionsMap = new Map();\n\n    // Create a map of previous transactions for quick lookup\n    const prevTransactionsMap = new Map(prevTransactions.map(transaction => [transaction.id, transaction]));\n    newTransactions.forEach(transaction => {\n      const prevTransaction = prevTransactionsMap.get(transaction.id);\n      if (prevTransaction) {\n        // Preserve the approved status from the previous transaction\n        transactionsMap.set(transaction.id, {\n          ...transaction,\n          approved: prevTransaction.approved\n        });\n      } else {\n        transactionsMap.set(transaction.id, transaction);\n      }\n    });\n\n    // Convert map back to array\n    return Array.from(transactionsMap.values());\n  }\n  const updateTransaction = useCallback((transactionId, approved) => {\n    setTransactions(prevTransactions => prevTransactions.map(transaction => transaction.id === transactionId ? {\n      ...transaction,\n      approved\n    } : transaction));\n  }, [setTransactions]);\n  const loadAllTransactions = useCallback(async () => {\n    setIsLoading(true);\n    console.log(\"Loading all transactions...\");\n    await fetchEmployees();\n    await fetchPaginatedTransactions();\n    setIsLoading(false);\n  }, [fetchEmployees, fetchPaginatedTransactions]);\n  const loadTransactionsByEmployee = useCallback(async employeeId => {\n    setIsLoading(true);\n    console.log(`Loading transactions for employee ID: ${employeeId}`);\n    await fetchTransactionsByEmployee(employeeId);\n    setIsLoading(false);\n  }, [fetchTransactionsByEmployee]);\n  useEffect(() => {\n    const initialize = async () => {\n      if (!employees && !employeesLoading) {\n        await loadAllTransactions();\n      }\n    };\n    initialize();\n  }, [employees, employeesLoading, loadAllTransactions]);\n  const handleEmployeeChange = useCallback(async newValue => {\n    console.log(\"handleEmployeeChange called with:\", newValue);\n    setTransactions([]); // Reset transactions\n    invalidatePaginatedTransactions();\n    invalidateTransactionsByEmployee();\n    if (!newValue || newValue.id === \"all-employees\") {\n      console.log(\"All Employees selected.\");\n      setIsAllEmployees(true);\n      await loadAllTransactions();\n    } else {\n      console.log(`Fetching transactions for employee ID: ${newValue.id}`);\n      setIsAllEmployees(false);\n      await loadTransactionsByEmployee(newValue.id);\n    }\n  }, [loadAllTransactions, loadTransactionsByEmployee, invalidatePaginatedTransactions, invalidateTransactionsByEmployee, setTransactions]);\n  return /*#__PURE__*/_jsxDEV(Fragment, {\n    children: /*#__PURE__*/_jsxDEV(\"main\", {\n      className: \"MainContainer\",\n      children: [/*#__PURE__*/_jsxDEV(Instructions, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 138,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"hr\", {\n        className: \"RampBreak--l\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 139,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(InputSelect, {\n        isLoading: isLoading || employeesLoading,\n        defaultValue: EMPTY_EMPLOYEE,\n        items: employees ? [EMPTY_EMPLOYEE, ...employees] : [],\n        label: \"Filter by employee\",\n        loadingLabel: \"Loading employees...\",\n        parseItem: item => ({\n          value: item.id,\n          label: `${item.firstName} ${item.lastName}`\n        }),\n        onChange: handleEmployeeChange\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 140,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"RampBreak--l\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 152,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"RampGrid\",\n        children: [isLoading ? /*#__PURE__*/_jsxDEV(\"div\", {\n          children: \"Loading transactions...\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 155,\n          columnNumber: 13\n        }, this) : /*#__PURE__*/_jsxDEV(Transactions, {\n          transactions: transactions,\n          updateTransaction: updateTransaction\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 157,\n          columnNumber: 13\n        }, this), isAllEmployees && (paginatedTransactions === null || paginatedTransactions === void 0 ? void 0 : paginatedTransactions.nextPage) && /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"RampButton\",\n          onClick: async () => {\n            console.log(\"Loading more transactions...\");\n            await fetchPaginatedTransactions();\n          },\n          disabled: isLoading,\n          children: \"View More\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 160,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 153,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 137,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 136,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"V8s9Oi9Xue1FYnsQaheegfWylwM=\", false, function () {\n  return [useEmployees, usePaginatedTransactions, useTransactionsByEmployee];\n});\n_c = App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["Fragment","useCallback","useEffect","useState","InputSelect","Instructions","Transactions","useEmployees","usePaginatedTransactions","useTransactionsByEmployee","EMPTY_EMPLOYEE","jsxDEV","_jsxDEV","App","_s","data","employees","fetchAll","fetchEmployees","loading","employeesLoading","paginatedTransactions","fetchPaginatedTransactions","invalidateData","invalidatePaginatedTransactions","transactionsByEmployee","fetchById","fetchTransactionsByEmployee","invalidateTransactionsByEmployee","isLoading","setIsLoading","isAllEmployees","setIsAllEmployees","transactions","setTransactions","prevTransactions","mergeTransactions","newTransactions","transactionsMap","Map","prevTransactionsMap","map","transaction","id","forEach","prevTransaction","get","set","approved","Array","from","values","updateTransaction","transactionId","loadAllTransactions","console","log","loadTransactionsByEmployee","employeeId","initialize","handleEmployeeChange","newValue","children","className","fileName","_jsxFileName","lineNumber","columnNumber","defaultValue","items","label","loadingLabel","parseItem","item","value","firstName","lastName","onChange","nextPage","onClick","disabled","_c","$RefreshReg$"],"sources":["/Users/roderickmoise/Desktop/Documents/Downloads/ramp-fe-challenge/src/App.tsx"],"sourcesContent":["import { Fragment, useCallback, useEffect, useState } from \"react\"\nimport { InputSelect } from \"./components/InputSelect\"\nimport { Instructions } from \"./components/Instructions\"\nimport { Transactions } from \"./components/Transactions\"\nimport { useEmployees } from \"./hooks/useEmployees\"\nimport { usePaginatedTransactions } from \"./hooks/usePaginatedTransactions\"\nimport { useTransactionsByEmployee } from \"./hooks/useTransactionsByEmployee\"\nimport { EMPTY_EMPLOYEE } from \"./utils/constants\"\nimport { Employee, Transaction } from \"./utils/types\"\n\nexport function App() {\n  const { data: employees, fetchAll: fetchEmployees, loading: employeesLoading } = useEmployees()\n  const {\n    data: paginatedTransactions,\n    fetchAll: fetchPaginatedTransactions,\n    invalidateData: invalidatePaginatedTransactions,\n  } = usePaginatedTransactions()\n  const {\n    data: transactionsByEmployee,\n    fetchById: fetchTransactionsByEmployee,\n    invalidateData: invalidateTransactionsByEmployee,\n  } = useTransactionsByEmployee()\n\n  const [isLoading, setIsLoading] = useState(false)\n  const [isAllEmployees, setIsAllEmployees] = useState(true)\n  const [transactions, setTransactions] = useState<Transaction[]>([])\n\n  // Merge transactions when data changes\n  useEffect(() => {\n    if (isAllEmployees && paginatedTransactions?.data) {\n      // For \"All Employees\", we might be paginating, so we merge transactions\n      setTransactions((prevTransactions) =>\n        mergeTransactions(prevTransactions, paginatedTransactions.data)\n      )\n    } else if (!isAllEmployees && transactionsByEmployee) {\n      // When filtering by employee, we replace the transactions\n      setTransactions(mergeTransactions([], transactionsByEmployee))\n    } else {\n      setTransactions([])\n    }\n  }, [isAllEmployees, paginatedTransactions, transactionsByEmployee])\n\n  function mergeTransactions(\n    prevTransactions: Transaction[],\n    newTransactions: Transaction[]\n  ): Transaction[] {\n    const transactionsMap = new Map<string, Transaction>()\n\n    // Create a map of previous transactions for quick lookup\n    const prevTransactionsMap = new Map<string, Transaction>(\n      prevTransactions.map((transaction) => [transaction.id, transaction])\n    )\n\n    newTransactions.forEach((transaction) => {\n      const prevTransaction = prevTransactionsMap.get(transaction.id)\n      if (prevTransaction) {\n        // Preserve the approved status from the previous transaction\n        transactionsMap.set(transaction.id, {\n          ...transaction,\n          approved: prevTransaction.approved,\n        })\n      } else {\n        transactionsMap.set(transaction.id, transaction)\n      }\n    })\n\n    // Convert map back to array\n    return Array.from(transactionsMap.values())\n  }\n\n  const updateTransaction = useCallback(\n    (transactionId: string, approved: boolean) => {\n      setTransactions((prevTransactions) =>\n        prevTransactions.map((transaction) =>\n          transaction.id === transactionId ? { ...transaction, approved } : transaction\n        )\n      )\n    },\n    [setTransactions]\n  )\n\n  const loadAllTransactions = useCallback(async () => {\n    setIsLoading(true)\n    console.log(\"Loading all transactions...\")\n    await fetchEmployees()\n    await fetchPaginatedTransactions()\n    setIsLoading(false)\n  }, [fetchEmployees, fetchPaginatedTransactions])\n\n  const loadTransactionsByEmployee = useCallback(\n    async (employeeId: string) => {\n      setIsLoading(true)\n      console.log(`Loading transactions for employee ID: ${employeeId}`)\n      await fetchTransactionsByEmployee(employeeId)\n      setIsLoading(false)\n    },\n    [fetchTransactionsByEmployee]\n  )\n\n  useEffect(() => {\n    const initialize = async () => {\n      if (!employees && !employeesLoading) {\n        await loadAllTransactions()\n      }\n    }\n    initialize()\n  }, [employees, employeesLoading, loadAllTransactions])\n\n  const handleEmployeeChange = useCallback(\n    async (newValue: Employee | null) => {\n      console.log(\"handleEmployeeChange called with:\", newValue)\n      setTransactions([]) // Reset transactions\n      invalidatePaginatedTransactions()\n      invalidateTransactionsByEmployee()\n\n      if (!newValue || newValue.id === \"all-employees\") {\n        console.log(\"All Employees selected.\")\n        setIsAllEmployees(true)\n        await loadAllTransactions()\n      } else {\n        console.log(`Fetching transactions for employee ID: ${newValue.id}`)\n        setIsAllEmployees(false)\n        await loadTransactionsByEmployee(newValue.id)\n      }\n    },\n    [\n      loadAllTransactions,\n      loadTransactionsByEmployee,\n      invalidatePaginatedTransactions,\n      invalidateTransactionsByEmployee,\n      setTransactions,\n    ]\n  )\n\n  return (\n    <Fragment>\n      <main className=\"MainContainer\">\n        <Instructions />\n        <hr className=\"RampBreak--l\" />\n        <InputSelect<Employee>\n          isLoading={isLoading || employeesLoading}\n          defaultValue={EMPTY_EMPLOYEE}\n          items={employees ? [EMPTY_EMPLOYEE, ...employees] : []}\n          label=\"Filter by employee\"\n          loadingLabel=\"Loading employees...\"\n          parseItem={(item) => ({\n            value: item.id,\n            label: `${item.firstName} ${item.lastName}`,\n          })}\n          onChange={handleEmployeeChange}\n        />\n        <div className=\"RampBreak--l\" />\n        <div className=\"RampGrid\">\n          {isLoading ? (\n            <div>Loading transactions...</div>\n          ) : (\n            <Transactions transactions={transactions} updateTransaction={updateTransaction} />\n          )}\n          {isAllEmployees && paginatedTransactions?.nextPage && (\n            <button\n              className=\"RampButton\"\n              onClick={async () => {\n                console.log(\"Loading more transactions...\")\n                await fetchPaginatedTransactions()\n              }}\n              disabled={isLoading}\n            >\n              View More\n            </button>\n          )}\n        </div>\n      </main>\n    </Fragment>\n  )\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}