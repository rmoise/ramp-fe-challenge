{"ast":null,"code":"var _jsxFileName = \"/Users/roderickmoise/Desktop/Documents/Downloads/ramp-fe-challenge/src/App.tsx\",\n  _s = $RefreshSig$();\nimport { Fragment, useCallback, useEffect, useMemo, useState } from \"react\";\nimport { InputSelect } from \"./components/InputSelect\";\nimport { Instructions } from \"./components/Instructions\";\nimport { Transactions } from \"./components/Transactions\";\nimport { useEmployees } from \"./hooks/useEmployees\";\nimport { usePaginatedTransactions } from \"./hooks/usePaginatedTransactions\";\nimport { useTransactionsByEmployee } from \"./hooks/useTransactionsByEmployee\";\nimport { EMPTY_EMPLOYEE } from \"./utils/constants\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport function App() {\n  _s();\n  const {\n    data: employees,\n    fetchAll: fetchEmployees,\n    loading: employeesLoading\n  } = useEmployees();\n  const {\n    data: paginatedTransactions,\n    fetchAll: fetchPaginatedTransactions,\n    loading: paginatedLoading\n  } = usePaginatedTransactions();\n  const {\n    data: transactionsByEmployee,\n    fetchById: fetchTransactionsByEmployee,\n    invalidateData: invalidateEmployeeData\n  } = useTransactionsByEmployee();\n  const [isLoading, setIsLoading] = useState(false);\n  const [isAllEmployees, setIsAllEmployees] = useState(true);\n  const [selectedEmployee, setSelectedEmployee] = useState(EMPTY_EMPLOYEE);\n  const [transactionsInitialized, setTransactionsInitialized] = useState(false);\n\n  // Debugging Logs\n  useEffect(() => {\n    console.log(\"Paginated Transactions (debug):\", paginatedTransactions);\n    console.log(\"Transactions by Employee (debug):\", transactionsByEmployee);\n    console.log(\"isAllEmployees (debug):\", isAllEmployees);\n    console.log(\"Selected Employee (debug):\", selectedEmployee);\n  }, [paginatedTransactions, transactionsByEmployee, isAllEmployees, selectedEmployee]);\n\n  // Determine which transactions to show\n  const transactions = useMemo(() => {\n    if (isAllEmployees) {\n      console.log(\"Displaying Paginated Transactions\");\n      return (paginatedTransactions === null || paginatedTransactions === void 0 ? void 0 : paginatedTransactions.data) || [];\n    }\n    console.log(\"Displaying Transactions by Employee\");\n    return transactionsByEmployee || [];\n  }, [paginatedTransactions, transactionsByEmployee, isAllEmployees]);\n\n  // Fetch all transactions for all employees\n  const loadAllTransactions = useCallback(async () => {\n    setIsLoading(true);\n    setIsAllEmployees(true); // Switch to all employees mode\n    console.log(\"Fetching all transactions...\");\n    await fetchPaginatedTransactions(); // Fetch paginated transactions\n    invalidateEmployeeData(); // Clear employee-specific data\n    setIsLoading(false);\n  }, [fetchPaginatedTransactions, invalidateEmployeeData]);\n\n  // Fetch transactions for a specific employee\n  const loadTransactionsByEmployee = useCallback(async employeeId => {\n    if (!employeeId) return;\n    setIsLoading(true);\n    setIsAllEmployees(false); // Switch to employee-specific mode\n\n    console.log(\"Fetching transactions for employee ID:\", employeeId);\n    await fetchTransactionsByEmployee(employeeId);\n    const selectedEmp = employees === null || employees === void 0 ? void 0 : employees.find(emp => emp.id === employeeId);\n    if (selectedEmp && (selectedEmployee === null || selectedEmployee === void 0 ? void 0 : selectedEmployee.id) !== selectedEmp.id) {\n      console.log(\"Setting selected employee:\", selectedEmp);\n      setSelectedEmployee(selectedEmp); // Only set if different\n    }\n    setIsLoading(false);\n  }, [fetchTransactionsByEmployee, employees, selectedEmployee]);\n\n  // Initialize employees and transactions\n  useEffect(() => {\n    const initializeData = async () => {\n      if (!employeesLoading && !employees) {\n        console.log(\"Fetching employees...\");\n        await fetchEmployees();\n      }\n      if (employees && !transactionsInitialized) {\n        console.log(\"Employees fetched, loading all transactions...\");\n        setTransactionsInitialized(true); // Set to true to prevent multiple initial fetches\n        loadAllTransactions(); // Load transactions for all employees\n      }\n    };\n    initializeData();\n  }, [employees, employeesLoading, transactionsInitialized, fetchEmployees, loadAllTransactions]);\n\n  // Load more paginated transactions\n  const handleViewMore = async () => {\n    if (isAllEmployees && (paginatedTransactions === null || paginatedTransactions === void 0 ? void 0 : paginatedTransactions.nextPage) !== null) {\n      console.log(\"Loading more transactions...\");\n      await fetchPaginatedTransactions();\n    } else {\n      console.warn(\"No more transactions to load.\");\n    }\n  };\n\n  // Handle employee selection change\n  const handleEmployeeChange = async newValue => {\n    console.log(\"Selected employee change:\", newValue);\n    if (!newValue || newValue.id === \"all-employees\") {\n      console.log(\"Switching to All Employees...\");\n      setIsAllEmployees(true);\n      setSelectedEmployee(EMPTY_EMPLOYEE); // Reset to \"All Employees\"\n      invalidateEmployeeData(); // Ensure employee-specific data is cleared\n      await loadAllTransactions(); // Load all transactions\n      return;\n    }\n    if (newValue.id && newValue.id !== (selectedEmployee === null || selectedEmployee === void 0 ? void 0 : selectedEmployee.id)) {\n      console.log(\"Loading transactions for specific employee:\", newValue.id);\n      setIsAllEmployees(false);\n      setSelectedEmployee(newValue);\n      await loadTransactionsByEmployee(newValue.id); // Load specific employee's transactions\n    }\n  };\n\n  // Prevent resetting selectedEmployee to empty after loading transactions\n  useEffect(() => {\n    if (!isAllEmployees && (selectedEmployee === null || selectedEmployee === void 0 ? void 0 : selectedEmployee.id) === \"\") {\n      console.log(\"Fixing invalid employee state, resetting to All Employees\");\n      setSelectedEmployee(EMPTY_EMPLOYEE);\n    }\n  }, [isAllEmployees, selectedEmployee]);\n  return /*#__PURE__*/_jsxDEV(Fragment, {\n    children: /*#__PURE__*/_jsxDEV(\"main\", {\n      className: \"MainContainer\",\n      children: [/*#__PURE__*/_jsxDEV(Instructions, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 138,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"hr\", {\n        className: \"RampBreak--l\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 139,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(InputSelect, {\n        isLoading: isLoading || employeesLoading,\n        defaultValue: EMPTY_EMPLOYEE,\n        items: employees === null ? [] : [EMPTY_EMPLOYEE, ...employees],\n        label: \"Filter by employee\",\n        loadingLabel: \"Loading employees\",\n        parseItem: item => ({\n          value: item.id,\n          label: `${item.firstName} ${item.lastName}`\n        }),\n        onChange: handleEmployeeChange\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 141,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"RampBreak--l\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 154,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"RampGrid\",\n        children: [isLoading ? /*#__PURE__*/_jsxDEV(\"div\", {\n          children: \"Loading transactions...\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 157,\n          columnNumber: 24\n        }, this) : /*#__PURE__*/_jsxDEV(Transactions, {\n          transactions: transactions\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 157,\n          columnNumber: 61\n        }, this), isAllEmployees && /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"RampButton\",\n          disabled: isLoading || paginatedLoading || (paginatedTransactions === null || paginatedTransactions === void 0 ? void 0 : paginatedTransactions.nextPage) === null,\n          onClick: handleViewMore,\n          children: \"View More\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 160,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 156,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 137,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 136,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"MpD7SrxIGd9RIVKtehFoUckPRIo=\", false, function () {\n  return [useEmployees, usePaginatedTransactions, useTransactionsByEmployee];\n});\n_c = App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["Fragment","useCallback","useEffect","useMemo","useState","InputSelect","Instructions","Transactions","useEmployees","usePaginatedTransactions","useTransactionsByEmployee","EMPTY_EMPLOYEE","jsxDEV","_jsxDEV","App","_s","data","employees","fetchAll","fetchEmployees","loading","employeesLoading","paginatedTransactions","fetchPaginatedTransactions","paginatedLoading","transactionsByEmployee","fetchById","fetchTransactionsByEmployee","invalidateData","invalidateEmployeeData","isLoading","setIsLoading","isAllEmployees","setIsAllEmployees","selectedEmployee","setSelectedEmployee","transactionsInitialized","setTransactionsInitialized","console","log","transactions","loadAllTransactions","loadTransactionsByEmployee","employeeId","selectedEmp","find","emp","id","initializeData","handleViewMore","nextPage","warn","handleEmployeeChange","newValue","children","className","fileName","_jsxFileName","lineNumber","columnNumber","defaultValue","items","label","loadingLabel","parseItem","item","value","firstName","lastName","onChange","disabled","onClick","_c","$RefreshReg$"],"sources":["/Users/roderickmoise/Desktop/Documents/Downloads/ramp-fe-challenge/src/App.tsx"],"sourcesContent":["import { Fragment, useCallback, useEffect, useMemo, useState } from \"react\"\nimport { InputSelect } from \"./components/InputSelect\"\nimport { Instructions } from \"./components/Instructions\"\nimport { Transactions } from \"./components/Transactions\"\nimport { useEmployees } from \"./hooks/useEmployees\"\nimport { usePaginatedTransactions } from \"./hooks/usePaginatedTransactions\"\nimport { useTransactionsByEmployee } from \"./hooks/useTransactionsByEmployee\"\nimport { EMPTY_EMPLOYEE } from \"./utils/constants\"\nimport { Employee } from \"./utils/types\"\n\nexport function App() {\n  const { data: employees, fetchAll: fetchEmployees, loading: employeesLoading } = useEmployees()\n  const {\n    data: paginatedTransactions,\n    fetchAll: fetchPaginatedTransactions,\n    loading: paginatedLoading,\n  } = usePaginatedTransactions()\n  const {\n    data: transactionsByEmployee,\n    fetchById: fetchTransactionsByEmployee,\n    invalidateData: invalidateEmployeeData,\n  } = useTransactionsByEmployee()\n\n  const [isLoading, setIsLoading] = useState(false)\n  const [isAllEmployees, setIsAllEmployees] = useState(true)\n  const [selectedEmployee, setSelectedEmployee] = useState<Employee | null>(EMPTY_EMPLOYEE)\n  const [transactionsInitialized, setTransactionsInitialized] = useState(false)\n\n  // Debugging Logs\n  useEffect(() => {\n    console.log(\"Paginated Transactions (debug):\", paginatedTransactions)\n    console.log(\"Transactions by Employee (debug):\", transactionsByEmployee)\n    console.log(\"isAllEmployees (debug):\", isAllEmployees)\n    console.log(\"Selected Employee (debug):\", selectedEmployee)\n  }, [paginatedTransactions, transactionsByEmployee, isAllEmployees, selectedEmployee])\n\n  // Determine which transactions to show\n  const transactions = useMemo(() => {\n    if (isAllEmployees) {\n      console.log(\"Displaying Paginated Transactions\")\n      return paginatedTransactions?.data || []\n    }\n    console.log(\"Displaying Transactions by Employee\")\n    return transactionsByEmployee || []\n  }, [paginatedTransactions, transactionsByEmployee, isAllEmployees])\n\n  // Fetch all transactions for all employees\n  const loadAllTransactions = useCallback(async () => {\n    setIsLoading(true)\n    setIsAllEmployees(true) // Switch to all employees mode\n    console.log(\"Fetching all transactions...\")\n\n    await fetchPaginatedTransactions() // Fetch paginated transactions\n    invalidateEmployeeData() // Clear employee-specific data\n    setIsLoading(false)\n  }, [fetchPaginatedTransactions, invalidateEmployeeData])\n\n  // Fetch transactions for a specific employee\n  const loadTransactionsByEmployee = useCallback(\n    async (employeeId: string) => {\n      if (!employeeId) return\n      setIsLoading(true)\n      setIsAllEmployees(false) // Switch to employee-specific mode\n\n      console.log(\"Fetching transactions for employee ID:\", employeeId)\n      await fetchTransactionsByEmployee(employeeId)\n      const selectedEmp = employees?.find((emp) => emp.id === employeeId)\n\n      if (selectedEmp && selectedEmployee?.id !== selectedEmp.id) {\n        console.log(\"Setting selected employee:\", selectedEmp)\n        setSelectedEmployee(selectedEmp) // Only set if different\n      }\n      setIsLoading(false)\n    },\n    [fetchTransactionsByEmployee, employees, selectedEmployee]\n  )\n\n  // Initialize employees and transactions\n  useEffect(() => {\n    const initializeData = async () => {\n      if (!employeesLoading && !employees) {\n        console.log(\"Fetching employees...\")\n        await fetchEmployees()\n      }\n\n      if (employees && !transactionsInitialized) {\n        console.log(\"Employees fetched, loading all transactions...\")\n        setTransactionsInitialized(true) // Set to true to prevent multiple initial fetches\n        loadAllTransactions() // Load transactions for all employees\n      }\n    }\n\n    initializeData()\n  }, [employees, employeesLoading, transactionsInitialized, fetchEmployees, loadAllTransactions])\n\n  // Load more paginated transactions\n  const handleViewMore = async () => {\n    if (isAllEmployees && paginatedTransactions?.nextPage !== null) {\n      console.log(\"Loading more transactions...\")\n      await fetchPaginatedTransactions()\n    } else {\n      console.warn(\"No more transactions to load.\")\n    }\n  }\n\n  // Handle employee selection change\n  const handleEmployeeChange = async (newValue: Employee | null) => {\n    console.log(\"Selected employee change:\", newValue)\n\n    if (!newValue || newValue.id === \"all-employees\") {\n      console.log(\"Switching to All Employees...\")\n      setIsAllEmployees(true)\n      setSelectedEmployee(EMPTY_EMPLOYEE) // Reset to \"All Employees\"\n      invalidateEmployeeData() // Ensure employee-specific data is cleared\n      await loadAllTransactions() // Load all transactions\n      return\n    }\n\n    if (newValue.id && newValue.id !== selectedEmployee?.id) {\n      console.log(\"Loading transactions for specific employee:\", newValue.id)\n      setIsAllEmployees(false)\n      setSelectedEmployee(newValue)\n      await loadTransactionsByEmployee(newValue.id) // Load specific employee's transactions\n    }\n  }\n\n  // Prevent resetting selectedEmployee to empty after loading transactions\n  useEffect(() => {\n    if (!isAllEmployees && selectedEmployee?.id === \"\") {\n      console.log(\"Fixing invalid employee state, resetting to All Employees\")\n      setSelectedEmployee(EMPTY_EMPLOYEE)\n    }\n  }, [isAllEmployees, selectedEmployee])\n\n  return (\n    <Fragment>\n      <main className=\"MainContainer\">\n        <Instructions />\n        <hr className=\"RampBreak--l\" />\n\n        <InputSelect<Employee>\n          isLoading={isLoading || employeesLoading}\n          defaultValue={EMPTY_EMPLOYEE}\n          items={employees === null ? [] : [EMPTY_EMPLOYEE, ...employees]}\n          label=\"Filter by employee\"\n          loadingLabel=\"Loading employees\"\n          parseItem={(item) => ({\n            value: item.id,\n            label: `${item.firstName} ${item.lastName}`,\n          })}\n          onChange={handleEmployeeChange}\n        />\n\n        <div className=\"RampBreak--l\" />\n\n        <div className=\"RampGrid\">\n          {isLoading ? <div>Loading transactions...</div> : <Transactions transactions={transactions} />}\n\n          {isAllEmployees && (\n            <button\n              className=\"RampButton\"\n              disabled={isLoading || paginatedLoading || paginatedTransactions?.nextPage === null}\n              onClick={handleViewMore}\n            >\n              View More\n            </button>\n          )}\n        </div>\n      </main>\n    </Fragment>\n  )\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}