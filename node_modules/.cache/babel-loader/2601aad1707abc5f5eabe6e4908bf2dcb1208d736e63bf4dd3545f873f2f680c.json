{"ast":null,"code":"var _jsxFileName = \"/Users/roderickmoise/Desktop/Documents/Downloads/ramp-fe-challenge/src/App.tsx\",\n  _s = $RefreshSig$();\nimport { Fragment, useCallback, useEffect, useState } from \"react\";\nimport { InputSelect } from \"./components/InputSelect\";\nimport { Instructions } from \"./components/Instructions\";\nimport { Transactions } from \"./components/Transactions\";\nimport { useEmployees } from \"./hooks/useEmployees\";\nimport { usePaginatedTransactions } from \"./hooks/usePaginatedTransactions\";\nimport { useTransactionsByEmployee } from \"./hooks/useTransactionsByEmployee\";\nimport { EMPTY_EMPLOYEE } from \"./utils/constants\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport function App() {\n  _s();\n  const {\n    data: employees,\n    fetchAll: fetchEmployees,\n    loading: employeesLoading\n  } = useEmployees();\n  const {\n    data: paginatedTransactions,\n    fetchAll: fetchPaginatedTransactions,\n    loading: paginatedLoading\n  } = usePaginatedTransactions();\n  const {\n    data: transactionsByEmployee,\n    fetchById: fetchTransactionsByEmployee,\n    invalidateData\n  } = useTransactionsByEmployee();\n  const [isLoading, setIsLoading] = useState(false);\n  const [isAllEmployees, setIsAllEmployees] = useState(true);\n  const [activeTransactions, setActiveTransactions] = useState([]);\n\n  // Fetch and initialize employees and transactions\n  useEffect(() => {\n    const initialize = async () => {\n      if (!employeesLoading && !employees) {\n        await fetchEmployees(); // Fetch employees if not loaded\n      }\n      if (employees && isAllEmployees) {\n        setIsLoading(true);\n        await fetchPaginatedTransactions(); // Fetch transactions for all employees\n        setIsLoading(false);\n      }\n    };\n    initialize();\n  }, [employees, employeesLoading, fetchEmployees, fetchPaginatedTransactions, isAllEmployees]);\n\n  // Handle employee selection changes\n  const handleEmployeeChange = useCallback(async newEmployee => {\n    setIsLoading(true); // Start loading\n    if (!newEmployee || newEmployee.id === \"all-employees\") {\n      console.log(\"Switching to All Employees\");\n      setIsAllEmployees(true);\n      invalidateData(); // Clear previous employee-specific transactions\n      await fetchPaginatedTransactions(); // Fetch paginated transactions for all employees\n      setActiveTransactions((paginatedTransactions === null || paginatedTransactions === void 0 ? void 0 : paginatedTransactions.data) || []); // Update active transactions\n    } else {\n      console.log(`Fetching transactions for employee ID: ${newEmployee.id}`);\n      setIsAllEmployees(false); // Set to specific employee mode\n      await fetchTransactionsByEmployee(newEmployee.id);\n      setActiveTransactions(transactionsByEmployee || []); // Update active transactions\n    }\n    setIsLoading(false); // Stop loading\n  }, [fetchPaginatedTransactions, fetchTransactionsByEmployee, invalidateData, transactionsByEmployee]);\n\n  // Handle \"View More\" button click\n  const handleViewMore = useCallback(async () => {\n    if (isAllEmployees && (paginatedTransactions === null || paginatedTransactions === void 0 ? void 0 : paginatedTransactions.nextPage) !== null) {\n      setIsLoading(true);\n      await fetchPaginatedTransactions();\n      setActiveTransactions(prev => [...prev, ...((paginatedTransactions === null || paginatedTransactions === void 0 ? void 0 : paginatedTransactions.data) || [])]); // Append new transactions\n      setIsLoading(false);\n    }\n  }, [isAllEmployees, paginatedTransactions, fetchPaginatedTransactions]);\n\n  // Update active transactions based on state\n  useEffect(() => {\n    if (isAllEmployees && paginatedTransactions !== null && paginatedTransactions !== void 0 && paginatedTransactions.data) {\n      setActiveTransactions(paginatedTransactions.data);\n    } else if (!isAllEmployees && transactionsByEmployee) {\n      setActiveTransactions(transactionsByEmployee);\n    }\n  }, [isAllEmployees, paginatedTransactions === null || paginatedTransactions === void 0 ? void 0 : paginatedTransactions.data, transactionsByEmployee]);\n  return /*#__PURE__*/_jsxDEV(Fragment, {\n    children: /*#__PURE__*/_jsxDEV(\"main\", {\n      className: \"MainContainer\",\n      children: [/*#__PURE__*/_jsxDEV(Instructions, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 87,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"hr\", {\n        className: \"RampBreak--l\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 88,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(InputSelect, {\n        isLoading: isLoading || employeesLoading,\n        defaultValue: EMPTY_EMPLOYEE,\n        items: employees ? [EMPTY_EMPLOYEE, ...employees] : [],\n        label: \"Filter by employee\",\n        loadingLabel: \"Loading employees...\",\n        parseItem: item => ({\n          value: item.id,\n          label: `${item.firstName} ${item.lastName}`\n        }),\n        onChange: handleEmployeeChange\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 90,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"RampBreak--l\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 103,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"RampGrid\",\n        children: [isLoading ? /*#__PURE__*/_jsxDEV(\"div\", {\n          children: \"Loading transactions...\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 107,\n          columnNumber: 13\n        }, this) : /*#__PURE__*/_jsxDEV(Transactions, {\n          transactions: activeTransactions\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 109,\n          columnNumber: 13\n        }, this), isAllEmployees && (paginatedTransactions === null || paginatedTransactions === void 0 ? void 0 : paginatedTransactions.nextPage) && /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"RampButton\",\n          onClick: handleViewMore,\n          disabled: isLoading || paginatedLoading,\n          children: \"View More\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 112,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 105,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 86,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 85,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"80HUdCazHKD+cGaw8KZNArpXnbQ=\", false, function () {\n  return [useEmployees, usePaginatedTransactions, useTransactionsByEmployee];\n});\n_c = App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["Fragment","useCallback","useEffect","useState","InputSelect","Instructions","Transactions","useEmployees","usePaginatedTransactions","useTransactionsByEmployee","EMPTY_EMPLOYEE","jsxDEV","_jsxDEV","App","_s","data","employees","fetchAll","fetchEmployees","loading","employeesLoading","paginatedTransactions","fetchPaginatedTransactions","paginatedLoading","transactionsByEmployee","fetchById","fetchTransactionsByEmployee","invalidateData","isLoading","setIsLoading","isAllEmployees","setIsAllEmployees","activeTransactions","setActiveTransactions","initialize","handleEmployeeChange","newEmployee","id","console","log","handleViewMore","nextPage","prev","children","className","fileName","_jsxFileName","lineNumber","columnNumber","defaultValue","items","label","loadingLabel","parseItem","item","value","firstName","lastName","onChange","transactions","onClick","disabled","_c","$RefreshReg$"],"sources":["/Users/roderickmoise/Desktop/Documents/Downloads/ramp-fe-challenge/src/App.tsx"],"sourcesContent":["import { Fragment, useCallback, useEffect,  useState } from \"react\"\nimport { InputSelect } from \"./components/InputSelect\"\nimport { Instructions } from \"./components/Instructions\"\nimport { Transactions } from \"./components/Transactions\"\nimport { useEmployees } from \"./hooks/useEmployees\"\nimport { usePaginatedTransactions } from \"./hooks/usePaginatedTransactions\"\nimport { useTransactionsByEmployee } from \"./hooks/useTransactionsByEmployee\"\nimport { EMPTY_EMPLOYEE } from \"./utils/constants\"\nimport { Employee } from \"./utils/types\"\n\nexport function App() {\n  const { data: employees, fetchAll: fetchEmployees, loading: employeesLoading } = useEmployees()\n  const {\n    data: paginatedTransactions,\n    fetchAll: fetchPaginatedTransactions,\n    loading: paginatedLoading,\n  } = usePaginatedTransactions()\n  const {\n    data: transactionsByEmployee,\n    fetchById: fetchTransactionsByEmployee,\n    invalidateData,\n  } = useTransactionsByEmployee()\n\n  const [isLoading, setIsLoading] = useState(false)\n  const [isAllEmployees, setIsAllEmployees] = useState(true)\n  const [activeTransactions, setActiveTransactions] = useState<any[]>([])\n\n  // Fetch and initialize employees and transactions\n  useEffect(() => {\n    const initialize = async () => {\n      if (!employeesLoading && !employees) {\n        await fetchEmployees() // Fetch employees if not loaded\n      }\n      if (employees && isAllEmployees) {\n        setIsLoading(true)\n        await fetchPaginatedTransactions() // Fetch transactions for all employees\n        setIsLoading(false)\n      }\n    }\n\n    initialize()\n  }, [employees, employeesLoading, fetchEmployees, fetchPaginatedTransactions, isAllEmployees])\n\n  // Handle employee selection changes\n  const handleEmployeeChange = useCallback(\n    async (newEmployee: Employee | null) => {\n      setIsLoading(true) // Start loading\n      if (!newEmployee || newEmployee.id === \"all-employees\") {\n        console.log(\"Switching to All Employees\")\n        setIsAllEmployees(true)\n        invalidateData() // Clear previous employee-specific transactions\n        await fetchPaginatedTransactions() // Fetch paginated transactions for all employees\n        setActiveTransactions(paginatedTransactions?.data || []) // Update active transactions\n      } else {\n        console.log(`Fetching transactions for employee ID: ${newEmployee.id}`)\n        setIsAllEmployees(false) // Set to specific employee mode\n        await fetchTransactionsByEmployee(newEmployee.id)\n        setActiveTransactions(transactionsByEmployee || []) // Update active transactions\n      }\n      setIsLoading(false) // Stop loading\n    },\n    [fetchPaginatedTransactions, fetchTransactionsByEmployee, invalidateData, transactionsByEmployee]\n  )\n\n  // Handle \"View More\" button click\n  const handleViewMore = useCallback(async () => {\n    if (isAllEmployees && paginatedTransactions?.nextPage !== null) {\n      setIsLoading(true)\n      await fetchPaginatedTransactions()\n      setActiveTransactions((prev) => [...prev, ...(paginatedTransactions?.data || [])]) // Append new transactions\n      setIsLoading(false)\n    }\n  }, [isAllEmployees, paginatedTransactions, fetchPaginatedTransactions])\n\n  // Update active transactions based on state\n  useEffect(() => {\n    if (isAllEmployees && paginatedTransactions?.data) {\n      setActiveTransactions(paginatedTransactions.data)\n    } else if (!isAllEmployees && transactionsByEmployee) {\n      setActiveTransactions(transactionsByEmployee)\n    }\n  }, [isAllEmployees, paginatedTransactions?.data, transactionsByEmployee])\n\n  return (\n    <Fragment>\n      <main className=\"MainContainer\">\n        <Instructions />\n        <hr className=\"RampBreak--l\" />\n\n        <InputSelect<Employee>\n          isLoading={isLoading || employeesLoading}\n          defaultValue={EMPTY_EMPLOYEE}\n          items={employees ? [EMPTY_EMPLOYEE, ...employees] : []}\n          label=\"Filter by employee\"\n          loadingLabel=\"Loading employees...\"\n          parseItem={(item) => ({\n            value: item.id,\n            label: `${item.firstName} ${item.lastName}`,\n          })}\n          onChange={handleEmployeeChange}\n        />\n\n        <div className=\"RampBreak--l\" />\n\n        <div className=\"RampGrid\">\n          {isLoading ? (\n            <div>Loading transactions...</div>\n          ) : (\n            <Transactions transactions={activeTransactions} />\n          )}\n          {isAllEmployees && paginatedTransactions?.nextPage && (\n            <button\n              className=\"RampButton\"\n              onClick={handleViewMore}\n              disabled={isLoading || paginatedLoading}\n            >\n              View More\n            </button>\n          )}\n        </div>\n      </main>\n    </Fragment>\n  )\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}