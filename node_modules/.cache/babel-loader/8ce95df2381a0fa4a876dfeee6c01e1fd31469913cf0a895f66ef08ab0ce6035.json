{"ast":null,"code":"var _jsxFileName = \"/Users/roderickmoise/Desktop/Documents/Downloads/ramp-fe-challenge/src/App.tsx\",\n  _s = $RefreshSig$();\nimport { Fragment, useEffect, useMemo, useState } from \"react\";\nimport { InputSelect } from \"./components/InputSelect\";\nimport { Instructions } from \"./components/Instructions\";\nimport { Transactions } from \"./components/Transactions\";\nimport { useEmployees } from \"./hooks/useEmployees\";\nimport { usePaginatedTransactions } from \"./hooks/usePaginatedTransactions\";\nimport { useTransactionsByEmployee } from \"./hooks/useTransactionsByEmployee\";\nimport { EMPTY_EMPLOYEE } from \"./utils/constants\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport function App() {\n  _s();\n  const {\n    data: employees,\n    fetchAll: fetchEmployees\n  } = useEmployees();\n  const {\n    data: paginatedTransactions,\n    fetchAll: fetchPaginatedTransactions,\n    loading: paginatedLoading\n  } = usePaginatedTransactions();\n  const {\n    data: transactionsByEmployee,\n    fetchById: fetchTransactionsByEmployee,\n    invalidateData: invalidateEmployeeData\n  } = useTransactionsByEmployee();\n  const [isLoading, setIsLoading] = useState(false);\n  const [isAllEmployees, setIsAllEmployees] = useState(true);\n  const [selectedEmployee, setSelectedEmployee] = useState(null);\n\n  // Fetch all employees and transactions on initial render\n  useEffect(() => {\n    const fetchData = async () => {\n      setIsLoading(true);\n      await fetchEmployees();\n      await fetchPaginatedTransactions();\n      setIsLoading(false);\n    };\n    if (!employees) {\n      fetchData();\n    }\n  }, [employees, fetchEmployees, fetchPaginatedTransactions]);\n\n  // Update transactions based on selected employee\n  useEffect(() => {\n    const fetchEmployeeTransactions = async () => {\n      if (selectedEmployee) {\n        setIsLoading(true);\n        await fetchTransactionsByEmployee(selectedEmployee.id);\n        setIsLoading(false);\n      }\n    };\n    fetchEmployeeTransactions();\n  }, [selectedEmployee, fetchTransactionsByEmployee]);\n  const transactions = useMemo(() => {\n    if (isAllEmployees) {\n      return (paginatedTransactions === null || paginatedTransactions === void 0 ? void 0 : paginatedTransactions.data) || [];\n    }\n    return transactionsByEmployee || [];\n  }, [paginatedTransactions, transactionsByEmployee, isAllEmployees]);\n  const handleViewMore = async () => {\n    if (isAllEmployees) {\n      await fetchPaginatedTransactions();\n    }\n  };\n  const handleEmployeeChange = async newValue => {\n    setSelectedEmployee(newValue);\n    if (newValue === null || newValue.id === \"all-employees\") {\n      setIsAllEmployees(true);\n      invalidateEmployeeData(); // Clear previous employee transactions\n    } else {\n      setIsAllEmployees(false);\n      await fetchTransactionsByEmployee(newValue.id); // Fetch transactions for the selected employee\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(Fragment, {\n    children: /*#__PURE__*/_jsxDEV(\"main\", {\n      className: \"MainContainer\",\n      children: [/*#__PURE__*/_jsxDEV(Instructions, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 82,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"hr\", {\n        className: \"RampBreak--l\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 83,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(InputSelect, {\n        isLoading: isLoading,\n        defaultValue: EMPTY_EMPLOYEE,\n        items: employees === null ? [] : [EMPTY_EMPLOYEE, ...employees],\n        label: \"Filter by employee\",\n        loadingLabel: \"Loading employees\",\n        parseItem: item => ({\n          value: item.id,\n          label: `${item.firstName} ${item.lastName}`\n        }),\n        onChange: handleEmployeeChange\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 85,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"RampBreak--l\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 98,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"RampGrid\",\n        children: [isLoading ? /*#__PURE__*/_jsxDEV(\"div\", {\n          children: \"Loading transactions...\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 101,\n          columnNumber: 24\n        }, this) : /*#__PURE__*/_jsxDEV(Transactions, {\n          transactions: transactions\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 101,\n          columnNumber: 61\n        }, this), isAllEmployees && /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"RampButton\",\n          disabled: isLoading || paginatedLoading,\n          onClick: handleViewMore,\n          children: \"View More\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 104,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 100,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 81,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 80,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"/69WssnlA+rnz4YOvbiU3UivU8c=\", false, function () {\n  return [useEmployees, usePaginatedTransactions, useTransactionsByEmployee];\n});\n_c = App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["Fragment","useEffect","useMemo","useState","InputSelect","Instructions","Transactions","useEmployees","usePaginatedTransactions","useTransactionsByEmployee","EMPTY_EMPLOYEE","jsxDEV","_jsxDEV","App","_s","data","employees","fetchAll","fetchEmployees","paginatedTransactions","fetchPaginatedTransactions","loading","paginatedLoading","transactionsByEmployee","fetchById","fetchTransactionsByEmployee","invalidateData","invalidateEmployeeData","isLoading","setIsLoading","isAllEmployees","setIsAllEmployees","selectedEmployee","setSelectedEmployee","fetchData","fetchEmployeeTransactions","id","transactions","handleViewMore","handleEmployeeChange","newValue","children","className","fileName","_jsxFileName","lineNumber","columnNumber","defaultValue","items","label","loadingLabel","parseItem","item","value","firstName","lastName","onChange","disabled","onClick","_c","$RefreshReg$"],"sources":["/Users/roderickmoise/Desktop/Documents/Downloads/ramp-fe-challenge/src/App.tsx"],"sourcesContent":["import { Fragment, useCallback, useEffect, useMemo, useState } from \"react\"\nimport { InputSelect } from \"./components/InputSelect\"\nimport { Instructions } from \"./components/Instructions\"\nimport { Transactions } from \"./components/Transactions\"\nimport { useEmployees } from \"./hooks/useEmployees\"\nimport { usePaginatedTransactions } from \"./hooks/usePaginatedTransactions\"\nimport { useTransactionsByEmployee } from \"./hooks/useTransactionsByEmployee\"\nimport { EMPTY_EMPLOYEE } from \"./utils/constants\"\nimport { Employee } from \"./utils/types\"\n\nexport function App() {\n  const { data: employees, fetchAll: fetchEmployees } = useEmployees()\n  const {\n    data: paginatedTransactions,\n    fetchAll: fetchPaginatedTransactions,\n    loading: paginatedLoading,\n  } = usePaginatedTransactions()\n  const {\n    data: transactionsByEmployee,\n    fetchById: fetchTransactionsByEmployee,\n    invalidateData: invalidateEmployeeData,\n  } = useTransactionsByEmployee()\n\n  const [isLoading, setIsLoading] = useState(false)\n  const [isAllEmployees, setIsAllEmployees] = useState(true)\n  const [selectedEmployee, setSelectedEmployee] = useState<Employee | null>(null)\n\n  // Fetch all employees and transactions on initial render\n  useEffect(() => {\n    const fetchData = async () => {\n      setIsLoading(true)\n      await fetchEmployees()\n      await fetchPaginatedTransactions()\n      setIsLoading(false)\n    }\n\n    if (!employees) {\n      fetchData()\n    }\n  }, [employees, fetchEmployees, fetchPaginatedTransactions])\n\n  // Update transactions based on selected employee\n  useEffect(() => {\n    const fetchEmployeeTransactions = async () => {\n      if (selectedEmployee) {\n        setIsLoading(true)\n        await fetchTransactionsByEmployee(selectedEmployee.id)\n        setIsLoading(false)\n      }\n    }\n\n    fetchEmployeeTransactions()\n  }, [selectedEmployee, fetchTransactionsByEmployee])\n\n  const transactions = useMemo(() => {\n    if (isAllEmployees) {\n      return paginatedTransactions?.data || []\n    }\n    return transactionsByEmployee || []\n  }, [paginatedTransactions, transactionsByEmployee, isAllEmployees])\n\n  const handleViewMore = async () => {\n    if (isAllEmployees) {\n      await fetchPaginatedTransactions()\n    }\n  }\n\n  const handleEmployeeChange = async (newValue: Employee | null) => {\n    setSelectedEmployee(newValue)\n    if (newValue === null || newValue.id === \"all-employees\") {\n      setIsAllEmployees(true)\n      invalidateEmployeeData() // Clear previous employee transactions\n    } else {\n      setIsAllEmployees(false)\n      await fetchTransactionsByEmployee(newValue.id) // Fetch transactions for the selected employee\n    }\n  }\n\n  return (\n    <Fragment>\n      <main className=\"MainContainer\">\n        <Instructions />\n        <hr className=\"RampBreak--l\" />\n\n        <InputSelect<Employee>\n          isLoading={isLoading}\n          defaultValue={EMPTY_EMPLOYEE}\n          items={employees === null ? [] : [EMPTY_EMPLOYEE, ...employees]}\n          label=\"Filter by employee\"\n          loadingLabel=\"Loading employees\"\n          parseItem={(item) => ({\n            value: item.id,\n            label: `${item.firstName} ${item.lastName}`,\n          })}\n          onChange={handleEmployeeChange}\n        />\n\n        <div className=\"RampBreak--l\" />\n\n        <div className=\"RampGrid\">\n          {isLoading ? <div>Loading transactions...</div> : <Transactions transactions={transactions} />}\n\n          {isAllEmployees && (\n            <button\n              className=\"RampButton\"\n              disabled={isLoading || paginatedLoading}\n              onClick={handleViewMore}\n            >\n              View More\n            </button>\n          )}\n        </div>\n      </main>\n    </Fragment>\n  )\n}\n"],"mappings":";;AAAA,SAASA,QAAQ,EAAeC,SAAS,EAAEC,OAAO,EAAEC,QAAQ,QAAQ,OAAO;AAC3E,SAASC,WAAW,QAAQ,0BAA0B;AACtD,SAASC,YAAY,QAAQ,2BAA2B;AACxD,SAASC,YAAY,QAAQ,2BAA2B;AACxD,SAASC,YAAY,QAAQ,sBAAsB;AACnD,SAASC,wBAAwB,QAAQ,kCAAkC;AAC3E,SAASC,yBAAyB,QAAQ,mCAAmC;AAC7E,SAASC,cAAc,QAAQ,mBAAmB;AAAA,SAAAC,MAAA,IAAAC,OAAA;AAGlD,OAAO,SAASC,GAAGA,CAAA,EAAG;EAAAC,EAAA;EACpB,MAAM;IAAEC,IAAI,EAAEC,SAAS;IAAEC,QAAQ,EAAEC;EAAe,CAAC,GAAGX,YAAY,CAAC,CAAC;EACpE,MAAM;IACJQ,IAAI,EAAEI,qBAAqB;IAC3BF,QAAQ,EAAEG,0BAA0B;IACpCC,OAAO,EAAEC;EACX,CAAC,GAAGd,wBAAwB,CAAC,CAAC;EAC9B,MAAM;IACJO,IAAI,EAAEQ,sBAAsB;IAC5BC,SAAS,EAAEC,2BAA2B;IACtCC,cAAc,EAAEC;EAClB,CAAC,GAAGlB,yBAAyB,CAAC,CAAC;EAE/B,MAAM,CAACmB,SAAS,EAAEC,YAAY,CAAC,GAAG1B,QAAQ,CAAC,KAAK,CAAC;EACjD,MAAM,CAAC2B,cAAc,EAAEC,iBAAiB,CAAC,GAAG5B,QAAQ,CAAC,IAAI,CAAC;EAC1D,MAAM,CAAC6B,gBAAgB,EAAEC,mBAAmB,CAAC,GAAG9B,QAAQ,CAAkB,IAAI,CAAC;;EAE/E;EACAF,SAAS,CAAC,MAAM;IACd,MAAMiC,SAAS,GAAG,MAAAA,CAAA,KAAY;MAC5BL,YAAY,CAAC,IAAI,CAAC;MAClB,MAAMX,cAAc,CAAC,CAAC;MACtB,MAAME,0BAA0B,CAAC,CAAC;MAClCS,YAAY,CAAC,KAAK,CAAC;IACrB,CAAC;IAED,IAAI,CAACb,SAAS,EAAE;MACdkB,SAAS,CAAC,CAAC;IACb;EACF,CAAC,EAAE,CAAClB,SAAS,EAAEE,cAAc,EAAEE,0BAA0B,CAAC,CAAC;;EAE3D;EACAnB,SAAS,CAAC,MAAM;IACd,MAAMkC,yBAAyB,GAAG,MAAAA,CAAA,KAAY;MAC5C,IAAIH,gBAAgB,EAAE;QACpBH,YAAY,CAAC,IAAI,CAAC;QAClB,MAAMJ,2BAA2B,CAACO,gBAAgB,CAACI,EAAE,CAAC;QACtDP,YAAY,CAAC,KAAK,CAAC;MACrB;IACF,CAAC;IAEDM,yBAAyB,CAAC,CAAC;EAC7B,CAAC,EAAE,CAACH,gBAAgB,EAAEP,2BAA2B,CAAC,CAAC;EAEnD,MAAMY,YAAY,GAAGnC,OAAO,CAAC,MAAM;IACjC,IAAI4B,cAAc,EAAE;MAClB,OAAO,CAAAX,qBAAqB,aAArBA,qBAAqB,uBAArBA,qBAAqB,CAAEJ,IAAI,KAAI,EAAE;IAC1C;IACA,OAAOQ,sBAAsB,IAAI,EAAE;EACrC,CAAC,EAAE,CAACJ,qBAAqB,EAAEI,sBAAsB,EAAEO,cAAc,CAAC,CAAC;EAEnE,MAAMQ,cAAc,GAAG,MAAAA,CAAA,KAAY;IACjC,IAAIR,cAAc,EAAE;MAClB,MAAMV,0BAA0B,CAAC,CAAC;IACpC;EACF,CAAC;EAED,MAAMmB,oBAAoB,GAAG,MAAOC,QAAyB,IAAK;IAChEP,mBAAmB,CAACO,QAAQ,CAAC;IAC7B,IAAIA,QAAQ,KAAK,IAAI,IAAIA,QAAQ,CAACJ,EAAE,KAAK,eAAe,EAAE;MACxDL,iBAAiB,CAAC,IAAI,CAAC;MACvBJ,sBAAsB,CAAC,CAAC,EAAC;IAC3B,CAAC,MAAM;MACLI,iBAAiB,CAAC,KAAK,CAAC;MACxB,MAAMN,2BAA2B,CAACe,QAAQ,CAACJ,EAAE,CAAC,EAAC;IACjD;EACF,CAAC;EAED,oBACExB,OAAA,CAACZ,QAAQ;IAAAyC,QAAA,eACP7B,OAAA;MAAM8B,SAAS,EAAC,eAAe;MAAAD,QAAA,gBAC7B7B,OAAA,CAACP,YAAY;QAAAsC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAE,CAAC,eAChBlC,OAAA;QAAI8B,SAAS,EAAC;MAAc;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAE,CAAC,eAE/BlC,OAAA,CAACR,WAAW;QACVwB,SAAS,EAAEA,SAAU;QACrBmB,YAAY,EAAErC,cAAe;QAC7BsC,KAAK,EAAEhC,SAAS,KAAK,IAAI,GAAG,EAAE,GAAG,CAACN,cAAc,EAAE,GAAGM,SAAS,CAAE;QAChEiC,KAAK,EAAC,oBAAoB;QAC1BC,YAAY,EAAC,mBAAmB;QAChCC,SAAS,EAAGC,IAAI,KAAM;UACpBC,KAAK,EAAED,IAAI,CAAChB,EAAE;UACda,KAAK,EAAE,GAAGG,IAAI,CAACE,SAAS,IAAIF,IAAI,CAACG,QAAQ;QAC3C,CAAC,CAAE;QACHC,QAAQ,EAAEjB;MAAqB;QAAAI,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAChC,CAAC,eAEFlC,OAAA;QAAK8B,SAAS,EAAC;MAAc;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAE,CAAC,eAEhClC,OAAA;QAAK8B,SAAS,EAAC,UAAU;QAAAD,QAAA,GACtBb,SAAS,gBAAGhB,OAAA;UAAA6B,QAAA,EAAK;QAAuB;UAAAE,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAK,CAAC,gBAAGlC,OAAA,CAACN,YAAY;UAAC+B,YAAY,EAAEA;QAAa;UAAAM,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAE,CAAC,EAE7FhB,cAAc,iBACblB,OAAA;UACE8B,SAAS,EAAC,YAAY;UACtBe,QAAQ,EAAE7B,SAAS,IAAIN,gBAAiB;UACxCoC,OAAO,EAAEpB,cAAe;UAAAG,QAAA,EACzB;QAED;UAAAE,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAQ,CACT;MAAA;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACE,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACF;EAAC;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACC,CAAC;AAEf;AAAChC,EAAA,CAzGeD,GAAG;EAAA,QACqCN,YAAY,EAK9DC,wBAAwB,EAKxBC,yBAAyB;AAAA;AAAAkD,EAAA,GAXf9C,GAAG;AAAA,IAAA8C,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}