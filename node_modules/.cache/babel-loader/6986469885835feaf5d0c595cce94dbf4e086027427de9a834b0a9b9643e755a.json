{"ast":null,"code":"var _jsxFileName = \"/Users/roderickmoise/Desktop/Documents/Downloads/ramp-fe-challenge/src/App.tsx\",\n  _s = $RefreshSig$();\nimport { Fragment, useCallback, useEffect, useMemo, useState } from \"react\";\nimport { InputSelect } from \"./components/InputSelect\";\nimport { Instructions } from \"./components/Instructions\";\nimport { Transactions } from \"./components/Transactions\";\nimport { useEmployees } from \"./hooks/useEmployees\";\nimport { usePaginatedTransactions } from \"./hooks/usePaginatedTransactions\";\nimport { useTransactionsByEmployee } from \"./hooks/useTransactionsByEmployee\";\nimport { EMPTY_EMPLOYEE } from \"./utils/constants\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport function App() {\n  _s();\n  const {\n    data: employees,\n    fetchAll: fetchEmployees\n  } = useEmployees();\n  const {\n    data: paginatedTransactions,\n    fetchAll: fetchPaginatedTransactions\n  } = usePaginatedTransactions();\n  const {\n    data: transactionsByEmployee,\n    fetchById: fetchTransactionsByEmployee,\n    invalidateData: invalidateEmployeeData\n  } = useTransactionsByEmployee();\n  const [isLoading, setIsLoading] = useState(false);\n  const [isAllEmployees, setIsAllEmployees] = useState(true);\n\n  // Log the structure of transactions for debugging\n  useEffect(() => {\n    console.log(\"Paginated Transactions:\", paginatedTransactions);\n    console.log(\"Transactions by Employee:\", transactionsByEmployee);\n  }, [paginatedTransactions, transactionsByEmployee]);\n  const transactions = useMemo(() => {\n    return isAllEmployees ? (paginatedTransactions === null || paginatedTransactions === void 0 ? void 0 : paginatedTransactions.data) || [] : transactionsByEmployee || [];\n  }, [paginatedTransactions, transactionsByEmployee, isAllEmployees]);\n  const loadAllTransactions = useCallback(async () => {\n    setIsLoading(true);\n    setIsAllEmployees(true);\n    console.log(\"Fetching all transactions...\");\n    await fetchEmployees(); // Fetch employees\n    await fetchPaginatedTransactions(); // Fetch all transactions\n    setIsLoading(false);\n  }, [fetchEmployees, fetchPaginatedTransactions]);\n  const loadTransactionsByEmployee = useCallback(async employeeId => {\n    if (!employeeId) return;\n    setIsLoading(true);\n    setIsAllEmployees(false);\n    invalidateEmployeeData(); // Clear previous employee transactions\n    console.log(\"Fetching transactions for employee ID:\", employeeId);\n    await fetchTransactionsByEmployee(employeeId);\n    console.log(\"Transactions for employee fetched successfully.\");\n    setIsLoading(false);\n  }, [fetchTransactionsByEmployee, invalidateEmployeeData]);\n  useEffect(() => {\n    if (employees === null) {\n      loadAllTransactions(); // Automatically load all transactions if employees are null\n    }\n  }, [employees, loadAllTransactions]);\n  const handleEmployeeChange = async newValue => {\n    console.log(\"Selected employee:\", newValue);\n    if (newValue === null || newValue.id === \"all-employees\") {\n      console.log(\"Switching to All Employees...\");\n      await loadAllTransactions(); // Load all transactions\n      invalidateEmployeeData(); // Clear employee-specific transactions\n    } else if (newValue.id) {\n      console.log(\"Loading transactions for specific employee:\", newValue.id);\n      await loadTransactionsByEmployee(newValue.id);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(Fragment, {\n    children: /*#__PURE__*/_jsxDEV(\"main\", {\n      className: \"MainContainer\",\n      children: [/*#__PURE__*/_jsxDEV(Instructions, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 78,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"hr\", {\n        className: \"RampBreak--l\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 79,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(InputSelect, {\n        isLoading: isLoading,\n        defaultValue: EMPTY_EMPLOYEE,\n        items: employees === null ? [] : [EMPTY_EMPLOYEE, ...employees],\n        label: \"Filter by employee\",\n        loadingLabel: \"Loading employees\",\n        parseItem: item => ({\n          value: item.id,\n          label: `${item.firstName} ${item.lastName}`\n        }),\n        onChange: handleEmployeeChange // Use the updated function here\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 81,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"RampBreak--l\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 94,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"RampGrid\",\n        children: isLoading ? /*#__PURE__*/_jsxDEV(\"div\", {\n          children: \"Loading transactions...\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 97,\n          columnNumber: 24\n        }, this) : /*#__PURE__*/_jsxDEV(Transactions, {\n          transactions: transactions\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 97,\n          columnNumber: 61\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 96,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 77,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 76,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"dGqxkauKggvjVZ6bv/KZ8o7cHWw=\", false, function () {\n  return [useEmployees, usePaginatedTransactions, useTransactionsByEmployee];\n});\n_c = App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["Fragment","useCallback","useEffect","useMemo","useState","InputSelect","Instructions","Transactions","useEmployees","usePaginatedTransactions","useTransactionsByEmployee","EMPTY_EMPLOYEE","jsxDEV","_jsxDEV","App","_s","data","employees","fetchAll","fetchEmployees","paginatedTransactions","fetchPaginatedTransactions","transactionsByEmployee","fetchById","fetchTransactionsByEmployee","invalidateData","invalidateEmployeeData","isLoading","setIsLoading","isAllEmployees","setIsAllEmployees","console","log","transactions","loadAllTransactions","loadTransactionsByEmployee","employeeId","handleEmployeeChange","newValue","id","children","className","fileName","_jsxFileName","lineNumber","columnNumber","defaultValue","items","label","loadingLabel","parseItem","item","value","firstName","lastName","onChange","_c","$RefreshReg$"],"sources":["/Users/roderickmoise/Desktop/Documents/Downloads/ramp-fe-challenge/src/App.tsx"],"sourcesContent":["import { Fragment, useCallback, useEffect, useMemo, useState } from \"react\"\nimport { InputSelect } from \"./components/InputSelect\"\nimport { Instructions } from \"./components/Instructions\"\nimport { Transactions } from \"./components/Transactions\"\nimport { useEmployees } from \"./hooks/useEmployees\"\nimport { usePaginatedTransactions } from \"./hooks/usePaginatedTransactions\"\nimport { useTransactionsByEmployee } from \"./hooks/useTransactionsByEmployee\"\nimport { EMPTY_EMPLOYEE } from \"./utils/constants\"\nimport { Employee } from \"./utils/types\"\n\nexport function App() {\n  const { data: employees, fetchAll: fetchEmployees } = useEmployees()\n  const { data: paginatedTransactions, fetchAll: fetchPaginatedTransactions } =\n    usePaginatedTransactions()\n  const {\n    data: transactionsByEmployee,\n    fetchById: fetchTransactionsByEmployee,\n    invalidateData: invalidateEmployeeData,\n  } = useTransactionsByEmployee()\n\n  const [isLoading, setIsLoading] = useState(false)\n  const [isAllEmployees, setIsAllEmployees] = useState(true)\n\n  // Log the structure of transactions for debugging\n  useEffect(() => {\n    console.log(\"Paginated Transactions:\", paginatedTransactions)\n    console.log(\"Transactions by Employee:\", transactionsByEmployee)\n  }, [paginatedTransactions, transactionsByEmployee])\n\n  const transactions = useMemo(() => {\n    return isAllEmployees ? paginatedTransactions?.data || [] : transactionsByEmployee || []\n  }, [paginatedTransactions, transactionsByEmployee, isAllEmployees])\n\n  const loadAllTransactions = useCallback(async () => {\n    setIsLoading(true)\n    setIsAllEmployees(true)\n    console.log(\"Fetching all transactions...\")\n    await fetchEmployees() // Fetch employees\n    await fetchPaginatedTransactions() // Fetch all transactions\n    setIsLoading(false)\n  }, [fetchEmployees, fetchPaginatedTransactions])\n\n  const loadTransactionsByEmployee = useCallback(\n    async (employeeId: string) => {\n      if (!employeeId) return\n      setIsLoading(true)\n      setIsAllEmployees(false)\n      invalidateEmployeeData() // Clear previous employee transactions\n      console.log(\"Fetching transactions for employee ID:\", employeeId)\n      await fetchTransactionsByEmployee(employeeId)\n      console.log(\"Transactions for employee fetched successfully.\")\n      setIsLoading(false)\n    },\n    [fetchTransactionsByEmployee, invalidateEmployeeData]\n  )\n\n  useEffect(() => {\n    if (employees === null) {\n      loadAllTransactions() // Automatically load all transactions if employees are null\n    }\n  }, [employees, loadAllTransactions])\n\n  const handleEmployeeChange = async (newValue: Employee | null) => {\n    console.log(\"Selected employee:\", newValue)\n    if (newValue === null || newValue.id === \"all-employees\") {\n      console.log(\"Switching to All Employees...\")\n      await loadAllTransactions() // Load all transactions\n      invalidateEmployeeData() // Clear employee-specific transactions\n    } else if (newValue.id) {\n      console.log(\"Loading transactions for specific employee:\", newValue.id)\n      await loadTransactionsByEmployee(newValue.id)\n    }\n  }\n\n  return (\n    <Fragment>\n      <main className=\"MainContainer\">\n        <Instructions />\n        <hr className=\"RampBreak--l\" />\n\n        <InputSelect<Employee>\n          isLoading={isLoading}\n          defaultValue={EMPTY_EMPLOYEE}\n          items={employees === null ? [] : [EMPTY_EMPLOYEE, ...employees]}\n          label=\"Filter by employee\"\n          loadingLabel=\"Loading employees\"\n          parseItem={(item) => ({\n            value: item.id,\n            label: `${item.firstName} ${item.lastName}`,\n          })}\n          onChange={handleEmployeeChange} // Use the updated function here\n        />\n\n        <div className=\"RampBreak--l\" />\n\n        <div className=\"RampGrid\">\n          {isLoading ? <div>Loading transactions...</div> : <Transactions transactions={transactions} />}\n        </div>\n      </main>\n    </Fragment>\n  )\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}