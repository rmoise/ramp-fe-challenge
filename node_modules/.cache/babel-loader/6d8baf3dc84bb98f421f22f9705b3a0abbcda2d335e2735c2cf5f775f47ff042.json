{"ast":null,"code":"var _jsxFileName = \"/Users/roderickmoise/Desktop/Documents/Downloads/ramp-fe-challenge/src/App.tsx\",\n  _s = $RefreshSig$();\nimport { Fragment, useCallback, useEffect, useMemo, useState } from \"react\";\nimport { InputSelect } from \"./components/InputSelect\";\nimport { Instructions } from \"./components/Instructions\";\nimport { Transactions } from \"./components/Transactions\";\nimport { useEmployees } from \"./hooks/useEmployees\";\nimport { usePaginatedTransactions } from \"./hooks/usePaginatedTransactions\";\nimport { useTransactionsByEmployee } from \"./hooks/useTransactionsByEmployee\";\nimport { EMPTY_EMPLOYEE } from \"./utils/constants\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport function App() {\n  _s();\n  const {\n    data: employees,\n    fetchAll: fetchEmployees\n  } = useEmployees();\n  const {\n    data: paginatedTransactions,\n    fetchAll: fetchPaginatedTransactions,\n    loading: paginatedLoading\n  } = usePaginatedTransactions();\n  const {\n    data: transactionsByEmployee,\n    fetchById: fetchTransactionsByEmployee,\n    invalidateData: invalidateEmployeeData\n  } = useTransactionsByEmployee();\n  const [isLoading, setIsLoading] = useState(false);\n  const [isAllEmployees, setIsAllEmployees] = useState(true);\n\n  // Log the structure of transactions for debugging\n  useEffect(() => {\n    console.log(\"Paginated Transactions:\", paginatedTransactions);\n    console.log(\"Transactions by Employee:\", transactionsByEmployee);\n  }, [paginatedTransactions, transactionsByEmployee]);\n  const transactions = useMemo(() => {\n    return isAllEmployees ? (paginatedTransactions === null || paginatedTransactions === void 0 ? void 0 : paginatedTransactions.data) || [] : transactionsByEmployee || [];\n  }, [paginatedTransactions, transactionsByEmployee, isAllEmployees]);\n  const loadAllTransactions = useCallback(async () => {\n    setIsLoading(true);\n    setIsAllEmployees(true);\n    console.log(\"Fetching all transactions...\");\n    await fetchEmployees(); // Fetch employees\n    await fetchPaginatedTransactions(); // Fetch all transactions\n\n    setIsLoading(false);\n  }, [fetchEmployees, fetchPaginatedTransactions]);\n  const loadTransactionsByEmployee = useCallback(async employeeId => {\n    if (!employeeId) return; // Prevent empty employeeId\n    setIsLoading(true);\n    setIsAllEmployees(false); // Set to \"Specific Employee\" mode\n    invalidateEmployeeData(); // Clear previous employee transactions\n\n    console.log(\"Fetching transactions for employee ID:\", employeeId);\n    await fetchTransactionsByEmployee(employeeId); // Fetch specific employee's transactions\n    console.log(\"Transactions for employee fetched successfully.\");\n    setIsLoading(false);\n  }, [fetchTransactionsByEmployee, invalidateEmployeeData]);\n  useEffect(() => {\n    if (employees === null) {\n      loadAllTransactions(); // Automatically load all transactions if employees are null\n    }\n  }, [employees, loadAllTransactions]);\n  const handleEmployeeChange = async newValue => {\n    console.log(\"Selected employee:\", newValue);\n    if (newValue === null || newValue.id === \"all-employees\") {\n      console.log(\"Switching to All Employees...\");\n      await loadAllTransactions(); // Load all transactions\n      invalidateEmployeeData(); // Clear employee-specific transactions\n    } else if (newValue.id) {\n      console.log(\"Loading transactions for specific employee:\", newValue.id);\n      await loadTransactionsByEmployee(newValue.id);\n    }\n  };\n  const handleViewMore = async () => {\n    if (isAllEmployees) {\n      console.log(\"Loading more transactions...\");\n      await fetchPaginatedTransactions(); // Fetch additional transactions\n\n      // After fetching, check if more transactions are available\n      if ((paginatedTransactions === null || paginatedTransactions === void 0 ? void 0 : paginatedTransactions.nextPage) === null) {\n        console.warn(\"No more transactions to load.\");\n      }\n    } else {\n      console.warn(\"No more transactions to load for the selected employee.\");\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(Fragment, {\n    children: /*#__PURE__*/_jsxDEV(\"main\", {\n      className: \"MainContainer\",\n      children: [/*#__PURE__*/_jsxDEV(Instructions, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 98,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"hr\", {\n        className: \"RampBreak--l\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 99,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(InputSelect, {\n        isLoading: isLoading,\n        defaultValue: EMPTY_EMPLOYEE,\n        items: employees === null ? [] : [EMPTY_EMPLOYEE, ...employees],\n        label: \"Filter by employee\",\n        loadingLabel: \"Loading employees\",\n        parseItem: item => ({\n          value: item.id,\n          label: `${item.firstName} ${item.lastName}`\n        }),\n        onChange: handleEmployeeChange // Updated to use the new handler\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 101,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"RampBreak--l\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 114,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"RampGrid\",\n        children: [isLoading ? /*#__PURE__*/_jsxDEV(\"div\", {\n          children: \"Loading transactions...\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 117,\n          columnNumber: 24\n        }, this) : /*#__PURE__*/_jsxDEV(Transactions, {\n          transactions: transactions\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 117,\n          columnNumber: 61\n        }, this), isAllEmployees && /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"RampButton\",\n          disabled: isLoading || paginatedLoading,\n          onClick: handleViewMore,\n          children: \"View More\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 119,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 116,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 97,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 96,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"TOURSVnVNM2feu3vttIOA4LNNVQ=\", false, function () {\n  return [useEmployees, usePaginatedTransactions, useTransactionsByEmployee];\n});\n_c = App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["Fragment","useCallback","useEffect","useMemo","useState","InputSelect","Instructions","Transactions","useEmployees","usePaginatedTransactions","useTransactionsByEmployee","EMPTY_EMPLOYEE","jsxDEV","_jsxDEV","App","_s","data","employees","fetchAll","fetchEmployees","paginatedTransactions","fetchPaginatedTransactions","loading","paginatedLoading","transactionsByEmployee","fetchById","fetchTransactionsByEmployee","invalidateData","invalidateEmployeeData","isLoading","setIsLoading","isAllEmployees","setIsAllEmployees","console","log","transactions","loadAllTransactions","loadTransactionsByEmployee","employeeId","handleEmployeeChange","newValue","id","handleViewMore","nextPage","warn","children","className","fileName","_jsxFileName","lineNumber","columnNumber","defaultValue","items","label","loadingLabel","parseItem","item","value","firstName","lastName","onChange","disabled","onClick","_c","$RefreshReg$"],"sources":["/Users/roderickmoise/Desktop/Documents/Downloads/ramp-fe-challenge/src/App.tsx"],"sourcesContent":["import { Fragment, useCallback, useEffect, useMemo, useState } from \"react\"\nimport { InputSelect } from \"./components/InputSelect\"\nimport { Instructions } from \"./components/Instructions\"\nimport { Transactions } from \"./components/Transactions\"\nimport { useEmployees } from \"./hooks/useEmployees\"\nimport { usePaginatedTransactions } from \"./hooks/usePaginatedTransactions\"\nimport { useTransactionsByEmployee } from \"./hooks/useTransactionsByEmployee\"\nimport { EMPTY_EMPLOYEE } from \"./utils/constants\"\nimport { Employee } from \"./utils/types\"\n\nexport function App() {\n  const { data: employees, fetchAll: fetchEmployees } = useEmployees()\n  const {\n    data: paginatedTransactions,\n    fetchAll: fetchPaginatedTransactions,\n    loading: paginatedLoading,\n  } = usePaginatedTransactions()\n  const {\n    data: transactionsByEmployee,\n    fetchById: fetchTransactionsByEmployee,\n    invalidateData: invalidateEmployeeData,\n  } = useTransactionsByEmployee()\n\n  const [isLoading, setIsLoading] = useState(false)\n  const [isAllEmployees, setIsAllEmployees] = useState(true)\n\n  // Log the structure of transactions for debugging\n  useEffect(() => {\n    console.log(\"Paginated Transactions:\", paginatedTransactions)\n    console.log(\"Transactions by Employee:\", transactionsByEmployee)\n  }, [paginatedTransactions, transactionsByEmployee])\n\n  const transactions = useMemo(() => {\n    return isAllEmployees ? paginatedTransactions?.data || [] : transactionsByEmployee || []\n  }, [paginatedTransactions, transactionsByEmployee, isAllEmployees])\n\n  const loadAllTransactions = useCallback(async () => {\n    setIsLoading(true)\n    setIsAllEmployees(true)\n    console.log(\"Fetching all transactions...\")\n\n    await fetchEmployees() // Fetch employees\n    await fetchPaginatedTransactions() // Fetch all transactions\n\n    setIsLoading(false)\n  }, [fetchEmployees, fetchPaginatedTransactions])\n\n  const loadTransactionsByEmployee = useCallback(\n    async (employeeId: string) => {\n      if (!employeeId) return // Prevent empty employeeId\n      setIsLoading(true)\n      setIsAllEmployees(false) // Set to \"Specific Employee\" mode\n      invalidateEmployeeData() // Clear previous employee transactions\n\n      console.log(\"Fetching transactions for employee ID:\", employeeId)\n      await fetchTransactionsByEmployee(employeeId) // Fetch specific employee's transactions\n      console.log(\"Transactions for employee fetched successfully.\")\n      setIsLoading(false)\n    },\n    [fetchTransactionsByEmployee, invalidateEmployeeData]\n  )\n\n  useEffect(() => {\n    if (employees === null) {\n      loadAllTransactions() // Automatically load all transactions if employees are null\n    }\n  }, [employees, loadAllTransactions])\n\n  const handleEmployeeChange = async (newValue: Employee | null) => {\n    console.log(\"Selected employee:\", newValue)\n    if (newValue === null || newValue.id === \"all-employees\") {\n      console.log(\"Switching to All Employees...\")\n      await loadAllTransactions() // Load all transactions\n      invalidateEmployeeData() // Clear employee-specific transactions\n    } else if (newValue.id) {\n      console.log(\"Loading transactions for specific employee:\", newValue.id)\n      await loadTransactionsByEmployee(newValue.id)\n    }\n  }\n\n  const handleViewMore = async () => {\n    if (isAllEmployees) {\n      console.log(\"Loading more transactions...\")\n      await fetchPaginatedTransactions() // Fetch additional transactions\n\n      // After fetching, check if more transactions are available\n      if (paginatedTransactions?.nextPage === null) {\n        console.warn(\"No more transactions to load.\")\n      }\n    } else {\n      console.warn(\"No more transactions to load for the selected employee.\")\n    }\n  }\n\n  return (\n    <Fragment>\n      <main className=\"MainContainer\">\n        <Instructions />\n        <hr className=\"RampBreak--l\" />\n\n        <InputSelect<Employee>\n          isLoading={isLoading}\n          defaultValue={EMPTY_EMPLOYEE}\n          items={employees === null ? [] : [EMPTY_EMPLOYEE, ...employees]}\n          label=\"Filter by employee\"\n          loadingLabel=\"Loading employees\"\n          parseItem={(item) => ({\n            value: item.id,\n            label: `${item.firstName} ${item.lastName}`,\n          })}\n          onChange={handleEmployeeChange} // Updated to use the new handler\n        />\n\n        <div className=\"RampBreak--l\" />\n\n        <div className=\"RampGrid\">\n          {isLoading ? <div>Loading transactions...</div> : <Transactions transactions={transactions} />}\n          {isAllEmployees && (\n            <button\n              className=\"RampButton\"\n              disabled={isLoading || paginatedLoading}\n              onClick={handleViewMore}\n            >\n              View More\n            </button>\n          )}\n        </div>\n      </main>\n    </Fragment>\n  )\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}