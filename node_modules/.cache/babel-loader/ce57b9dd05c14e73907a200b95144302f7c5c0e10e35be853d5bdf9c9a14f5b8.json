{"ast":null,"code":"var _jsxFileName = \"/Users/roderickmoise/Desktop/Documents/Downloads/ramp-fe-challenge/src/App.tsx\",\n  _s = $RefreshSig$();\nimport { Fragment, useCallback, useEffect, useState } from \"react\";\nimport { InputSelect } from \"./components/InputSelect\";\nimport { Instructions } from \"./components/Instructions\";\nimport { Transactions } from \"./components/Transactions\";\nimport { useEmployees } from \"./hooks/useEmployees\";\nimport { usePaginatedTransactions } from \"./hooks/usePaginatedTransactions\";\nimport { useTransactionsByEmployee } from \"./hooks/useTransactionsByEmployee\";\nimport { EMPTY_EMPLOYEE } from \"./utils/constants\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport function App() {\n  _s();\n  const {\n    data: employees,\n    fetchAll: fetchEmployees,\n    loading: employeesLoading\n  } = useEmployees();\n  const {\n    data: paginatedTransactions,\n    fetchAll: fetchPaginatedTransactions,\n    loading: paginatedLoading\n  } = usePaginatedTransactions();\n  const {\n    fetchById: fetchTransactionsByEmployee\n  } = useTransactionsByEmployee(); // Removed unused transactionsByEmployee\n\n  const [isLoading, setIsLoading] = useState(false);\n  const [isAllEmployees, setIsAllEmployees] = useState(true);\n  const [activeTransactions, setActiveTransactions] = useState([]);\n\n  // Fetch and display transactions for \"All Employees\"\n  const fetchAllEmployeesTransactions = useCallback(async () => {\n    setIsLoading(true);\n    console.log(\"Fetching all employees transactions...\");\n    const result = await fetchPaginatedTransactions(); // Fetch paginated transactions\n    if (result && result.data) {\n      // Ensure result is not void and contains data\n      setActiveTransactions(result.data); // Update state with transactions for \"All Employees\"\n    } else {\n      setActiveTransactions([]); // Fallback in case there's no data\n    }\n    setIsAllEmployees(true); // Set the view mode to \"All Employees\"\n    setIsLoading(false);\n  }, [fetchPaginatedTransactions]);\n\n  // Fetch and display transactions for a specific employee\n  const fetchSpecificEmployeeTransactions = useCallback(async employeeId => {\n    setIsLoading(true);\n    console.log(\"Fetching transactions for employee ID:\", employeeId);\n    const result = await fetchTransactionsByEmployee(employeeId); // Fetch transactions by employee ID\n    if (result) {\n      // Ensure result is not void\n      setActiveTransactions(result); // Update state with specific employee's transactions\n    } else {\n      setActiveTransactions([]); // Fallback in case there's no data\n    }\n    setIsAllEmployees(false); // Set the view mode to specific employee\n    setIsLoading(false);\n  }, [fetchTransactionsByEmployee]);\n\n  // Handle employee selection change\n  const handleEmployeeChange = useCallback(async newEmployee => {\n    if (!newEmployee || newEmployee.id === \"all-employees\") {\n      console.log(\"Switching to All Employees view...\");\n      await fetchAllEmployeesTransactions(); // Fetch and show transactions for \"All Employees\"\n    } else {\n      console.log(\"Switching to specific employee view:\", newEmployee.firstName, newEmployee.lastName);\n      await fetchSpecificEmployeeTransactions(newEmployee.id); // Fetch and show transactions for selected employee\n    }\n  }, [fetchAllEmployeesTransactions, fetchSpecificEmployeeTransactions]);\n\n  // Initial loading of employees and transactions for \"All Employees\"\n  useEffect(() => {\n    const initialize = async () => {\n      if (!employeesLoading && !employees) {\n        console.log(\"Fetching employees...\");\n        await fetchEmployees();\n      }\n      if (employees) {\n        console.log(\"Fetching initial transactions for All Employees...\");\n        await fetchAllEmployeesTransactions(); // Initial load of \"All Employees\" transactions\n      }\n    };\n    initialize();\n  }, [employees, employeesLoading, fetchEmployees, fetchAllEmployeesTransactions]);\n  return /*#__PURE__*/_jsxDEV(Fragment, {\n    children: /*#__PURE__*/_jsxDEV(\"main\", {\n      className: \"MainContainer\",\n      children: [/*#__PURE__*/_jsxDEV(Instructions, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 95,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"hr\", {\n        className: \"RampBreak--l\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 96,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(InputSelect, {\n        isLoading: isLoading || employeesLoading,\n        defaultValue: EMPTY_EMPLOYEE,\n        items: employees ? [EMPTY_EMPLOYEE, ...employees] : [],\n        label: \"Filter by employee\",\n        loadingLabel: \"Loading employees...\",\n        parseItem: item => ({\n          value: item.id,\n          label: `${item.firstName} ${item.lastName}`\n        }),\n        onChange: handleEmployeeChange // Handle the selection change\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 98,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"RampBreak--l\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 111,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"RampGrid\",\n        children: [isLoading ? /*#__PURE__*/_jsxDEV(\"div\", {\n          children: \"Loading transactions...\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 115,\n          columnNumber: 13\n        }, this) : /*#__PURE__*/_jsxDEV(Transactions, {\n          transactions: activeTransactions\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 117,\n          columnNumber: 13\n        }, this) // Render the transactions\n        , isAllEmployees && (paginatedTransactions === null || paginatedTransactions === void 0 ? void 0 : paginatedTransactions.nextPage) && /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"RampButton\",\n          onClick: fetchAllEmployeesTransactions // Fetch more transactions for \"All Employees\"\n          ,\n          disabled: isLoading || paginatedLoading || (paginatedTransactions === null || paginatedTransactions === void 0 ? void 0 : paginatedTransactions.nextPage) === null,\n          children: \"View More\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 121,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 113,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 94,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 93,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"T/sgEYhHLtqkLttP0vmffxx+eVA=\", false, function () {\n  return [useEmployees, usePaginatedTransactions, useTransactionsByEmployee];\n});\n_c = App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["Fragment","useCallback","useEffect","useState","InputSelect","Instructions","Transactions","useEmployees","usePaginatedTransactions","useTransactionsByEmployee","EMPTY_EMPLOYEE","jsxDEV","_jsxDEV","App","_s","data","employees","fetchAll","fetchEmployees","loading","employeesLoading","paginatedTransactions","fetchPaginatedTransactions","paginatedLoading","fetchById","fetchTransactionsByEmployee","isLoading","setIsLoading","isAllEmployees","setIsAllEmployees","activeTransactions","setActiveTransactions","fetchAllEmployeesTransactions","console","log","result","fetchSpecificEmployeeTransactions","employeeId","handleEmployeeChange","newEmployee","id","firstName","lastName","initialize","children","className","fileName","_jsxFileName","lineNumber","columnNumber","defaultValue","items","label","loadingLabel","parseItem","item","value","onChange","transactions","nextPage","onClick","disabled","_c","$RefreshReg$"],"sources":["/Users/roderickmoise/Desktop/Documents/Downloads/ramp-fe-challenge/src/App.tsx"],"sourcesContent":["import { Fragment, useCallback, useEffect, useState } from \"react\"\nimport { InputSelect } from \"./components/InputSelect\"\nimport { Instructions } from \"./components/Instructions\"\nimport { Transactions } from \"./components/Transactions\"\nimport { useEmployees } from \"./hooks/useEmployees\"\nimport { usePaginatedTransactions } from \"./hooks/usePaginatedTransactions\"\nimport { useTransactionsByEmployee } from \"./hooks/useTransactionsByEmployee\"\nimport { EMPTY_EMPLOYEE } from \"./utils/constants\"\nimport { Employee } from \"./utils/types\"\n\nexport function App() {\n  const { data: employees, fetchAll: fetchEmployees, loading: employeesLoading } = useEmployees()\n  const {\n    data: paginatedTransactions,\n    fetchAll: fetchPaginatedTransactions,\n    loading: paginatedLoading,\n  } = usePaginatedTransactions()\n  const { fetchById: fetchTransactionsByEmployee } = useTransactionsByEmployee() // Removed unused transactionsByEmployee\n\n  const [isLoading, setIsLoading] = useState(false)\n  const [isAllEmployees, setIsAllEmployees] = useState(true)\n  const [activeTransactions, setActiveTransactions] = useState<any[]>([])\n\n  // Fetch and display transactions for \"All Employees\"\n  const fetchAllEmployeesTransactions = useCallback(async () => {\n    setIsLoading(true)\n    console.log(\"Fetching all employees transactions...\")\n\n    const result = await fetchPaginatedTransactions() // Fetch paginated transactions\n    if (result && result.data) {\n      // Ensure result is not void and contains data\n      setActiveTransactions(result.data) // Update state with transactions for \"All Employees\"\n    } else {\n      setActiveTransactions([]) // Fallback in case there's no data\n    }\n\n    setIsAllEmployees(true) // Set the view mode to \"All Employees\"\n    setIsLoading(false)\n  }, [fetchPaginatedTransactions])\n\n  // Fetch and display transactions for a specific employee\n  const fetchSpecificEmployeeTransactions = useCallback(\n    async (employeeId: string) => {\n      setIsLoading(true)\n      console.log(\"Fetching transactions for employee ID:\", employeeId)\n\n      const result = await fetchTransactionsByEmployee(employeeId) // Fetch transactions by employee ID\n      if (result) {\n        // Ensure result is not void\n        setActiveTransactions(result) // Update state with specific employee's transactions\n      } else {\n        setActiveTransactions([]) // Fallback in case there's no data\n      }\n\n      setIsAllEmployees(false) // Set the view mode to specific employee\n      setIsLoading(false)\n    },\n    [fetchTransactionsByEmployee]\n  )\n\n  // Handle employee selection change\n  const handleEmployeeChange = useCallback(\n    async (newEmployee: Employee | null) => {\n      if (!newEmployee || newEmployee.id === \"all-employees\") {\n        console.log(\"Switching to All Employees view...\")\n        await fetchAllEmployeesTransactions() // Fetch and show transactions for \"All Employees\"\n      } else {\n        console.log(\"Switching to specific employee view:\", newEmployee.firstName, newEmployee.lastName)\n        await fetchSpecificEmployeeTransactions(newEmployee.id) // Fetch and show transactions for selected employee\n      }\n    },\n    [fetchAllEmployeesTransactions, fetchSpecificEmployeeTransactions]\n  )\n\n  // Initial loading of employees and transactions for \"All Employees\"\n  useEffect(() => {\n    const initialize = async () => {\n      if (!employeesLoading && !employees) {\n        console.log(\"Fetching employees...\")\n        await fetchEmployees()\n      }\n\n      if (employees) {\n        console.log(\"Fetching initial transactions for All Employees...\")\n        await fetchAllEmployeesTransactions() // Initial load of \"All Employees\" transactions\n      }\n    }\n\n    initialize()\n  }, [employees, employeesLoading, fetchEmployees, fetchAllEmployeesTransactions])\n\n  return (\n    <Fragment>\n      <main className=\"MainContainer\">\n        <Instructions />\n        <hr className=\"RampBreak--l\" />\n\n        <InputSelect<Employee>\n          isLoading={isLoading || employeesLoading}\n          defaultValue={EMPTY_EMPLOYEE}\n          items={employees ? [EMPTY_EMPLOYEE, ...employees] : []}\n          label=\"Filter by employee\"\n          loadingLabel=\"Loading employees...\"\n          parseItem={(item) => ({\n            value: item.id,\n            label: `${item.firstName} ${item.lastName}`,\n          })}\n          onChange={handleEmployeeChange} // Handle the selection change\n        />\n\n        <div className=\"RampBreak--l\" />\n\n        <div className=\"RampGrid\">\n          {isLoading ? (\n            <div>Loading transactions...</div>\n          ) : (\n            <Transactions transactions={activeTransactions} /> // Render the transactions\n          )}\n\n          {isAllEmployees && paginatedTransactions?.nextPage && (\n            <button\n              className=\"RampButton\"\n              onClick={fetchAllEmployeesTransactions} // Fetch more transactions for \"All Employees\"\n              disabled={isLoading || paginatedLoading || paginatedTransactions?.nextPage === null}\n            >\n              View More\n            </button>\n          )}\n        </div>\n      </main>\n    </Fragment>\n  )\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}