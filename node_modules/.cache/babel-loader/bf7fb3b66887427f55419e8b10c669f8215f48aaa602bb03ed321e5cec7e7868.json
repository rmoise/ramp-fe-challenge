{"ast":null,"code":"var _jsxFileName = \"/Users/roderickmoise/Desktop/Documents/Downloads/ramp-fe-challenge/src/App.tsx\",\n  _s = $RefreshSig$();\nimport { Fragment, useCallback, useEffect, useMemo, useState } from \"react\";\nimport { InputSelect } from \"./components/InputSelect\";\nimport { Instructions } from \"./components/Instructions\";\nimport { Transactions } from \"./components/Transactions\";\nimport { useEmployees } from \"./hooks/useEmployees\";\nimport { usePaginatedTransactions } from \"./hooks/usePaginatedTransactions\";\nimport { useTransactionsByEmployee } from \"./hooks/useTransactionsByEmployee\";\nimport { EMPTY_EMPLOYEE } from \"./utils/constants\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport function App() {\n  _s();\n  const {\n    data: employees,\n    ...employeeUtils\n  } = useEmployees();\n  const {\n    data: paginatedTransactions,\n    fetchAll: fetchPaginatedTransactions,\n    loading: loadingPaginated\n  } = usePaginatedTransactions();\n  const {\n    data: transactionsByEmployee,\n    fetchById: fetchTransactionsByEmployee\n  } = useTransactionsByEmployee();\n  const [isLoading, setIsLoading] = useState(false);\n  const [isAllEmployees, setIsAllEmployees] = useState(true);\n  const [hasMoreTransactions, setHasMoreTransactions] = useState(true);\n  useEffect(() => {\n    console.log(\"Paginated Transactions:\", paginatedTransactions);\n  }, [paginatedTransactions]);\n  const transactions = useMemo(() => {\n    return isAllEmployees ? (paginatedTransactions === null || paginatedTransactions === void 0 ? void 0 : paginatedTransactions.data) || [] : transactionsByEmployee || [];\n  }, [paginatedTransactions, transactionsByEmployee, isAllEmployees]);\n  const loadAllTransactions = useCallback(async () => {\n    setIsLoading(true);\n    setIsAllEmployees(true);\n    console.log(\"Fetching all transactions...\");\n    await employeeUtils.fetchAll(); // Fetch employees\n    await fetchPaginatedTransactions(); // Fetch all transactions\n\n    if (paginatedTransactions !== null && paginatedTransactions !== void 0 && paginatedTransactions.data) {\n      setHasMoreTransactions(paginatedTransactions.nextPage !== null);\n    }\n    setIsLoading(false);\n  }, [employeeUtils, fetchPaginatedTransactions, paginatedTransactions]);\n  const loadTransactionsByEmployee = useCallback(async employeeId => {\n    if (!employeeId) return;\n    setIsLoading(true);\n    setIsAllEmployees(false);\n    console.log(\"Fetching transactions for employee ID:\", employeeId);\n    await fetchTransactionsByEmployee(employeeId);\n    setIsLoading(false);\n  }, [fetchTransactionsByEmployee]);\n  useEffect(() => {\n    if (employees === null && !employeeUtils.loading) {\n      loadAllTransactions();\n    }\n  }, [employeeUtils.loading, employees, loadAllTransactions]);\n  const handleViewMore = async () => {\n    if (isAllEmployees && hasMoreTransactions) {\n      console.log(\"Loading more transactions...\");\n      await fetchPaginatedTransactions();\n\n      // Check if more transactions are available\n      if ((paginatedTransactions === null || paginatedTransactions === void 0 ? void 0 : paginatedTransactions.nextPage) === null) {\n        setHasMoreTransactions(false);\n      }\n    } else {\n      console.warn(\"No more transactions to load.\");\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(Fragment, {\n    children: /*#__PURE__*/_jsxDEV(\"main\", {\n      className: \"MainContainer\",\n      children: [/*#__PURE__*/_jsxDEV(Instructions, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 83,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"hr\", {\n        className: \"RampBreak--l\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 84,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(InputSelect, {\n        isLoading: isLoading,\n        defaultValue: EMPTY_EMPLOYEE,\n        items: employees === null ? [] : [EMPTY_EMPLOYEE, ...employees],\n        label: \"Filter by employee\",\n        loadingLabel: \"Loading employees\",\n        parseItem: item => ({\n          value: item.id,\n          label: `${item.firstName} ${item.lastName}`\n        }),\n        onChange: async newValue => {\n          console.log(\"Selected employee:\", newValue);\n          if (newValue === null || newValue.id === \"all-employees\") {\n            console.log(\"Switching to All Employees...\");\n            await loadAllTransactions();\n          } else if (newValue.id) {\n            console.log(\"Loading transactions for specific employee:\", newValue.id);\n            await loadTransactionsByEmployee(newValue.id);\n          }\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 86,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"RampBreak--l\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 108,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"RampGrid\",\n        children: [isLoading ? /*#__PURE__*/_jsxDEV(\"div\", {\n          children: \"Loading transactions...\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 111,\n          columnNumber: 24\n        }, this) : /*#__PURE__*/_jsxDEV(Transactions, {\n          transactions: transactions\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 111,\n          columnNumber: 61\n        }, this), isAllEmployees && hasMoreTransactions && /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"RampButton\",\n          disabled: loadingPaginated,\n          onClick: handleViewMore,\n          children: \"View More\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 113,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 110,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 82,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 81,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"NAR9FDd23Xv0RxqGrHa3UZxn2/o=\", false, function () {\n  return [useEmployees, usePaginatedTransactions, useTransactionsByEmployee];\n});\n_c = App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["Fragment","useCallback","useEffect","useMemo","useState","InputSelect","Instructions","Transactions","useEmployees","usePaginatedTransactions","useTransactionsByEmployee","EMPTY_EMPLOYEE","jsxDEV","_jsxDEV","App","_s","data","employees","employeeUtils","paginatedTransactions","fetchAll","fetchPaginatedTransactions","loading","loadingPaginated","transactionsByEmployee","fetchById","fetchTransactionsByEmployee","isLoading","setIsLoading","isAllEmployees","setIsAllEmployees","hasMoreTransactions","setHasMoreTransactions","console","log","transactions","loadAllTransactions","nextPage","loadTransactionsByEmployee","employeeId","handleViewMore","warn","children","className","fileName","_jsxFileName","lineNumber","columnNumber","defaultValue","items","label","loadingLabel","parseItem","item","value","id","firstName","lastName","onChange","newValue","disabled","onClick","_c","$RefreshReg$"],"sources":["/Users/roderickmoise/Desktop/Documents/Downloads/ramp-fe-challenge/src/App.tsx"],"sourcesContent":["import { Fragment, useCallback, useEffect, useMemo, useState } from \"react\"\nimport { InputSelect } from \"./components/InputSelect\"\nimport { Instructions } from \"./components/Instructions\"\nimport { Transactions } from \"./components/Transactions\"\nimport { useEmployees } from \"./hooks/useEmployees\"\nimport { usePaginatedTransactions } from \"./hooks/usePaginatedTransactions\"\nimport { useTransactionsByEmployee } from \"./hooks/useTransactionsByEmployee\"\nimport { EMPTY_EMPLOYEE } from \"./utils/constants\"\nimport { Employee } from \"./utils/types\"\n\nexport function App() {\n  const { data: employees, ...employeeUtils } = useEmployees()\n  const {\n    data: paginatedTransactions,\n    fetchAll: fetchPaginatedTransactions,\n    loading: loadingPaginated,\n  } = usePaginatedTransactions()\n  const { data: transactionsByEmployee, fetchById: fetchTransactionsByEmployee } =\n    useTransactionsByEmployee()\n\n  const [isLoading, setIsLoading] = useState(false)\n  const [isAllEmployees, setIsAllEmployees] = useState(true)\n  const [hasMoreTransactions, setHasMoreTransactions] = useState(true)\n\n  useEffect(() => {\n    console.log(\"Paginated Transactions:\", paginatedTransactions)\n  }, [paginatedTransactions])\n\n  const transactions = useMemo(() => {\n    return isAllEmployees ? paginatedTransactions?.data || [] : transactionsByEmployee || []\n  }, [paginatedTransactions, transactionsByEmployee, isAllEmployees])\n\n  const loadAllTransactions = useCallback(async () => {\n    setIsLoading(true)\n    setIsAllEmployees(true)\n    console.log(\"Fetching all transactions...\")\n\n    await employeeUtils.fetchAll() // Fetch employees\n    await fetchPaginatedTransactions() // Fetch all transactions\n\n    if (paginatedTransactions?.data) {\n      setHasMoreTransactions(paginatedTransactions.nextPage !== null)\n    }\n\n    setIsLoading(false)\n  }, [employeeUtils, fetchPaginatedTransactions, paginatedTransactions])\n\n  const loadTransactionsByEmployee = useCallback(\n    async (employeeId: string) => {\n      if (!employeeId) return\n      setIsLoading(true)\n      setIsAllEmployees(false)\n      console.log(\"Fetching transactions for employee ID:\", employeeId)\n      await fetchTransactionsByEmployee(employeeId)\n      setIsLoading(false)\n    },\n    [fetchTransactionsByEmployee]\n  )\n\n  useEffect(() => {\n    if (employees === null && !employeeUtils.loading) {\n      loadAllTransactions()\n    }\n  }, [employeeUtils.loading, employees, loadAllTransactions])\n\n  const handleViewMore = async () => {\n    if (isAllEmployees && hasMoreTransactions) {\n      console.log(\"Loading more transactions...\")\n      await fetchPaginatedTransactions()\n\n      // Check if more transactions are available\n      if (paginatedTransactions?.nextPage === null) {\n        setHasMoreTransactions(false)\n      }\n    } else {\n      console.warn(\"No more transactions to load.\")\n    }\n  }\n\n  return (\n    <Fragment>\n      <main className=\"MainContainer\">\n        <Instructions />\n        <hr className=\"RampBreak--l\" />\n\n        <InputSelect<Employee>\n          isLoading={isLoading}\n          defaultValue={EMPTY_EMPLOYEE}\n          items={employees === null ? [] : [EMPTY_EMPLOYEE, ...employees]}\n          label=\"Filter by employee\"\n          loadingLabel=\"Loading employees\"\n          parseItem={(item) => ({\n            value: item.id,\n            label: `${item.firstName} ${item.lastName}`,\n          })}\n          onChange={async (newValue) => {\n            console.log(\"Selected employee:\", newValue)\n            if (newValue === null || newValue.id === \"all-employees\") {\n              console.log(\"Switching to All Employees...\")\n              await loadAllTransactions()\n            } else if (newValue.id) {\n              console.log(\"Loading transactions for specific employee:\", newValue.id)\n              await loadTransactionsByEmployee(newValue.id)\n            }\n          }}\n        />\n\n        <div className=\"RampBreak--l\" />\n\n        <div className=\"RampGrid\">\n          {isLoading ? <div>Loading transactions...</div> : <Transactions transactions={transactions} />}\n          {isAllEmployees && hasMoreTransactions && (\n            <button className=\"RampButton\" disabled={loadingPaginated} onClick={handleViewMore}>\n              View More\n            </button>\n          )}\n        </div>\n      </main>\n    </Fragment>\n  )\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}