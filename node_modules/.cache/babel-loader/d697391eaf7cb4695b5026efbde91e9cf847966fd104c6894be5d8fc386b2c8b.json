{"ast":null,"code":"var _s = $RefreshSig$();\nimport { useCallback, useState } from \"react\";\nimport { useCustomFetch } from \"./useCustomFetch\";\nexport function usePaginatedTransactions() {\n  _s();\n  const {\n    fetchWithCache,\n    loading\n  } = useCustomFetch();\n  const [paginatedTransactions, setPaginatedTransactions] = useState(null);\n  const fetchAll = useCallback(async () => {\n    const params = {\n      page: paginatedTransactions ? paginatedTransactions.nextPage : 0 // Start from page 0 if null\n    };\n    console.log(\"Fetching paginated transactions with params:\", params);\n    const response = await fetchWithCache(\"paginatedTransactions\", params);\n    console.log(\"API Response for paginated transactions:\", response);\n    if (response) {\n      if (!Array.isArray(response.data)) {\n        console.warn(\"Received unexpected response structure for transactions:\", response);\n        return; // Don't set state if the structure is unexpected\n      }\n      setPaginatedTransactions(previousResponse => {\n        var _response$nextPage;\n        return {\n          data: [...((previousResponse === null || previousResponse === void 0 ? void 0 : previousResponse.data) || []),\n          // Ensure previous data is not null\n          ...response.data // Append new transactions\n          ],\n          nextPage: (_response$nextPage = response.nextPage) !== null && _response$nextPage !== void 0 ? _response$nextPage : null // Update nextPage safely\n        };\n      });\n    } else {\n      console.warn(\"No response received for paginated transactions.\");\n    }\n  }, [fetchWithCache, paginatedTransactions]);\n  const invalidateData = useCallback(() => {\n    setPaginatedTransactions(null);\n  }, []);\n  return {\n    data: paginatedTransactions,\n    loading,\n    fetchAll,\n    invalidateData\n  };\n}\n_s(usePaginatedTransactions, \"5C7xQHueO9nKLl+7c12EAAA+DoA=\", false, function () {\n  return [useCustomFetch];\n});","map":{"version":3,"names":["useCallback","useState","useCustomFetch","usePaginatedTransactions","_s","fetchWithCache","loading","paginatedTransactions","setPaginatedTransactions","fetchAll","params","page","nextPage","console","log","response","Array","isArray","data","warn","previousResponse","_response$nextPage","invalidateData"],"sources":["/Users/roderickmoise/Desktop/Documents/Downloads/ramp-fe-challenge/src/hooks/usePaginatedTransactions.ts"],"sourcesContent":["import { useCallback, useState } from \"react\"\nimport { PaginatedRequestParams, PaginatedResponse, Transaction } from \"../utils/types\"\nimport { PaginatedTransactionsResult } from \"./types\"\nimport { useCustomFetch } from \"./useCustomFetch\"\n\nexport function usePaginatedTransactions(): PaginatedTransactionsResult {\n  const { fetchWithCache, loading } = useCustomFetch()\n  const [paginatedTransactions, setPaginatedTransactions] = useState<PaginatedResponse<\n    Transaction[]\n  > | null>(null)\n\n  const fetchAll = useCallback(async () => {\n    const params: PaginatedRequestParams = {\n      page: paginatedTransactions ? paginatedTransactions.nextPage : 0, // Start from page 0 if null\n    }\n\n    console.log(\"Fetching paginated transactions with params:\", params)\n    const response = await fetchWithCache<PaginatedResponse<Transaction[]>, PaginatedRequestParams>(\n      \"paginatedTransactions\",\n      params\n    )\n\n    console.log(\"API Response for paginated transactions:\", response)\n\n    if (response) {\n      if (!Array.isArray(response.data)) {\n        console.warn(\"Received unexpected response structure for transactions:\", response)\n        return // Don't set state if the structure is unexpected\n      }\n\n      setPaginatedTransactions((previousResponse) => ({\n        data: [\n          ...(previousResponse?.data || []), // Ensure previous data is not null\n          ...response.data, // Append new transactions\n        ],\n        nextPage: response.nextPage ?? null, // Update nextPage safely\n      }))\n    } else {\n      console.warn(\"No response received for paginated transactions.\")\n    }\n  }, [fetchWithCache, paginatedTransactions])\n\n  const invalidateData = useCallback(() => {\n    setPaginatedTransactions(null)\n  }, [])\n\n  return { data: paginatedTransactions, loading, fetchAll, invalidateData }\n}\n"],"mappings":";AAAA,SAASA,WAAW,EAAEC,QAAQ,QAAQ,OAAO;AAG7C,SAASC,cAAc,QAAQ,kBAAkB;AAEjD,OAAO,SAASC,wBAAwBA,CAAA,EAAgC;EAAAC,EAAA;EACtE,MAAM;IAAEC,cAAc;IAAEC;EAAQ,CAAC,GAAGJ,cAAc,CAAC,CAAC;EACpD,MAAM,CAACK,qBAAqB,EAAEC,wBAAwB,CAAC,GAAGP,QAAQ,CAExD,IAAI,CAAC;EAEf,MAAMQ,QAAQ,GAAGT,WAAW,CAAC,YAAY;IACvC,MAAMU,MAA8B,GAAG;MACrCC,IAAI,EAAEJ,qBAAqB,GAAGA,qBAAqB,CAACK,QAAQ,GAAG,CAAC,CAAE;IACpE,CAAC;IAEDC,OAAO,CAACC,GAAG,CAAC,8CAA8C,EAAEJ,MAAM,CAAC;IACnE,MAAMK,QAAQ,GAAG,MAAMV,cAAc,CACnC,uBAAuB,EACvBK,MACF,CAAC;IAEDG,OAAO,CAACC,GAAG,CAAC,0CAA0C,EAAEC,QAAQ,CAAC;IAEjE,IAAIA,QAAQ,EAAE;MACZ,IAAI,CAACC,KAAK,CAACC,OAAO,CAACF,QAAQ,CAACG,IAAI,CAAC,EAAE;QACjCL,OAAO,CAACM,IAAI,CAAC,0DAA0D,EAAEJ,QAAQ,CAAC;QAClF,OAAM,CAAC;MACT;MAEAP,wBAAwB,CAAEY,gBAAgB;QAAA,IAAAC,kBAAA;QAAA,OAAM;UAC9CH,IAAI,EAAE,CACJ,IAAI,CAAAE,gBAAgB,aAAhBA,gBAAgB,uBAAhBA,gBAAgB,CAAEF,IAAI,KAAI,EAAE,CAAC;UAAE;UACnC,GAAGH,QAAQ,CAACG,IAAI,CAAE;UAAA,CACnB;UACDN,QAAQ,GAAAS,kBAAA,GAAEN,QAAQ,CAACH,QAAQ,cAAAS,kBAAA,cAAAA,kBAAA,GAAI,IAAI,CAAE;QACvC,CAAC;MAAA,CAAC,CAAC;IACL,CAAC,MAAM;MACLR,OAAO,CAACM,IAAI,CAAC,kDAAkD,CAAC;IAClE;EACF,CAAC,EAAE,CAACd,cAAc,EAAEE,qBAAqB,CAAC,CAAC;EAE3C,MAAMe,cAAc,GAAGtB,WAAW,CAAC,MAAM;IACvCQ,wBAAwB,CAAC,IAAI,CAAC;EAChC,CAAC,EAAE,EAAE,CAAC;EAEN,OAAO;IAAEU,IAAI,EAAEX,qBAAqB;IAAED,OAAO;IAAEG,QAAQ;IAAEa;EAAe,CAAC;AAC3E;AAAClB,EAAA,CA1CeD,wBAAwB;EAAA,QACFD,cAAc;AAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}