{"ast":null,"code":"const fetchAll = useCallback(async () => {\n  var _paginatedTransaction, _paginatedTransaction2;\n  const params = {\n    page: (_paginatedTransaction = (_paginatedTransaction2 = paginatedTransactions) === null || _paginatedTransaction2 === void 0 ? void 0 : _paginatedTransaction2.nextPage) !== null && _paginatedTransaction !== void 0 ? _paginatedTransaction : 0 // Ensure page starts at 0\n  };\n  console.log(\"Fetching paginated transactions with params:\", params);\n  const response = await fetchWithCache(\"paginatedTransactions\", params);\n  console.log(\"API Response for paginated transactions:\", response);\n  setPaginatedTransactions(previousResponse => {\n    if (!response) {\n      console.warn(\"No response received. Returning previous state.\");\n      return previousResponse;\n    }\n    if (!response.data || !Array.isArray(response.data)) {\n      console.warn(\"Received unexpected response structure:\", response);\n      return previousResponse;\n    }\n    return {\n      data: [...((previousResponse === null || previousResponse === void 0 ? void 0 : previousResponse.data) || []), ...response.data],\n      nextPage: response.nextPage !== undefined ? response.nextPage : null\n    };\n  });\n}, [fetchWithCache, paginatedTransactions]);","map":{"version":3,"names":["fetchAll","useCallback","_paginatedTransaction","_paginatedTransaction2","params","page","paginatedTransactions","nextPage","console","log","response","fetchWithCache","setPaginatedTransactions","previousResponse","warn","data","Array","isArray","undefined"],"sources":["/Users/roderickmoise/Desktop/Documents/Downloads/ramp-fe-challenge/src/hooks/usePaginatedTransactions.ts"],"sourcesContent":["const fetchAll = useCallback(async () => {\n  const params: PaginatedRequestParams = {\n    page: paginatedTransactions?.nextPage ?? 0, // Ensure page starts at 0\n  }\n\n  console.log(\"Fetching paginated transactions with params:\", params)\n\n  const response = await fetchWithCache<PaginatedResponse<Transaction[]>, PaginatedRequestParams>(\n    \"paginatedTransactions\",\n    params\n  )\n\n  console.log(\"API Response for paginated transactions:\", response)\n\n  setPaginatedTransactions((previousResponse) => {\n    if (!response) {\n      console.warn(\"No response received. Returning previous state.\")\n      return previousResponse\n    }\n\n    if (!response.data || !Array.isArray(response.data)) {\n      console.warn(\"Received unexpected response structure:\", response)\n      return previousResponse\n    }\n\n    return {\n      data: [...(previousResponse?.data || []), ...response.data],\n      nextPage: response.nextPage !== undefined ? response.nextPage : null,\n    }\n  })\n}, [fetchWithCache, paginatedTransactions])\n"],"mappings":"AAAA,MAAMA,QAAQ,GAAGC,WAAW,CAAC,YAAY;EAAA,IAAAC,qBAAA,EAAAC,sBAAA;EACvC,MAAMC,MAA8B,GAAG;IACrCC,IAAI,GAAAH,qBAAA,IAAAC,sBAAA,GAAEG,qBAAqB,cAAAH,sBAAA,uBAArBA,sBAAA,CAAuBI,QAAQ,cAAAL,qBAAA,cAAAA,qBAAA,GAAI,CAAC,CAAE;EAC9C,CAAC;EAEDM,OAAO,CAACC,GAAG,CAAC,8CAA8C,EAAEL,MAAM,CAAC;EAEnE,MAAMM,QAAQ,GAAG,MAAMC,cAAc,CACnC,uBAAuB,EACvBP,MACF,CAAC;EAEDI,OAAO,CAACC,GAAG,CAAC,0CAA0C,EAAEC,QAAQ,CAAC;EAEjEE,wBAAwB,CAAEC,gBAAgB,IAAK;IAC7C,IAAI,CAACH,QAAQ,EAAE;MACbF,OAAO,CAACM,IAAI,CAAC,iDAAiD,CAAC;MAC/D,OAAOD,gBAAgB;IACzB;IAEA,IAAI,CAACH,QAAQ,CAACK,IAAI,IAAI,CAACC,KAAK,CAACC,OAAO,CAACP,QAAQ,CAACK,IAAI,CAAC,EAAE;MACnDP,OAAO,CAACM,IAAI,CAAC,yCAAyC,EAAEJ,QAAQ,CAAC;MACjE,OAAOG,gBAAgB;IACzB;IAEA,OAAO;MACLE,IAAI,EAAE,CAAC,IAAI,CAAAF,gBAAgB,aAAhBA,gBAAgB,uBAAhBA,gBAAgB,CAAEE,IAAI,KAAI,EAAE,CAAC,EAAE,GAAGL,QAAQ,CAACK,IAAI,CAAC;MAC3DR,QAAQ,EAAEG,QAAQ,CAACH,QAAQ,KAAKW,SAAS,GAAGR,QAAQ,CAACH,QAAQ,GAAG;IAClE,CAAC;EACH,CAAC,CAAC;AACJ,CAAC,EAAE,CAACI,cAAc,EAAEL,qBAAqB,CAAC,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}