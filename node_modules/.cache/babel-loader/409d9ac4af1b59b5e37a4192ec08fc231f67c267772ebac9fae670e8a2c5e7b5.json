{"ast":null,"code":"var _s = $RefreshSig$();\nimport { useCallback, useState } from \"react\";\nimport { useCustomFetch } from \"./useCustomFetch\";\nexport function usePaginatedTransactions() {\n  _s();\n  const {\n    fetchWithCache,\n    loading\n  } = useCustomFetch();\n  const [paginatedTransactions, setPaginatedTransactions] = useState(null);\n  const fetchAll = useCallback(async () => {\n    var _paginatedTransaction;\n    const params = {\n      page: paginatedTransactions ? (_paginatedTransaction = paginatedTransactions.nextPage) !== null && _paginatedTransaction !== void 0 ? _paginatedTransaction : 0 : 0 // Start at 0 if there is no data\n    };\n    console.log(\"Fetching paginated transactions with params:\", params);\n    const response = await fetchWithCache(\"paginatedTransactions\", params);\n    console.log(\"API Response for paginated transactions:\", response);\n\n    // Update state if we receive a valid response\n    if (response && Array.isArray(response.data)) {\n      setPaginatedTransactions(prev => ({\n        data: [...((prev === null || prev === void 0 ? void 0 : prev.data) || []), ...response.data],\n        nextPage: response.nextPage\n      }));\n    } else {\n      console.warn(\"No valid response received, or unexpected structure.\");\n    }\n  }, [fetchWithCache]); // Removed paginatedTransactions from the dependency array\n\n  const invalidateData = useCallback(() => {\n    setPaginatedTransactions(null); // Reset state when invalidating data\n  }, []);\n  return {\n    data: paginatedTransactions,\n    loading,\n    fetchAll,\n    invalidateData\n  };\n}\n_s(usePaginatedTransactions, \"5C7xQHueO9nKLl+7c12EAAA+DoA=\", false, function () {\n  return [useCustomFetch];\n});","map":{"version":3,"names":["useCallback","useState","useCustomFetch","usePaginatedTransactions","_s","fetchWithCache","loading","paginatedTransactions","setPaginatedTransactions","fetchAll","_paginatedTransaction","params","page","nextPage","console","log","response","Array","isArray","data","prev","warn","invalidateData"],"sources":["/Users/roderickmoise/Desktop/Documents/Downloads/ramp-fe-challenge/src/hooks/usePaginatedTransactions.ts"],"sourcesContent":["import { useCallback, useState } from \"react\"\nimport { PaginatedRequestParams, PaginatedResponse, Transaction } from \"../utils/types\"\nimport { useCustomFetch } from \"./useCustomFetch\"\n\nexport function usePaginatedTransactions(): {\n  data: PaginatedResponse<Transaction[]> | null\n  loading: boolean\n  fetchAll: () => Promise<void>\n  invalidateData: () => void\n} {\n  const { fetchWithCache, loading } = useCustomFetch()\n  const [paginatedTransactions, setPaginatedTransactions] = useState<PaginatedResponse<\n    Transaction[]\n  > | null>(null)\n\n  const fetchAll = useCallback(async () => {\n    const params: PaginatedRequestParams = {\n      page: paginatedTransactions ? paginatedTransactions.nextPage ?? 0 : 0, // Start at 0 if there is no data\n    }\n\n    console.log(\"Fetching paginated transactions with params:\", params)\n\n    const response = await fetchWithCache<PaginatedResponse<Transaction[]>, PaginatedRequestParams>(\n      \"paginatedTransactions\",\n      params\n    )\n\n    console.log(\"API Response for paginated transactions:\", response)\n\n    // Update state if we receive a valid response\n    if (response && Array.isArray(response.data)) {\n      setPaginatedTransactions((prev) => ({\n        data: [...(prev?.data || []), ...response.data],\n        nextPage: response.nextPage,\n      }))\n    } else {\n      console.warn(\"No valid response received, or unexpected structure.\")\n    }\n  }, [fetchWithCache]) // Removed paginatedTransactions from the dependency array\n\n  const invalidateData = useCallback(() => {\n    setPaginatedTransactions(null) // Reset state when invalidating data\n  }, [])\n\n  return { data: paginatedTransactions, loading, fetchAll, invalidateData }\n}\n"],"mappings":";AAAA,SAASA,WAAW,EAAEC,QAAQ,QAAQ,OAAO;AAE7C,SAASC,cAAc,QAAQ,kBAAkB;AAEjD,OAAO,SAASC,wBAAwBA,CAAA,EAKtC;EAAAC,EAAA;EACA,MAAM;IAAEC,cAAc;IAAEC;EAAQ,CAAC,GAAGJ,cAAc,CAAC,CAAC;EACpD,MAAM,CAACK,qBAAqB,EAAEC,wBAAwB,CAAC,GAAGP,QAAQ,CAExD,IAAI,CAAC;EAEf,MAAMQ,QAAQ,GAAGT,WAAW,CAAC,YAAY;IAAA,IAAAU,qBAAA;IACvC,MAAMC,MAA8B,GAAG;MACrCC,IAAI,EAAEL,qBAAqB,IAAAG,qBAAA,GAAGH,qBAAqB,CAACM,QAAQ,cAAAH,qBAAA,cAAAA,qBAAA,GAAI,CAAC,GAAG,CAAC,CAAE;IACzE,CAAC;IAEDI,OAAO,CAACC,GAAG,CAAC,8CAA8C,EAAEJ,MAAM,CAAC;IAEnE,MAAMK,QAAQ,GAAG,MAAMX,cAAc,CACnC,uBAAuB,EACvBM,MACF,CAAC;IAEDG,OAAO,CAACC,GAAG,CAAC,0CAA0C,EAAEC,QAAQ,CAAC;;IAEjE;IACA,IAAIA,QAAQ,IAAIC,KAAK,CAACC,OAAO,CAACF,QAAQ,CAACG,IAAI,CAAC,EAAE;MAC5CX,wBAAwB,CAAEY,IAAI,KAAM;QAClCD,IAAI,EAAE,CAAC,IAAI,CAAAC,IAAI,aAAJA,IAAI,uBAAJA,IAAI,CAAED,IAAI,KAAI,EAAE,CAAC,EAAE,GAAGH,QAAQ,CAACG,IAAI,CAAC;QAC/CN,QAAQ,EAAEG,QAAQ,CAACH;MACrB,CAAC,CAAC,CAAC;IACL,CAAC,MAAM;MACLC,OAAO,CAACO,IAAI,CAAC,sDAAsD,CAAC;IACtE;EACF,CAAC,EAAE,CAAChB,cAAc,CAAC,CAAC,EAAC;;EAErB,MAAMiB,cAAc,GAAGtB,WAAW,CAAC,MAAM;IACvCQ,wBAAwB,CAAC,IAAI,CAAC,EAAC;EACjC,CAAC,EAAE,EAAE,CAAC;EAEN,OAAO;IAAEW,IAAI,EAAEZ,qBAAqB;IAAED,OAAO;IAAEG,QAAQ;IAAEa;EAAe,CAAC;AAC3E;AAAClB,EAAA,CAzCeD,wBAAwB;EAAA,QAMFD,cAAc;AAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}