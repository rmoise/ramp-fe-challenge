{"ast":null,"code":"var _jsxFileName = \"/Users/roderickmoise/Desktop/Documents/Downloads/ramp-fe-challenge/src/App.tsx\",\n  _s = $RefreshSig$();\nimport { Fragment, useCallback, useEffect, useState } from \"react\";\nimport { InputSelect } from \"./components/InputSelect\";\nimport { Instructions } from \"./components/Instructions\";\nimport { Transactions } from \"./components/Transactions\";\nimport { useEmployees } from \"./hooks/useEmployees\";\nimport { usePaginatedTransactions } from \"./hooks/usePaginatedTransactions\";\nimport { useTransactionsByEmployee } from \"./hooks/useTransactionsByEmployee\";\nimport { EMPTY_EMPLOYEE } from \"./utils/constants\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport function App() {\n  _s();\n  const {\n    data: employees,\n    fetchAll: fetchEmployees\n  } = useEmployees();\n  const {\n    data: paginatedTransactions,\n    fetchAll: fetchPaginatedTransactions,\n    loading: paginatedLoading\n  } = usePaginatedTransactions();\n  const {\n    data: transactionsByEmployee,\n    fetchById: fetchTransactionsByEmployee,\n    invalidateData: invalidateEmployeeData\n  } = useTransactionsByEmployee();\n  const [isLoading, setIsLoading] = useState(false);\n  const [isAllEmployees, setIsAllEmployees] = useState(true);\n  const [selectedEmployee, setSelectedEmployee] = useState(null);\n  useEffect(() => {\n    console.log(\"Employees:\", employees);\n    console.log(\"Paginated Transactions:\", paginatedTransactions);\n    console.log(\"Transactions by Employee:\", transactionsByEmployee);\n    console.log(\"isAllEmployees:\", isAllEmployees);\n    console.log(\"Selected Employee:\", selectedEmployee);\n  }, [employees, paginatedTransactions, transactionsByEmployee, isAllEmployees, selectedEmployee]);\n  useEffect(() => {\n    const fetchData = async () => {\n      setIsLoading(true);\n      await fetchEmployees();\n      await fetchPaginatedTransactions();\n      setIsLoading(false);\n    };\n    if (!employees) {\n      fetchData();\n    }\n  }, [employees, fetchEmployees, fetchPaginatedTransactions]);\n  const loadAllTransactions = useCallback(async () => {\n    setIsLoading(true);\n    setIsAllEmployees(true);\n    setSelectedEmployee(null); // Reset selected employee state\n    console.log(\"Fetching all transactions...\");\n    await fetchEmployees(); // Fetch employees\n    await fetchPaginatedTransactions(); // Fetch all transactions\n\n    setIsLoading(false);\n  }, [fetchEmployees, fetchPaginatedTransactions]);\n  const loadTransactionsByEmployee = useCallback(async employeeId => {\n    if (!employeeId) return; // Prevent empty employeeId\n    setIsLoading(true);\n    setIsAllEmployees(false); // Set to \"Specific Employee\" mode\n\n    console.log(\"Fetching transactions for employee ID:\", employeeId);\n    await fetchTransactionsByEmployee(employeeId); // Fetch specific employee's transactions\n    setSelectedEmployee({\n      id: employeeId,\n      firstName: \"\",\n      lastName: \"\"\n    }); // Set selected employee\n    setIsLoading(false);\n  }, [fetchTransactionsByEmployee]);\n  const handleEmployeeChange = async newValue => {\n    console.log(\"Selected employee:\", newValue);\n    if (newValue === null || newValue.id === \"all-employees\") {\n      console.log(\"Switching to All Employees...\");\n      setIsAllEmployees(true);\n      setSelectedEmployee(null); // Reset selected employee state\n      invalidateEmployeeData(); // Clear employee transactions\n      await loadAllTransactions(); // Load all transactions\n    } else if (newValue.id) {\n      console.log(\"Loading transactions for specific employee:\", newValue.id);\n      await loadTransactionsByEmployee(newValue.id); // Load specific employee's transactions\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(Fragment, {\n    children: /*#__PURE__*/_jsxDEV(\"main\", {\n      className: \"MainContainer\",\n      children: [/*#__PURE__*/_jsxDEV(Instructions, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 92,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"hr\", {\n        className: \"RampBreak--l\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 93,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(InputSelect, {\n        isLoading: isLoading,\n        defaultValue: EMPTY_EMPLOYEE,\n        items: employees ? [EMPTY_EMPLOYEE, ...employees] : [],\n        label: \"Filter by employee\",\n        loadingLabel: \"Loading employees\",\n        parseItem: item => ({\n          value: item.id,\n          label: `${item.firstName} ${item.lastName}`\n        }),\n        onChange: handleEmployeeChange // Using the separate handler\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 95,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"RampBreak--l\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 108,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"RampGrid\",\n        children: [isLoading ? /*#__PURE__*/_jsxDEV(\"div\", {\n          children: \"Loading transactions...\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 111,\n          columnNumber: 24\n        }, this) : /*#__PURE__*/_jsxDEV(Transactions, {\n          transactions: transactions\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 111,\n          columnNumber: 61\n        }, this), isAllEmployees && /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"RampButton\",\n          disabled: isLoading || paginatedLoading,\n          onClick: handleViewMore,\n          children: \"View More\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 113,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 110,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 91,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 90,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"J1YWIYb44xxE99zdNqpS0J8oBa0=\", false, function () {\n  return [useEmployees, usePaginatedTransactions, useTransactionsByEmployee];\n});\n_c = App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["Fragment","useCallback","useEffect","useState","InputSelect","Instructions","Transactions","useEmployees","usePaginatedTransactions","useTransactionsByEmployee","EMPTY_EMPLOYEE","jsxDEV","_jsxDEV","App","_s","data","employees","fetchAll","fetchEmployees","paginatedTransactions","fetchPaginatedTransactions","loading","paginatedLoading","transactionsByEmployee","fetchById","fetchTransactionsByEmployee","invalidateData","invalidateEmployeeData","isLoading","setIsLoading","isAllEmployees","setIsAllEmployees","selectedEmployee","setSelectedEmployee","console","log","fetchData","loadAllTransactions","loadTransactionsByEmployee","employeeId","id","firstName","lastName","handleEmployeeChange","newValue","children","className","fileName","_jsxFileName","lineNumber","columnNumber","defaultValue","items","label","loadingLabel","parseItem","item","value","onChange","transactions","disabled","onClick","handleViewMore","_c","$RefreshReg$"],"sources":["/Users/roderickmoise/Desktop/Documents/Downloads/ramp-fe-challenge/src/App.tsx"],"sourcesContent":["import { Fragment, useCallback, useEffect, useMemo, useState } from \"react\"\nimport { InputSelect } from \"./components/InputSelect\"\nimport { Instructions } from \"./components/Instructions\"\nimport { Transactions } from \"./components/Transactions\"\nimport { useEmployees } from \"./hooks/useEmployees\"\nimport { usePaginatedTransactions } from \"./hooks/usePaginatedTransactions\"\nimport { useTransactionsByEmployee } from \"./hooks/useTransactionsByEmployee\"\nimport { EMPTY_EMPLOYEE } from \"./utils/constants\"\nimport { Employee } from \"./utils/types\"\n\nexport function App() {\n  const { data: employees, fetchAll: fetchEmployees } = useEmployees()\n  const {\n    data: paginatedTransactions,\n    fetchAll: fetchPaginatedTransactions,\n    loading: paginatedLoading,\n  } = usePaginatedTransactions()\n  const {\n    data: transactionsByEmployee,\n    fetchById: fetchTransactionsByEmployee,\n    invalidateData: invalidateEmployeeData,\n  } = useTransactionsByEmployee()\n\n  const [isLoading, setIsLoading] = useState(false)\n  const [isAllEmployees, setIsAllEmployees] = useState(true)\n  const [selectedEmployee, setSelectedEmployee] = useState<Employee | null>(null)\n\n  useEffect(() => {\n    console.log(\"Employees:\", employees)\n    console.log(\"Paginated Transactions:\", paginatedTransactions)\n    console.log(\"Transactions by Employee:\", transactionsByEmployee)\n    console.log(\"isAllEmployees:\", isAllEmployees)\n    console.log(\"Selected Employee:\", selectedEmployee)\n  }, [employees, paginatedTransactions, transactionsByEmployee, isAllEmployees, selectedEmployee])\n\n  useEffect(() => {\n    const fetchData = async () => {\n      setIsLoading(true)\n      await fetchEmployees()\n      await fetchPaginatedTransactions()\n      setIsLoading(false)\n    }\n\n    if (!employees) {\n      fetchData()\n    }\n  }, [employees, fetchEmployees, fetchPaginatedTransactions])\n\n  const loadAllTransactions = useCallback(async () => {\n    setIsLoading(true)\n    setIsAllEmployees(true)\n    setSelectedEmployee(null) // Reset selected employee state\n    console.log(\"Fetching all transactions...\")\n\n    await fetchEmployees() // Fetch employees\n    await fetchPaginatedTransactions() // Fetch all transactions\n\n    setIsLoading(false)\n  }, [fetchEmployees, fetchPaginatedTransactions])\n\n  const loadTransactionsByEmployee = useCallback(\n    async (employeeId: string) => {\n      if (!employeeId) return // Prevent empty employeeId\n      setIsLoading(true)\n      setIsAllEmployees(false) // Set to \"Specific Employee\" mode\n\n      console.log(\"Fetching transactions for employee ID:\", employeeId)\n      await fetchTransactionsByEmployee(employeeId) // Fetch specific employee's transactions\n      setSelectedEmployee({ id: employeeId, firstName: \"\", lastName: \"\" }) // Set selected employee\n      setIsLoading(false)\n    },\n    [fetchTransactionsByEmployee]\n  )\n\n  const handleEmployeeChange = async (newValue: Employee | null) => {\n    console.log(\"Selected employee:\", newValue)\n    if (newValue === null || newValue.id === \"all-employees\") {\n      console.log(\"Switching to All Employees...\")\n      setIsAllEmployees(true)\n      setSelectedEmployee(null) // Reset selected employee state\n      invalidateEmployeeData() // Clear employee transactions\n      await loadAllTransactions() // Load all transactions\n    } else if (newValue.id) {\n      console.log(\"Loading transactions for specific employee:\", newValue.id)\n      await loadTransactionsByEmployee(newValue.id) // Load specific employee's transactions\n    }\n  }\n\n  return (\n    <Fragment>\n      <main className=\"MainContainer\">\n        <Instructions />\n        <hr className=\"RampBreak--l\" />\n\n        <InputSelect<Employee>\n          isLoading={isLoading}\n          defaultValue={EMPTY_EMPLOYEE}\n          items={employees ? [EMPTY_EMPLOYEE, ...employees] : []}\n          label=\"Filter by employee\"\n          loadingLabel=\"Loading employees\"\n          parseItem={(item) => ({\n            value: item.id,\n            label: `${item.firstName} ${item.lastName}`,\n          })}\n          onChange={handleEmployeeChange} // Using the separate handler\n        />\n\n        <div className=\"RampBreak--l\" />\n\n        <div className=\"RampGrid\">\n          {isLoading ? <div>Loading transactions...</div> : <Transactions transactions={transactions} />}\n          {isAllEmployees && (\n            <button\n              className=\"RampButton\"\n              disabled={isLoading || paginatedLoading}\n              onClick={handleViewMore}\n            >\n              View More\n            </button>\n          )}\n        </div>\n      </main>\n    </Fragment>\n  )\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}