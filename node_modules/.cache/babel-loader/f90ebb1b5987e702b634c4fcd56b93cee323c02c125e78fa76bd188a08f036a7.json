{"ast":null,"code":"var _jsxFileName = \"/Users/roderickmoise/Desktop/Documents/Downloads/ramp-fe-challenge/src/App.tsx\",\n  _s = $RefreshSig$();\nimport { Fragment, useCallback, useEffect, useState } from \"react\";\nimport { InputSelect } from \"./components/InputSelect\";\nimport { Instructions } from \"./components/Instructions\";\nimport { Transactions } from \"./components/Transactions\";\nimport { useEmployees } from \"./hooks/useEmployees\";\nimport { usePaginatedTransactions } from \"./hooks/usePaginatedTransactions\";\nimport { useTransactionsByEmployee } from \"./hooks/useTransactionsByEmployee\";\nimport { EMPTY_EMPLOYEE } from \"./utils/constants\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport function App() {\n  _s();\n  const {\n    data: employees,\n    fetchAll: fetchEmployees,\n    loading: employeesLoading\n  } = useEmployees();\n  const {\n    data: paginatedTransactions,\n    fetchAll: fetchPaginatedTransactions,\n    invalidateData: invalidatePaginatedTransactions\n  } = usePaginatedTransactions();\n  const {\n    data: transactionsByEmployee,\n    fetchById: fetchTransactionsByEmployee,\n    invalidateData: invalidateTransactionsByEmployee\n  } = useTransactionsByEmployee();\n  const [isLoading, setIsLoading] = useState(false);\n  const [isAllEmployees, setIsAllEmployees] = useState(true);\n  const [transactions, setTransactions] = useState([]);\n\n  // Update transactions when data changes\n  useEffect(() => {\n    if (isAllEmployees && paginatedTransactions !== null && paginatedTransactions !== void 0 && paginatedTransactions.data) {\n      setTransactions(prevTransactions => {\n        const mergedTransactions = mergeTransactions(prevTransactions, paginatedTransactions.data);\n        return mergedTransactions;\n      });\n    } else if (!isAllEmployees && transactionsByEmployee) {\n      setTransactions(prevTransactions => {\n        const mergedTransactions = mergeTransactions(prevTransactions, transactionsByEmployee);\n        return mergedTransactions;\n      });\n    }\n  }, [isAllEmployees, paginatedTransactions, transactionsByEmployee]);\n  const loadAllTransactions = useCallback(async () => {\n    setIsLoading(true);\n    console.log(\"Loading all transactions...\");\n    await fetchEmployees();\n    await fetchPaginatedTransactions();\n    invalidateTransactionsByEmployee(); // Clear transactions by employee data\n    setIsLoading(false);\n  }, [fetchEmployees, fetchPaginatedTransactions, invalidateTransactionsByEmployee]);\n  const loadTransactionsByEmployee = useCallback(async employeeId => {\n    setIsLoading(true);\n    console.log(`Loading transactions for employee ID: ${employeeId}`);\n    await fetchTransactionsByEmployee(employeeId);\n    invalidatePaginatedTransactions(); // Clear paginated transactions data\n    setIsLoading(false);\n  }, [fetchTransactionsByEmployee, invalidatePaginatedTransactions]);\n  useEffect(() => {\n    const initialize = async () => {\n      if (!employees && !employeesLoading) {\n        await loadAllTransactions();\n      }\n    };\n    initialize();\n  }, [employees, employeesLoading, loadAllTransactions]);\n  const handleEmployeeChange = useCallback(async newValue => {\n    console.log(\"handleEmployeeChange called with:\", newValue);\n    if (!newValue || newValue.id === \"all-employees\") {\n      console.log(\"All Employees selected.\");\n      setIsAllEmployees(true);\n      await loadAllTransactions();\n    } else {\n      console.log(`Fetching transactions for employee ID: ${newValue.id}`);\n      setIsAllEmployees(false);\n      await loadTransactionsByEmployee(newValue.id);\n    }\n  }, [loadAllTransactions, loadTransactionsByEmployee]);\n  return /*#__PURE__*/_jsxDEV(Fragment, {\n    children: /*#__PURE__*/_jsxDEV(\"main\", {\n      className: \"MainContainer\",\n      children: [/*#__PURE__*/_jsxDEV(Instructions, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 92,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"hr\", {\n        className: \"RampBreak--l\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 93,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(InputSelect, {\n        isLoading: isLoading || employeesLoading,\n        defaultValue: EMPTY_EMPLOYEE,\n        items: employees ? [EMPTY_EMPLOYEE, ...employees] : [],\n        label: \"Filter by employee\",\n        loadingLabel: \"Loading employees...\",\n        parseItem: item => ({\n          value: item.id,\n          label: `${item.firstName} ${item.lastName}`\n        }),\n        onChange: handleEmployeeChange\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 94,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"RampBreak--l\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 106,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"RampGrid\",\n        children: [isLoading ? /*#__PURE__*/_jsxDEV(\"div\", {\n          children: \"Loading transactions...\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 109,\n          columnNumber: 13\n        }, this) : /*#__PURE__*/_jsxDEV(Transactions, {\n          transactions: transactions,\n          setTransactions: setTransactions\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 111,\n          columnNumber: 13\n        }, this), isAllEmployees && (paginatedTransactions === null || paginatedTransactions === void 0 ? void 0 : paginatedTransactions.nextPage) && /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"RampButton\",\n          onClick: async () => {\n            console.log(\"Loading more transactions...\");\n            await fetchPaginatedTransactions();\n          },\n          disabled: isLoading,\n          children: \"View More\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 114,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 107,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 91,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 90,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"ymc+jUltPLMNSLE2TG32nAa4fKY=\", false, function () {\n  return [useEmployees, usePaginatedTransactions, useTransactionsByEmployee];\n});\n_c = App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["Fragment","useCallback","useEffect","useState","InputSelect","Instructions","Transactions","useEmployees","usePaginatedTransactions","useTransactionsByEmployee","EMPTY_EMPLOYEE","jsxDEV","_jsxDEV","App","_s","data","employees","fetchAll","fetchEmployees","loading","employeesLoading","paginatedTransactions","fetchPaginatedTransactions","invalidateData","invalidatePaginatedTransactions","transactionsByEmployee","fetchById","fetchTransactionsByEmployee","invalidateTransactionsByEmployee","isLoading","setIsLoading","isAllEmployees","setIsAllEmployees","transactions","setTransactions","prevTransactions","mergedTransactions","mergeTransactions","loadAllTransactions","console","log","loadTransactionsByEmployee","employeeId","initialize","handleEmployeeChange","newValue","id","children","className","fileName","_jsxFileName","lineNumber","columnNumber","defaultValue","items","label","loadingLabel","parseItem","item","value","firstName","lastName","onChange","nextPage","onClick","disabled","_c","$RefreshReg$"],"sources":["/Users/roderickmoise/Desktop/Documents/Downloads/ramp-fe-challenge/src/App.tsx"],"sourcesContent":["import { Fragment, useCallback, useEffect, useState } from \"react\"\nimport { InputSelect } from \"./components/InputSelect\"\nimport { Instructions } from \"./components/Instructions\"\nimport { Transactions } from \"./components/Transactions\"\nimport { useEmployees } from \"./hooks/useEmployees\"\nimport { usePaginatedTransactions } from \"./hooks/usePaginatedTransactions\"\nimport { useTransactionsByEmployee } from \"./hooks/useTransactionsByEmployee\"\nimport { EMPTY_EMPLOYEE } from \"./utils/constants\"\nimport { Employee, Transaction } from \"./utils/types\"\n\nexport function App() {\n  const { data: employees, fetchAll: fetchEmployees, loading: employeesLoading } = useEmployees()\n  const {\n    data: paginatedTransactions,\n    fetchAll: fetchPaginatedTransactions,\n    invalidateData: invalidatePaginatedTransactions,\n  } = usePaginatedTransactions()\n  const {\n    data: transactionsByEmployee,\n    fetchById: fetchTransactionsByEmployee,\n    invalidateData: invalidateTransactionsByEmployee,\n  } = useTransactionsByEmployee()\n\n  const [isLoading, setIsLoading] = useState(false)\n  const [isAllEmployees, setIsAllEmployees] = useState(true)\n  const [transactions, setTransactions] = useState<Transaction[]>([])\n\n  // Update transactions when data changes\n  useEffect(() => {\n    if (isAllEmployees && paginatedTransactions?.data) {\n      setTransactions((prevTransactions) => {\n        const mergedTransactions = mergeTransactions(prevTransactions, paginatedTransactions.data)\n        return mergedTransactions\n      })\n    } else if (!isAllEmployees && transactionsByEmployee) {\n      setTransactions((prevTransactions) => {\n        const mergedTransactions = mergeTransactions(prevTransactions, transactionsByEmployee)\n        return mergedTransactions\n      })\n    }\n  }, [isAllEmployees, paginatedTransactions, transactionsByEmployee])\n\n\n  const loadAllTransactions = useCallback(async () => {\n    setIsLoading(true)\n    console.log(\"Loading all transactions...\")\n    await fetchEmployees()\n    await fetchPaginatedTransactions()\n    invalidateTransactionsByEmployee() // Clear transactions by employee data\n    setIsLoading(false)\n  }, [fetchEmployees, fetchPaginatedTransactions, invalidateTransactionsByEmployee])\n\n  const loadTransactionsByEmployee = useCallback(\n    async (employeeId: string) => {\n      setIsLoading(true)\n      console.log(`Loading transactions for employee ID: ${employeeId}`)\n      await fetchTransactionsByEmployee(employeeId)\n      invalidatePaginatedTransactions() // Clear paginated transactions data\n      setIsLoading(false)\n    },\n    [fetchTransactionsByEmployee, invalidatePaginatedTransactions]\n  )\n\n  useEffect(() => {\n    const initialize = async () => {\n      if (!employees && !employeesLoading) {\n        await loadAllTransactions()\n      }\n    }\n    initialize()\n  }, [employees, employeesLoading, loadAllTransactions])\n\n  const handleEmployeeChange = useCallback(\n    async (newValue: Employee | null) => {\n      console.log(\"handleEmployeeChange called with:\", newValue)\n      if (!newValue || newValue.id === \"all-employees\") {\n        console.log(\"All Employees selected.\")\n        setIsAllEmployees(true)\n        await loadAllTransactions()\n      } else {\n        console.log(`Fetching transactions for employee ID: ${newValue.id}`)\n        setIsAllEmployees(false)\n        await loadTransactionsByEmployee(newValue.id)\n      }\n    },\n    [loadAllTransactions, loadTransactionsByEmployee]\n  )\n\n  return (\n    <Fragment>\n      <main className=\"MainContainer\">\n        <Instructions />\n        <hr className=\"RampBreak--l\" />\n        <InputSelect<Employee>\n          isLoading={isLoading || employeesLoading}\n          defaultValue={EMPTY_EMPLOYEE}\n          items={employees ? [EMPTY_EMPLOYEE, ...employees] : []}\n          label=\"Filter by employee\"\n          loadingLabel=\"Loading employees...\"\n          parseItem={(item) => ({\n            value: item.id,\n            label: `${item.firstName} ${item.lastName}`,\n          })}\n          onChange={handleEmployeeChange}\n        />\n        <div className=\"RampBreak--l\" />\n        <div className=\"RampGrid\">\n          {isLoading ? (\n            <div>Loading transactions...</div>\n          ) : (\n            <Transactions transactions={transactions} setTransactions={setTransactions} />\n          )}\n          {isAllEmployees && paginatedTransactions?.nextPage && (\n            <button\n              className=\"RampButton\"\n              onClick={async () => {\n                console.log(\"Loading more transactions...\")\n                await fetchPaginatedTransactions()\n              }}\n              disabled={isLoading}\n            >\n              View More\n            </button>\n          )}\n        </div>\n      </main>\n    </Fragment>\n  )\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}