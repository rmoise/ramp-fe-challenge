{"ast":null,"code":"var _jsxFileName = \"/Users/roderickmoise/Desktop/Documents/Downloads/ramp-fe-challenge/src/App.tsx\",\n  _s = $RefreshSig$();\nimport { Fragment, useCallback, useEffect, useMemo, useState } from \"react\";\nimport { InputSelect } from \"./components/InputSelect\";\nimport { Instructions } from \"./components/Instructions\";\nimport { Transactions } from \"./components/Transactions\";\nimport { useEmployees } from \"./hooks/useEmployees\";\nimport { usePaginatedTransactions } from \"./hooks/usePaginatedTransactions\";\nimport { useTransactionsByEmployee } from \"./hooks/useTransactionsByEmployee\";\nimport { EMPTY_EMPLOYEE } from \"./utils/constants\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport function App() {\n  _s();\n  const {\n    data: employees,\n    ...employeeUtils\n  } = useEmployees();\n  const {\n    data: paginatedTransactions,\n    ...paginatedTransactionsUtils\n  } = usePaginatedTransactions();\n  const {\n    data: transactionsByEmployee,\n    ...transactionsByEmployeeUtils\n  } = useTransactionsByEmployee();\n  const [isLoading, setIsLoading] = useState(false);\n  const [isAllEmployees, setIsAllEmployees] = useState(true);\n  const [hasMoreTransactions, setHasMoreTransactions] = useState(true);\n\n  // Log the structure of paginatedTransactions for debugging\n  useEffect(() => {\n    console.log(\"Paginated Transactions:\", paginatedTransactions);\n  }, [paginatedTransactions]);\n  const transactions = useMemo(() => {\n    if (!paginatedTransactions) {\n      console.warn(\"Paginated transactions are null or undefined\");\n      return []; // Return empty array to avoid breaking the app\n    }\n    return isAllEmployees ? paginatedTransactions.data || [] : transactionsByEmployee || [];\n  }, [paginatedTransactions, transactionsByEmployee, isAllEmployees]);\n  const loadAllTransactions = useCallback(async () => {\n    setIsLoading(true);\n    setIsAllEmployees(true);\n    transactionsByEmployeeUtils.invalidateData();\n    console.log(\"Fetching all transactions...\");\n\n    // Fetch employees and paginated transactions\n    await employeeUtils.fetchAll();\n    await paginatedTransactionsUtils.fetchAll();\n    if (paginatedTransactions) {\n      console.log(\"Fetched transactions:\", paginatedTransactions);\n      if (paginatedTransactions.data) {\n        if (paginatedTransactions.data.length > 0) {\n          setHasMoreTransactions(true);\n        } else {\n          console.warn(\"No more transactions available.\");\n          setHasMoreTransactions(false);\n        }\n      } else {\n        console.error(\"Error: paginatedTransactions.data is undefined\");\n        setHasMoreTransactions(false);\n      }\n    } else {\n      console.error(\"Error: paginatedTransactions is null\");\n      setHasMoreTransactions(false);\n    }\n    setIsLoading(false);\n  }, [employeeUtils, paginatedTransactionsUtils, transactionsByEmployeeUtils, paginatedTransactions // Remove employees from here\n  ]);\n  const loadTransactionsByEmployee = useCallback(async employeeId => {\n    if (!employeeId) return;\n    setIsLoading(true);\n    setIsAllEmployees(false);\n    paginatedTransactionsUtils.invalidateData();\n    console.log(\"Fetching transactions for employee ID:\", employeeId);\n    await transactionsByEmployeeUtils.fetchById(employeeId);\n    setIsLoading(false);\n  }, [paginatedTransactionsUtils, transactionsByEmployeeUtils]);\n  useEffect(() => {\n    if (employees === null && !employeeUtils.loading) {\n      loadAllTransactions();\n    }\n  }, [employeeUtils.loading, employees, loadAllTransactions]);\n  const handleViewMore = async () => {\n    if (isAllEmployees && hasMoreTransactions) {\n      console.log(\"Loading more transactions...\");\n      await paginatedTransactionsUtils.fetchAll(); // Ensure this triggers the fetch\n    } else {\n      console.warn(\"No more transactions to load.\");\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(Fragment, {\n    children: /*#__PURE__*/_jsxDEV(\"main\", {\n      className: \"MainContainer\",\n      children: [/*#__PURE__*/_jsxDEV(Instructions, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 102,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"hr\", {\n        className: \"RampBreak--l\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 104,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(InputSelect, {\n        isLoading: isLoading,\n        defaultValue: EMPTY_EMPLOYEE,\n        items: employees === null ? [] : [EMPTY_EMPLOYEE, ...employees],\n        label: \"Filter by employee\",\n        loadingLabel: \"Loading employees\",\n        parseItem: item => ({\n          value: item.id,\n          label: `${item.firstName} ${item.lastName}`\n        }),\n        onChange: async newValue => {\n          console.log(\"Selected employee:\", newValue);\n          if (newValue === null || newValue.id === \"all-employees\") {\n            console.log(\"Switching to All Employees...\");\n            await loadAllTransactions();\n          } else if (newValue.id) {\n            console.log(\"Loading transactions for specific employee:\", newValue.id);\n            await loadTransactionsByEmployee(newValue.id);\n          }\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 106,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"RampBreak--l\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 128,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"RampGrid\",\n        children: [/*#__PURE__*/_jsxDEV(Transactions, {\n          transactions: [...transactions]\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 131,\n          columnNumber: 11\n        }, this), isAllEmployees && hasMoreTransactions && /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"RampButton\",\n          disabled: paginatedTransactionsUtils.loading,\n          onClick: handleViewMore,\n          children: \"View More\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 134,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 130,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 101,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 100,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"LC+jH4wTGwiHxcf/ESIUBHPDITA=\", false, function () {\n  return [useEmployees, usePaginatedTransactions, useTransactionsByEmployee];\n});\n_c = App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["Fragment","useCallback","useEffect","useMemo","useState","InputSelect","Instructions","Transactions","useEmployees","usePaginatedTransactions","useTransactionsByEmployee","EMPTY_EMPLOYEE","jsxDEV","_jsxDEV","App","_s","data","employees","employeeUtils","paginatedTransactions","paginatedTransactionsUtils","transactionsByEmployee","transactionsByEmployeeUtils","isLoading","setIsLoading","isAllEmployees","setIsAllEmployees","hasMoreTransactions","setHasMoreTransactions","console","log","transactions","warn","loadAllTransactions","invalidateData","fetchAll","length","error","loadTransactionsByEmployee","employeeId","fetchById","loading","handleViewMore","children","className","fileName","_jsxFileName","lineNumber","columnNumber","defaultValue","items","label","loadingLabel","parseItem","item","value","id","firstName","lastName","onChange","newValue","disabled","onClick","_c","$RefreshReg$"],"sources":["/Users/roderickmoise/Desktop/Documents/Downloads/ramp-fe-challenge/src/App.tsx"],"sourcesContent":["import { Fragment, useCallback, useEffect, useMemo, useState } from \"react\"\nimport { InputSelect } from \"./components/InputSelect\"\nimport { Instructions } from \"./components/Instructions\"\nimport { Transactions } from \"./components/Transactions\"\nimport { useEmployees } from \"./hooks/useEmployees\"\nimport { usePaginatedTransactions } from \"./hooks/usePaginatedTransactions\"\nimport { useTransactionsByEmployee } from \"./hooks/useTransactionsByEmployee\"\nimport { EMPTY_EMPLOYEE } from \"./utils/constants\"\nimport { Employee } from \"./utils/types\"\n\nexport function App() {\n  const { data: employees, ...employeeUtils } = useEmployees()\n  const { data: paginatedTransactions, ...paginatedTransactionsUtils } = usePaginatedTransactions()\n  const { data: transactionsByEmployee, ...transactionsByEmployeeUtils } = useTransactionsByEmployee()\n\n  const [isLoading, setIsLoading] = useState(false)\n  const [isAllEmployees, setIsAllEmployees] = useState(true)\n  const [hasMoreTransactions, setHasMoreTransactions] = useState(true)\n\n  // Log the structure of paginatedTransactions for debugging\n  useEffect(() => {\n    console.log(\"Paginated Transactions:\", paginatedTransactions)\n  }, [paginatedTransactions])\n\n  const transactions = useMemo(() => {\n    if (!paginatedTransactions) {\n      console.warn(\"Paginated transactions are null or undefined\")\n      return [] // Return empty array to avoid breaking the app\n    }\n    return isAllEmployees ? paginatedTransactions.data || [] : transactionsByEmployee || []\n  }, [paginatedTransactions, transactionsByEmployee, isAllEmployees])\n\n  const loadAllTransactions = useCallback(async () => {\n    setIsLoading(true)\n    setIsAllEmployees(true)\n    transactionsByEmployeeUtils.invalidateData()\n\n    console.log(\"Fetching all transactions...\")\n\n    // Fetch employees and paginated transactions\n    await employeeUtils.fetchAll()\n    await paginatedTransactionsUtils.fetchAll()\n\n    if (paginatedTransactions) {\n      console.log(\"Fetched transactions:\", paginatedTransactions)\n      if (paginatedTransactions.data) {\n        if (paginatedTransactions.data.length > 0) {\n          setHasMoreTransactions(true)\n        } else {\n          console.warn(\"No more transactions available.\")\n          setHasMoreTransactions(false)\n        }\n      } else {\n        console.error(\"Error: paginatedTransactions.data is undefined\")\n        setHasMoreTransactions(false)\n      }\n    } else {\n      console.error(\"Error: paginatedTransactions is null\")\n      setHasMoreTransactions(false)\n    }\n\n    setIsLoading(false)\n  }, [\n    employeeUtils,\n    paginatedTransactionsUtils,\n    transactionsByEmployeeUtils,\n    paginatedTransactions, // Remove employees from here\n  ])\n\n  const loadTransactionsByEmployee = useCallback(\n    async (employeeId: string) => {\n      if (!employeeId) return\n      setIsLoading(true)\n      setIsAllEmployees(false)\n      paginatedTransactionsUtils.invalidateData()\n\n      console.log(\"Fetching transactions for employee ID:\", employeeId)\n      await transactionsByEmployeeUtils.fetchById(employeeId)\n      setIsLoading(false)\n    },\n    [paginatedTransactionsUtils, transactionsByEmployeeUtils]\n  )\n\n  useEffect(() => {\n    if (employees === null && !employeeUtils.loading) {\n      loadAllTransactions()\n    }\n  }, [employeeUtils.loading, employees, loadAllTransactions])\n\n  const handleViewMore = async () => {\n    if (isAllEmployees && hasMoreTransactions) {\n      console.log(\"Loading more transactions...\")\n      await paginatedTransactionsUtils.fetchAll() // Ensure this triggers the fetch\n    } else {\n      console.warn(\"No more transactions to load.\")\n    }\n  }\n\n  return (\n    <Fragment>\n      <main className=\"MainContainer\">\n        <Instructions />\n\n        <hr className=\"RampBreak--l\" />\n\n        <InputSelect<Employee>\n          isLoading={isLoading}\n          defaultValue={EMPTY_EMPLOYEE}\n          items={employees === null ? [] : [EMPTY_EMPLOYEE, ...employees]}\n          label=\"Filter by employee\"\n          loadingLabel=\"Loading employees\"\n          parseItem={(item) => ({\n            value: item.id,\n            label: `${item.firstName} ${item.lastName}`,\n          })}\n          onChange={async (newValue) => {\n            console.log(\"Selected employee:\", newValue)\n            if (newValue === null || newValue.id === \"all-employees\") {\n              console.log(\"Switching to All Employees...\")\n              await loadAllTransactions()\n            } else if (newValue.id) {\n              console.log(\"Loading transactions for specific employee:\", newValue.id)\n              await loadTransactionsByEmployee(newValue.id)\n            }\n          }}\n        />\n\n        <div className=\"RampBreak--l\" />\n\n        <div className=\"RampGrid\">\n          <Transactions transactions={[...transactions]} />\n\n          {isAllEmployees && hasMoreTransactions && (\n            <button\n              className=\"RampButton\"\n              disabled={paginatedTransactionsUtils.loading}\n              onClick={handleViewMore}\n            >\n              View More\n            </button>\n          )}\n        </div>\n      </main>\n    </Fragment>\n  )\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}