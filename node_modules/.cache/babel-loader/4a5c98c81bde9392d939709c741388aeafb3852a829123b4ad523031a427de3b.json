{"ast":null,"code":"var _jsxFileName = \"/Users/roderickmoise/Desktop/Documents/Downloads/ramp-fe-challenge/src/App.tsx\",\n  _s = $RefreshSig$();\nimport { Fragment, useCallback, useEffect, useMemo, useState } from \"react\";\nimport { InputSelect } from \"./components/InputSelect\";\nimport { Instructions } from \"./components/Instructions\";\nimport { Transactions } from \"./components/Transactions\";\nimport { useEmployees } from \"./hooks/useEmployees\";\nimport { usePaginatedTransactions } from \"./hooks/usePaginatedTransactions\";\nimport { useTransactionsByEmployee } from \"./hooks/useTransactionsByEmployee\";\nimport { EMPTY_EMPLOYEE } from \"./utils/constants\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport function App() {\n  _s();\n  const {\n    data: employees,\n    fetchAll: fetchEmployees,\n    loading: employeesLoading\n  } = useEmployees();\n  const {\n    data: paginatedTransactions,\n    fetchAll: fetchPaginatedTransactions\n  } = usePaginatedTransactions();\n  const {\n    data: transactionsByEmployee,\n    fetchById: fetchTransactionsByEmployee\n  } = useTransactionsByEmployee();\n  const [isLoading, setIsLoading] = useState(false);\n  const [isAllEmployees, setIsAllEmployees] = useState(true);\n  const transactions = useMemo(() => {\n    return isAllEmployees ? (paginatedTransactions === null || paginatedTransactions === void 0 ? void 0 : paginatedTransactions.data) || [] : transactionsByEmployee || [];\n  }, [isAllEmployees, paginatedTransactions, transactionsByEmployee]);\n  useEffect(() => {\n    const initializeData = async () => {\n      setIsLoading(true);\n      await fetchEmployees();\n      await fetchPaginatedTransactions();\n      setIsLoading(false);\n    };\n\n    // Only fetch employees and transactions if they haven't been loaded yet\n    if (!employees || !paginatedTransactions) {\n      initializeData();\n    }\n  }, [employees, paginatedTransactions, fetchEmployees, fetchPaginatedTransactions]);\n  const handleEmployeeChange = useCallback(async newValue => {\n    setIsLoading(true);\n    if (!newValue || newValue.id === \"all-employees\") {\n      console.log(\"Switching to All Employees.\");\n      setIsAllEmployees(true);\n      await fetchPaginatedTransactions(); // Fetch all transactions\n    } else {\n      console.log(`Fetching transactions for employee ID: ${newValue.id}`);\n      setIsAllEmployees(false);\n      await fetchTransactionsByEmployee(newValue.id); // Fetch specific employee transactions\n    }\n    setIsLoading(false);\n  }, [fetchPaginatedTransactions, fetchTransactionsByEmployee]);\n  return /*#__PURE__*/_jsxDEV(Fragment, {\n    children: /*#__PURE__*/_jsxDEV(\"main\", {\n      className: \"MainContainer\",\n      children: [/*#__PURE__*/_jsxDEV(Instructions, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 61,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"hr\", {\n        className: \"RampBreak--l\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 62,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(InputSelect, {\n        isLoading: isLoading || employeesLoading,\n        defaultValue: EMPTY_EMPLOYEE,\n        items: employees ? [EMPTY_EMPLOYEE, ...employees] : [],\n        label: \"Filter by employee\",\n        loadingLabel: \"Loading employees...\",\n        parseItem: item => ({\n          value: item.id,\n          label: `${item.firstName} ${item.lastName}`\n        }),\n        onChange: handleEmployeeChange\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 64,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"RampBreak--l\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 77,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"RampGrid\",\n        children: [isLoading ? /*#__PURE__*/_jsxDEV(\"div\", {\n          children: \"Loading transactions...\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 80,\n          columnNumber: 24\n        }, this) : /*#__PURE__*/_jsxDEV(Transactions, {\n          transactions: transactions\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 80,\n          columnNumber: 61\n        }, this), isAllEmployees && (paginatedTransactions === null || paginatedTransactions === void 0 ? void 0 : paginatedTransactions.nextPage) && /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"RampButton\",\n          onClick: fetchPaginatedTransactions,\n          disabled: isLoading,\n          children: \"View More\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 83,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 79,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 59,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"wtwlrFcQIzz207x1l2hlZS2kCZw=\", false, function () {\n  return [useEmployees, usePaginatedTransactions, useTransactionsByEmployee];\n});\n_c = App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["Fragment","useCallback","useEffect","useMemo","useState","InputSelect","Instructions","Transactions","useEmployees","usePaginatedTransactions","useTransactionsByEmployee","EMPTY_EMPLOYEE","jsxDEV","_jsxDEV","App","_s","data","employees","fetchAll","fetchEmployees","loading","employeesLoading","paginatedTransactions","fetchPaginatedTransactions","transactionsByEmployee","fetchById","fetchTransactionsByEmployee","isLoading","setIsLoading","isAllEmployees","setIsAllEmployees","transactions","initializeData","handleEmployeeChange","newValue","id","console","log","children","className","fileName","_jsxFileName","lineNumber","columnNumber","defaultValue","items","label","loadingLabel","parseItem","item","value","firstName","lastName","onChange","nextPage","onClick","disabled","_c","$RefreshReg$"],"sources":["/Users/roderickmoise/Desktop/Documents/Downloads/ramp-fe-challenge/src/App.tsx"],"sourcesContent":["import { Fragment, useCallback, useEffect, useMemo, useState } from \"react\"\nimport { InputSelect } from \"./components/InputSelect\"\nimport { Instructions } from \"./components/Instructions\"\nimport { Transactions } from \"./components/Transactions\"\nimport { useEmployees } from \"./hooks/useEmployees\"\nimport { usePaginatedTransactions } from \"./hooks/usePaginatedTransactions\"\nimport { useTransactionsByEmployee } from \"./hooks/useTransactionsByEmployee\"\nimport { EMPTY_EMPLOYEE } from \"./utils/constants\"\nimport { Employee } from \"./utils/types\"\n\nexport function App() {\n  const { data: employees, fetchAll: fetchEmployees, loading: employeesLoading } = useEmployees()\n  const { data: paginatedTransactions, fetchAll: fetchPaginatedTransactions } =\n    usePaginatedTransactions()\n  const { data: transactionsByEmployee, fetchById: fetchTransactionsByEmployee } =\n    useTransactionsByEmployee()\n\n  const [isLoading, setIsLoading] = useState(false)\n  const [isAllEmployees, setIsAllEmployees] = useState(true)\n\n  const transactions = useMemo(() => {\n    return isAllEmployees ? paginatedTransactions?.data || [] : transactionsByEmployee || []\n  }, [isAllEmployees, paginatedTransactions, transactionsByEmployee])\n\n  useEffect(() => {\n    const initializeData = async () => {\n      setIsLoading(true)\n      await fetchEmployees()\n      await fetchPaginatedTransactions()\n      setIsLoading(false)\n    }\n\n    // Only fetch employees and transactions if they haven't been loaded yet\n    if (!employees || !paginatedTransactions) {\n      initializeData()\n    }\n  }, [employees, paginatedTransactions, fetchEmployees, fetchPaginatedTransactions])\n\n  const handleEmployeeChange = useCallback(\n    async (newValue: Employee | null) => {\n      setIsLoading(true)\n\n      if (!newValue || newValue.id === \"all-employees\") {\n        console.log(\"Switching to All Employees.\")\n        setIsAllEmployees(true)\n        await fetchPaginatedTransactions() // Fetch all transactions\n      } else {\n        console.log(`Fetching transactions for employee ID: ${newValue.id}`)\n        setIsAllEmployees(false)\n        await fetchTransactionsByEmployee(newValue.id) // Fetch specific employee transactions\n      }\n\n      setIsLoading(false)\n    },\n    [fetchPaginatedTransactions, fetchTransactionsByEmployee]\n  )\n\n  return (\n    <Fragment>\n      <main className=\"MainContainer\">\n        <Instructions />\n        <hr className=\"RampBreak--l\" />\n\n        <InputSelect<Employee>\n          isLoading={isLoading || employeesLoading}\n          defaultValue={EMPTY_EMPLOYEE}\n          items={employees ? [EMPTY_EMPLOYEE, ...employees] : []}\n          label=\"Filter by employee\"\n          loadingLabel=\"Loading employees...\"\n          parseItem={(item) => ({\n            value: item.id,\n            label: `${item.firstName} ${item.lastName}`,\n          })}\n          onChange={handleEmployeeChange}\n        />\n\n        <div className=\"RampBreak--l\" />\n\n        <div className=\"RampGrid\">\n          {isLoading ? <div>Loading transactions...</div> : <Transactions transactions={transactions} />}\n\n          {isAllEmployees && paginatedTransactions?.nextPage && (\n            <button className=\"RampButton\" onClick={fetchPaginatedTransactions} disabled={isLoading}>\n              View More\n            </button>\n          )}\n        </div>\n      </main>\n    </Fragment>\n  )\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}