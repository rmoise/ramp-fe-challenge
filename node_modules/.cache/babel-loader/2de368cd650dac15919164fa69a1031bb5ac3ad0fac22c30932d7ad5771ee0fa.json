{"ast":null,"code":"var _jsxFileName = \"/Users/roderickmoise/Desktop/Documents/Downloads/ramp-fe-challenge/src/App.tsx\",\n  _s = $RefreshSig$();\nimport { Fragment, useCallback, useEffect, useState } from \"react\";\nimport { InputSelect } from \"./components/InputSelect\";\nimport { Instructions } from \"./components/Instructions\";\nimport { Transactions } from \"./components/Transactions\";\nimport { useEmployees } from \"./hooks/useEmployees\";\nimport { usePaginatedTransactions } from \"./hooks/usePaginatedTransactions\";\nimport { useTransactionsByEmployee } from \"./hooks/useTransactionsByEmployee\";\nimport { EMPTY_EMPLOYEE } from \"./utils/constants\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport function App() {\n  _s();\n  const {\n    data: employees,\n    fetchAll: fetchEmployees,\n    loading: employeesLoading\n  } = useEmployees();\n  const {\n    data: paginatedTransactions,\n    fetchAll: fetchPaginatedTransactions,\n    invalidateData: invalidatePaginatedTransactions\n  } = usePaginatedTransactions();\n  const {\n    data: transactionsByEmployee,\n    fetchById: fetchTransactionsByEmployee,\n    invalidateData: invalidateTransactionsByEmployee\n  } = useTransactionsByEmployee();\n  const [transactionsMap, setTransactionsMap] = useState(new Map());\n  const [selectedTransactions, setSelectedTransactions] = useState([]);\n  const [selectedEmployeeId, setSelectedEmployeeId] = useState(null);\n  const [employeesLoadingState, setEmployeesLoading] = useState(false);\n  const [transactionsLoading, setTransactionsLoading] = useState(false);\n  const [isAllEmployees, setIsAllEmployees] = useState(true);\n\n  // Update transactionsMap when new data is fetched\n  useEffect(() => {\n    if (paginatedTransactions !== null && paginatedTransactions !== void 0 && paginatedTransactions.data) {\n      setTransactionsMap(prevMap => {\n        const newMap = new Map(prevMap);\n        paginatedTransactions.data.forEach(transaction => {\n          const existingTransaction = newMap.get(transaction.id);\n          newMap.set(transaction.id, existingTransaction || transaction);\n        });\n        return newMap;\n      });\n    }\n  }, [paginatedTransactions]);\n  useEffect(() => {\n    if (transactionsByEmployee) {\n      setTransactionsMap(prevMap => {\n        const newMap = new Map(prevMap);\n        transactionsByEmployee.forEach(transaction => {\n          const existingTransaction = newMap.get(transaction.id);\n          newMap.set(transaction.id, existingTransaction || transaction);\n        });\n        return newMap;\n      });\n    }\n  }, [transactionsByEmployee]);\n\n  // Update selectedTransactions based on filter\n  useEffect(() => {\n    const allTransactions = Array.from(transactionsMap.values());\n    if (isAllEmployees) {\n      setSelectedTransactions(allTransactions);\n    } else if (selectedEmployeeId) {\n      setSelectedTransactions(allTransactions.filter(transaction => transaction.employee.id === selectedEmployeeId));\n    } else {\n      setSelectedTransactions([]);\n    }\n  }, [transactionsMap, isAllEmployees, selectedEmployeeId]);\n  const updateTransaction = useCallback((transactionId, approved) => {\n    setTransactionsMap(prevMap => {\n      const newMap = new Map(prevMap);\n      const transaction = newMap.get(transactionId);\n      if (transaction) {\n        newMap.set(transactionId, {\n          ...transaction,\n          approved\n        });\n      }\n      return newMap;\n    });\n  }, [setTransactionsMap]);\n  const loadEmployees = useCallback(async () => {\n    setEmployeesLoading(true);\n    console.log(\"Loading employees...\");\n    await fetchEmployees();\n    setEmployeesLoading(false);\n  }, [fetchEmployees]);\n  const loadAllTransactions = useCallback(async () => {\n    setTransactionsLoading(true);\n    console.log(\"Loading all transactions...\");\n    await fetchPaginatedTransactions();\n    setTransactionsLoading(false);\n  }, [fetchPaginatedTransactions]);\n  const loadTransactionsByEmployee = useCallback(async employeeId => {\n    setTransactionsLoading(true);\n    console.log(`Loading transactions for employee ID: ${employeeId}`);\n    await fetchTransactionsByEmployee(employeeId);\n    setTransactionsLoading(false);\n  }, [fetchTransactionsByEmployee]);\n  useEffect(() => {\n    const initialize = async () => {\n      if (!employees && !employeesLoading) {\n        await loadEmployees();\n      }\n      if (isAllEmployees && !(paginatedTransactions !== null && paginatedTransactions !== void 0 && paginatedTransactions.data) && !transactionsLoading) {\n        await loadAllTransactions();\n      }\n    };\n    initialize();\n  }, [employees, employeesLoading, loadEmployees, isAllEmployees, paginatedTransactions, transactionsLoading, loadAllTransactions]);\n  const handleEmployeeChange = useCallback(async newValue => {\n    console.log(\"handleEmployeeChange called with:\", newValue);\n    setSelectedEmployeeId((newValue === null || newValue === void 0 ? void 0 : newValue.id) === \"all-employees\" ? null : (newValue === null || newValue === void 0 ? void 0 : newValue.id) || null);\n    setIsAllEmployees(!newValue || newValue.id === \"all-employees\");\n\n    // Reset transactions loading state\n    setTransactionsLoading(true);\n    setSelectedTransactions([]);\n    if (!newValue || newValue.id === \"all-employees\") {\n      console.log(\"All Employees selected.\");\n      await loadAllTransactions();\n    } else {\n      console.log(`Fetching transactions for employee ID: ${newValue.id}`);\n      await loadTransactionsByEmployee(newValue.id);\n    }\n    setTransactionsLoading(false);\n  }, [loadAllTransactions, loadTransactionsByEmployee]);\n  return /*#__PURE__*/_jsxDEV(Fragment, {\n    children: /*#__PURE__*/_jsxDEV(\"main\", {\n      className: \"MainContainer\",\n      children: [/*#__PURE__*/_jsxDEV(Instructions, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 156,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"hr\", {\n        className: \"RampBreak--l\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 157,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(InputSelect, {\n        isLoading: employeesLoadingState,\n        defaultValue: EMPTY_EMPLOYEE,\n        items: employees ? [EMPTY_EMPLOYEE, ...employees] : [],\n        label: \"Filter by employee\",\n        loadingLabel: \"Loading employees...\",\n        parseItem: item => ({\n          value: item.id,\n          label: `${item.firstName} ${item.lastName}`\n        }),\n        onChange: handleEmployeeChange\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 158,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"RampBreak--l\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 170,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"RampGrid\",\n        children: [transactionsLoading ? /*#__PURE__*/_jsxDEV(\"div\", {\n          children: \"Loading transactions...\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 173,\n          columnNumber: 13\n        }, this) : /*#__PURE__*/_jsxDEV(Transactions, {\n          transactions: selectedTransactions,\n          updateTransaction: updateTransaction\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 175,\n          columnNumber: 13\n        }, this), isAllEmployees && (paginatedTransactions === null || paginatedTransactions === void 0 ? void 0 : paginatedTransactions.nextPage) && /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"RampButton\",\n          onClick: async () => {\n            console.log(\"Loading more transactions...\");\n            await fetchPaginatedTransactions();\n          },\n          disabled: transactionsLoading,\n          children: \"View More\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 178,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 171,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 155,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 154,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"26rtlFu6OuSmkj9EOp/uTUaGgew=\", false, function () {\n  return [useEmployees, usePaginatedTransactions, useTransactionsByEmployee];\n});\n_c = App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["Fragment","useCallback","useEffect","useState","InputSelect","Instructions","Transactions","useEmployees","usePaginatedTransactions","useTransactionsByEmployee","EMPTY_EMPLOYEE","jsxDEV","_jsxDEV","App","_s","data","employees","fetchAll","fetchEmployees","loading","employeesLoading","paginatedTransactions","fetchPaginatedTransactions","invalidateData","invalidatePaginatedTransactions","transactionsByEmployee","fetchById","fetchTransactionsByEmployee","invalidateTransactionsByEmployee","transactionsMap","setTransactionsMap","Map","selectedTransactions","setSelectedTransactions","selectedEmployeeId","setSelectedEmployeeId","employeesLoadingState","setEmployeesLoading","transactionsLoading","setTransactionsLoading","isAllEmployees","setIsAllEmployees","prevMap","newMap","forEach","transaction","existingTransaction","get","id","set","allTransactions","Array","from","values","filter","employee","updateTransaction","transactionId","approved","loadEmployees","console","log","loadAllTransactions","loadTransactionsByEmployee","employeeId","initialize","handleEmployeeChange","newValue","children","className","fileName","_jsxFileName","lineNumber","columnNumber","isLoading","defaultValue","items","label","loadingLabel","parseItem","item","value","firstName","lastName","onChange","transactions","nextPage","onClick","disabled","_c","$RefreshReg$"],"sources":["/Users/roderickmoise/Desktop/Documents/Downloads/ramp-fe-challenge/src/App.tsx"],"sourcesContent":["import { Fragment, useCallback, useEffect, useState } from \"react\"\nimport { InputSelect } from \"./components/InputSelect\"\nimport { Instructions } from \"./components/Instructions\"\nimport { Transactions } from \"./components/Transactions\"\nimport { useEmployees } from \"./hooks/useEmployees\"\nimport { usePaginatedTransactions } from \"./hooks/usePaginatedTransactions\"\nimport { useTransactionsByEmployee } from \"./hooks/useTransactionsByEmployee\"\nimport { EMPTY_EMPLOYEE } from \"./utils/constants\"\nimport { Employee, Transaction } from \"./utils/types\"\n\nexport function App() {\n  const { data: employees, fetchAll: fetchEmployees, loading: employeesLoading } = useEmployees()\n  const {\n    data: paginatedTransactions,\n    fetchAll: fetchPaginatedTransactions,\n    invalidateData: invalidatePaginatedTransactions,\n  } = usePaginatedTransactions()\n  const {\n    data: transactionsByEmployee,\n    fetchById: fetchTransactionsByEmployee,\n    invalidateData: invalidateTransactionsByEmployee,\n  } = useTransactionsByEmployee()\n\n  const [transactionsMap, setTransactionsMap] = useState<Map<string, Transaction>>(new Map())\n  const [selectedTransactions, setSelectedTransactions] = useState<Transaction[]>([])\n  const [selectedEmployeeId, setSelectedEmployeeId] = useState<string | null>(null)\n  const [employeesLoadingState, setEmployeesLoading] = useState(false)\n  const [transactionsLoading, setTransactionsLoading] = useState(false)\n  const [isAllEmployees, setIsAllEmployees] = useState(true)\n\n  // Update transactionsMap when new data is fetched\n  useEffect(() => {\n    if (paginatedTransactions?.data) {\n      setTransactionsMap((prevMap) => {\n        const newMap = new Map(prevMap)\n        paginatedTransactions.data.forEach((transaction) => {\n          const existingTransaction = newMap.get(transaction.id)\n          newMap.set(transaction.id, existingTransaction || transaction)\n        })\n        return newMap\n      })\n    }\n  }, [paginatedTransactions])\n\n  useEffect(() => {\n    if (transactionsByEmployee) {\n      setTransactionsMap((prevMap) => {\n        const newMap = new Map(prevMap)\n        transactionsByEmployee.forEach((transaction) => {\n          const existingTransaction = newMap.get(transaction.id)\n          newMap.set(transaction.id, existingTransaction || transaction)\n        })\n        return newMap\n      })\n    }\n  }, [transactionsByEmployee])\n\n  // Update selectedTransactions based on filter\n  useEffect(() => {\n    const allTransactions = Array.from(transactionsMap.values())\n    if (isAllEmployees) {\n      setSelectedTransactions(allTransactions)\n    } else if (selectedEmployeeId) {\n      setSelectedTransactions(\n        allTransactions.filter((transaction) => transaction.employee.id === selectedEmployeeId)\n      )\n    } else {\n      setSelectedTransactions([])\n    }\n  }, [transactionsMap, isAllEmployees, selectedEmployeeId])\n\n  const updateTransaction = useCallback(\n    (transactionId: string, approved: boolean) => {\n      setTransactionsMap((prevMap) => {\n        const newMap = new Map(prevMap)\n        const transaction = newMap.get(transactionId)\n        if (transaction) {\n          newMap.set(transactionId, { ...transaction, approved })\n        }\n        return newMap\n      })\n    },\n    [setTransactionsMap]\n  )\n\n  const loadEmployees = useCallback(async () => {\n    setEmployeesLoading(true)\n    console.log(\"Loading employees...\")\n    await fetchEmployees()\n    setEmployeesLoading(false)\n  }, [fetchEmployees])\n\n  const loadAllTransactions = useCallback(async () => {\n    setTransactionsLoading(true)\n    console.log(\"Loading all transactions...\")\n    await fetchPaginatedTransactions()\n    setTransactionsLoading(false)\n  }, [fetchPaginatedTransactions])\n\n  const loadTransactionsByEmployee = useCallback(\n    async (employeeId: string) => {\n      setTransactionsLoading(true)\n      console.log(`Loading transactions for employee ID: ${employeeId}`)\n      await fetchTransactionsByEmployee(employeeId)\n      setTransactionsLoading(false)\n    },\n    [fetchTransactionsByEmployee]\n  )\n\n  useEffect(() => {\n    const initialize = async () => {\n      if (!employees && !employeesLoading) {\n        await loadEmployees()\n      }\n      if (isAllEmployees && !paginatedTransactions?.data && !transactionsLoading) {\n        await loadAllTransactions()\n      }\n    }\n    initialize()\n  }, [\n    employees,\n    employeesLoading,\n    loadEmployees,\n    isAllEmployees,\n    paginatedTransactions,\n    transactionsLoading,\n    loadAllTransactions,\n  ])\n\n  const handleEmployeeChange = useCallback(\n    async (newValue: Employee | null) => {\n      console.log(\"handleEmployeeChange called with:\", newValue)\n      setSelectedEmployeeId(newValue?.id === \"all-employees\" ? null : newValue?.id || null)\n      setIsAllEmployees(!newValue || newValue.id === \"all-employees\")\n\n      // Reset transactions loading state\n      setTransactionsLoading(true)\n      setSelectedTransactions([])\n\n      if (!newValue || newValue.id === \"all-employees\") {\n        console.log(\"All Employees selected.\")\n        await loadAllTransactions()\n      } else {\n        console.log(`Fetching transactions for employee ID: ${newValue.id}`)\n        await loadTransactionsByEmployee(newValue.id)\n      }\n\n      setTransactionsLoading(false)\n    },\n    [loadAllTransactions, loadTransactionsByEmployee]\n  )\n\n  return (\n    <Fragment>\n      <main className=\"MainContainer\">\n        <Instructions />\n        <hr className=\"RampBreak--l\" />\n        <InputSelect<Employee>\n          isLoading={employeesLoadingState}\n          defaultValue={EMPTY_EMPLOYEE}\n          items={employees ? [EMPTY_EMPLOYEE, ...employees] : []}\n          label=\"Filter by employee\"\n          loadingLabel=\"Loading employees...\"\n          parseItem={(item) => ({\n            value: item.id,\n            label: `${item.firstName} ${item.lastName}`,\n          })}\n          onChange={handleEmployeeChange}\n        />\n        <div className=\"RampBreak--l\" />\n        <div className=\"RampGrid\">\n          {transactionsLoading ? (\n            <div>Loading transactions...</div>\n          ) : (\n            <Transactions transactions={selectedTransactions} updateTransaction={updateTransaction} />\n          )}\n          {isAllEmployees && paginatedTransactions?.nextPage && (\n            <button\n              className=\"RampButton\"\n              onClick={async () => {\n                console.log(\"Loading more transactions...\")\n                await fetchPaginatedTransactions()\n              }}\n              disabled={transactionsLoading}\n            >\n              View More\n            </button>\n          )}\n        </div>\n      </main>\n    </Fragment>\n  )\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}