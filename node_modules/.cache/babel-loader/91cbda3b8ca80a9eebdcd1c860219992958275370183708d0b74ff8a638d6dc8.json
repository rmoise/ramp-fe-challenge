{"ast":null,"code":"var _jsxFileName = \"/Users/roderickmoise/Desktop/Documents/Downloads/ramp-fe-challenge/src/App.tsx\",\n  _s = $RefreshSig$();\nimport { Fragment, useCallback, useEffect, useMemo, useState } from \"react\";\nimport { InputSelect } from \"./components/InputSelect\";\nimport { Instructions } from \"./components/Instructions\";\nimport { Transactions } from \"./components/Transactions\";\nimport { useEmployees } from \"./hooks/useEmployees\";\nimport { usePaginatedTransactions } from \"./hooks/usePaginatedTransactions\";\nimport { useTransactionsByEmployee } from \"./hooks/useTransactionsByEmployee\";\nimport { EMPTY_EMPLOYEE } from \"./utils/constants\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport function App() {\n  _s();\n  const {\n    data: employees,\n    ...employeeUtils\n  } = useEmployees();\n  const {\n    data: paginatedTransactions,\n    ...paginatedTransactionsUtils\n  } = usePaginatedTransactions();\n  const {\n    data: transactionsByEmployee,\n    ...transactionsByEmployeeUtils\n  } = useTransactionsByEmployee();\n  const [isLoading, setIsLoading] = useState(false);\n  const [selectedEmployeeId, setSelectedEmployeeId] = useState(null); // Track selected employee\n\n  // Combine the data depending on which source is available\n  const transactions = useMemo(() => {\n    return selectedEmployeeId === null ? paginatedTransactions === null || paginatedTransactions === void 0 ? void 0 : paginatedTransactions.data : transactionsByEmployee;\n  }, [paginatedTransactions, transactionsByEmployee, selectedEmployeeId]);\n\n  // Function to load all transactions\n  const loadAllTransactions = useCallback(async () => {\n    setIsLoading(true);\n    transactionsByEmployeeUtils.invalidateData(); // Invalidate any employee-specific transactions\n\n    console.log(\"Fetching all transactions...\"); // Debugging log\n    // Fetch all transactions and employees\n    await employeeUtils.fetchAll();\n    await paginatedTransactionsUtils.fetchAll();\n    setIsLoading(false);\n  }, [employeeUtils, paginatedTransactionsUtils, transactionsByEmployeeUtils]);\n\n  // Function to load transactions for a specific employee\n  const loadTransactionsByEmployee = useCallback(async employeeId => {\n    if (!employeeId) return; // Prevent empty employeeId\n    setIsLoading(true); // Set loading state\n    transactionsByEmployeeUtils.invalidateData(); // Invalidate paginated transactions data\n\n    console.log(`Fetching transactions for employee ID: ${employeeId}`); // Debugging log\n    await transactionsByEmployeeUtils.fetchById(employeeId);\n    setIsLoading(false); // Reset loading state\n  }, [transactionsByEmployeeUtils]);\n\n  // Automatically load all transactions if no employees are available\n  useEffect(() => {\n    if (employees === null && !employeeUtils.loading) {\n      loadAllTransactions();\n    }\n  }, [employeeUtils.loading, employees, loadAllTransactions]);\n  return /*#__PURE__*/_jsxDEV(Fragment, {\n    children: /*#__PURE__*/_jsxDEV(\"main\", {\n      className: \"MainContainer\",\n      children: [/*#__PURE__*/_jsxDEV(Instructions, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 60,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"hr\", {\n        className: \"RampBreak--l\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 62,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(InputSelect, {\n        isLoading: isLoading,\n        defaultValue: EMPTY_EMPLOYEE,\n        items: employees === null ? [] : [EMPTY_EMPLOYEE, ...employees],\n        label: \"Filter by employee\",\n        loadingLabel: \"Loading employees\",\n        parseItem: item => ({\n          // Specify the type here\n          value: item.id,\n          label: `${item.firstName} ${item.lastName}`\n        }),\n        onChange: async newValue => {\n          // Specify the type here\n          console.log(\"Selected Employee:\", newValue); // Debugging log\n\n          if (newValue === null || newValue.id === \"all-employees\") {\n            // Load all transactions when \"All Employees\" is selected\n            await loadAllTransactions();\n          } else if (newValue.id) {\n            // Load specific employee transactions\n            await loadTransactionsByEmployee(newValue.id);\n          }\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 65,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"RampBreak--l\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 90,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"RampGrid\",\n        children: [/*#__PURE__*/_jsxDEV(Transactions, {\n          transactions: transactions || []\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 94,\n          columnNumber: 11\n        }, this), \" \", transactions !== null && /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"RampButton\",\n          disabled: paginatedTransactionsUtils.loading,\n          onClick: async () => {\n            await loadAllTransactions();\n          },\n          children: \"View More\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 97,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 92,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 58,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"mmWfvLGmNWtaOCaM0n8oWWq6Nxs=\", false, function () {\n  return [useEmployees, usePaginatedTransactions, useTransactionsByEmployee];\n});\n_c = App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["Fragment","useCallback","useEffect","useMemo","useState","InputSelect","Instructions","Transactions","useEmployees","usePaginatedTransactions","useTransactionsByEmployee","EMPTY_EMPLOYEE","jsxDEV","_jsxDEV","App","_s","data","employees","employeeUtils","paginatedTransactions","paginatedTransactionsUtils","transactionsByEmployee","transactionsByEmployeeUtils","isLoading","setIsLoading","selectedEmployeeId","setSelectedEmployeeId","transactions","loadAllTransactions","invalidateData","console","log","fetchAll","loadTransactionsByEmployee","employeeId","fetchById","loading","children","className","fileName","_jsxFileName","lineNumber","columnNumber","defaultValue","items","label","loadingLabel","parseItem","item","value","id","firstName","lastName","onChange","newValue","disabled","onClick","_c","$RefreshReg$"],"sources":["/Users/roderickmoise/Desktop/Documents/Downloads/ramp-fe-challenge/src/App.tsx"],"sourcesContent":["import { Fragment, useCallback, useEffect, useMemo, useState } from \"react\"\nimport { InputSelect } from \"./components/InputSelect\"\nimport { Instructions } from \"./components/Instructions\"\nimport { Transactions } from \"./components/Transactions\"\nimport { useEmployees } from \"./hooks/useEmployees\"\nimport { usePaginatedTransactions } from \"./hooks/usePaginatedTransactions\"\nimport { useTransactionsByEmployee } from \"./hooks/useTransactionsByEmployee\"\nimport { EMPTY_EMPLOYEE } from \"./utils/constants\"\nimport { Employee } from \"./utils/types\"\n\nexport function App() {\n  const { data: employees, ...employeeUtils } = useEmployees()\n  const { data: paginatedTransactions, ...paginatedTransactionsUtils } = usePaginatedTransactions()\n  const { data: transactionsByEmployee, ...transactionsByEmployeeUtils } = useTransactionsByEmployee()\n  const [isLoading, setIsLoading] = useState(false)\n  const [selectedEmployeeId, setSelectedEmployeeId] = useState<string | null>(null) // Track selected employee\n\n  // Combine the data depending on which source is available\n  const transactions = useMemo(() => {\n    return selectedEmployeeId === null ? paginatedTransactions?.data : transactionsByEmployee\n  }, [paginatedTransactions, transactionsByEmployee, selectedEmployeeId])\n\n  // Function to load all transactions\n  const loadAllTransactions = useCallback(async () => {\n    setIsLoading(true)\n    transactionsByEmployeeUtils.invalidateData() // Invalidate any employee-specific transactions\n\n    console.log(\"Fetching all transactions...\") // Debugging log\n    // Fetch all transactions and employees\n    await employeeUtils.fetchAll()\n    await paginatedTransactionsUtils.fetchAll()\n\n    setIsLoading(false)\n  }, [employeeUtils, paginatedTransactionsUtils, transactionsByEmployeeUtils])\n\n  // Function to load transactions for a specific employee\n  const loadTransactionsByEmployee = useCallback(\n    async (employeeId: string) => {\n      if (!employeeId) return // Prevent empty employeeId\n      setIsLoading(true) // Set loading state\n      transactionsByEmployeeUtils.invalidateData() // Invalidate paginated transactions data\n\n      console.log(`Fetching transactions for employee ID: ${employeeId}`) // Debugging log\n      await transactionsByEmployeeUtils.fetchById(employeeId)\n      setIsLoading(false) // Reset loading state\n    },\n    [transactionsByEmployeeUtils]\n  )\n\n  // Automatically load all transactions if no employees are available\n  useEffect(() => {\n    if (employees === null && !employeeUtils.loading) {\n      loadAllTransactions()\n    }\n  }, [employeeUtils.loading, employees, loadAllTransactions])\n\n  return (\n    <Fragment>\n      <main className=\"MainContainer\">\n        <Instructions />\n\n        <hr className=\"RampBreak--l\" />\n\n        {/* InputSelect for Employee Filtering */}\n        <InputSelect<Employee>\n          isLoading={isLoading}\n          defaultValue={EMPTY_EMPLOYEE}\n          items={employees === null ? [] : [EMPTY_EMPLOYEE, ...employees]}\n          label=\"Filter by employee\"\n          loadingLabel=\"Loading employees\"\n          parseItem={(item: Employee) => ({\n            // Specify the type here\n            value: item.id,\n            label: `${item.firstName} ${item.lastName}`,\n          })}\n          onChange={async (newValue: Employee | null) => {\n            // Specify the type here\n            console.log(\"Selected Employee:\", newValue) // Debugging log\n\n            if (newValue === null || newValue.id === \"all-employees\") {\n              // Load all transactions when \"All Employees\" is selected\n              await loadAllTransactions()\n            } else if (newValue.id) {\n              // Load specific employee transactions\n              await loadTransactionsByEmployee(newValue.id)\n            }\n          }}\n        />\n\n        <div className=\"RampBreak--l\" />\n\n        <div className=\"RampGrid\">\n          {/* Transactions Component */}\n          <Transactions transactions={transactions || []} /> {/* Default to an empty array if null */}\n          {/* View More Button */}\n          {transactions !== null && (\n            <button\n              className=\"RampButton\"\n              disabled={paginatedTransactionsUtils.loading}\n              onClick={async () => {\n                await loadAllTransactions()\n              }}\n            >\n              View More\n            </button>\n          )}\n        </div>\n      </main>\n    </Fragment>\n  )\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}