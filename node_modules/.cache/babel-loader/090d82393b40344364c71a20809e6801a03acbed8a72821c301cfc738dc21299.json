{"ast":null,"code":"var _jsxFileName = \"/Users/roderickmoise/Desktop/Documents/Downloads/ramp-fe-challenge/src/App.tsx\",\n  _s = $RefreshSig$();\nimport { Fragment, useEffect, useState } from \"react\";\nimport { InputSelect } from \"./components/InputSelect\";\nimport { Instructions } from \"./components/Instructions\";\nimport { Transactions } from \"./components/Transactions\";\nimport { useEmployees } from \"./hooks/useEmployees\";\nimport { usePaginatedTransactions } from \"./hooks/usePaginatedTransactions\";\nimport { useTransactionsByEmployee } from \"./hooks/useTransactionsByEmployee\";\nimport { EMPTY_EMPLOYEE } from \"./utils/constants\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport function App() {\n  _s();\n  const {\n    data: employees,\n    fetchAll: fetchEmployees,\n    loading: employeesLoading\n  } = useEmployees();\n  const {\n    data: paginatedTransactions,\n    fetchAll: fetchPaginatedTransactions,\n    loading: paginatedLoading\n  } = usePaginatedTransactions();\n  const {\n    data: transactionsByEmployee,\n    fetchById: fetchTransactionsByEmployee,\n    invalidateData: invalidateEmployeeData\n  } = useTransactionsByEmployee();\n  const [isLoading, setIsLoading] = useState(false);\n  const [isAllEmployees, setIsAllEmployees] = useState(true);\n  const [activeTransactions, setActiveTransactions] = useState([]);\n\n  // Fetch transactions for all employees when employees are loaded\n  useEffect(() => {\n    const initializeData = async () => {\n      if (!employees && !employeesLoading) {\n        await fetchEmployees();\n      }\n      if (employees && isAllEmployees) {\n        await fetchPaginatedTransactions();\n      }\n    };\n    initializeData();\n  }, [employees, employeesLoading, isAllEmployees, fetchEmployees, fetchPaginatedTransactions]);\n\n  // Update active transactions based on current state\n  useEffect(() => {\n    if (isAllEmployees) {\n      setActiveTransactions((paginatedTransactions === null || paginatedTransactions === void 0 ? void 0 : paginatedTransactions.data) || []);\n    } else {\n      setActiveTransactions(transactionsByEmployee || []);\n    }\n  }, [isAllEmployees, paginatedTransactions, transactionsByEmployee]);\n  const handleEmployeeChange = async newValue => {\n    setIsLoading(true);\n    if (!newValue || newValue.id === \"all-employees\") {\n      // Switch to All Employees\n      console.log(\"Switching to All Employees...\");\n      setIsAllEmployees(true);\n      await fetchPaginatedTransactions(); // Fetch transactions for all employees\n      invalidateEmployeeData(); // Clear employee-specific transactions\n    } else {\n      // Fetch transactions for the selected employee\n      console.log(`Fetching transactions for employee ID: ${newValue.id}`);\n      setIsAllEmployees(false);\n      await fetchTransactionsByEmployee(newValue.id);\n    }\n    setIsLoading(false);\n  };\n  const handleViewMore = async () => {\n    if (isAllEmployees && paginatedTransactions !== null && paginatedTransactions !== void 0 && paginatedTransactions.nextPage) {\n      await fetchPaginatedTransactions();\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(Fragment, {\n    children: /*#__PURE__*/_jsxDEV(\"main\", {\n      className: \"MainContainer\",\n      children: [/*#__PURE__*/_jsxDEV(Instructions, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 80,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"hr\", {\n        className: \"RampBreak--l\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 81,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(InputSelect, {\n        isLoading: isLoading || employeesLoading,\n        defaultValue: EMPTY_EMPLOYEE,\n        items: employees ? [EMPTY_EMPLOYEE, ...employees] : [],\n        label: \"Filter by employee\",\n        loadingLabel: \"Loading employees...\",\n        parseItem: item => ({\n          value: item.id,\n          label: `${item.firstName} ${item.lastName}`\n        }),\n        onChange: handleEmployeeChange\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 82,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"RampBreak--l\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 94,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"RampGrid\",\n        children: [isLoading ? /*#__PURE__*/_jsxDEV(\"div\", {\n          children: \"Loading transactions...\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 97,\n          columnNumber: 13\n        }, this) : /*#__PURE__*/_jsxDEV(Transactions, {\n          transactions: activeTransactions\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 99,\n          columnNumber: 13\n        }, this), isAllEmployees && (paginatedTransactions === null || paginatedTransactions === void 0 ? void 0 : paginatedTransactions.nextPage) && /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"RampButton\",\n          onClick: handleViewMore,\n          disabled: isLoading || paginatedLoading,\n          children: \"View More\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 102,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 95,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 79,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 78,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"VaBtrq8iwxB4zXRnLW24ahpvIRo=\", false, function () {\n  return [useEmployees, usePaginatedTransactions, useTransactionsByEmployee];\n});\n_c = App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["Fragment","useEffect","useState","InputSelect","Instructions","Transactions","useEmployees","usePaginatedTransactions","useTransactionsByEmployee","EMPTY_EMPLOYEE","jsxDEV","_jsxDEV","App","_s","data","employees","fetchAll","fetchEmployees","loading","employeesLoading","paginatedTransactions","fetchPaginatedTransactions","paginatedLoading","transactionsByEmployee","fetchById","fetchTransactionsByEmployee","invalidateData","invalidateEmployeeData","isLoading","setIsLoading","isAllEmployees","setIsAllEmployees","activeTransactions","setActiveTransactions","initializeData","handleEmployeeChange","newValue","id","console","log","handleViewMore","nextPage","children","className","fileName","_jsxFileName","lineNumber","columnNumber","defaultValue","items","label","loadingLabel","parseItem","item","value","firstName","lastName","onChange","transactions","onClick","disabled","_c","$RefreshReg$"],"sources":["/Users/roderickmoise/Desktop/Documents/Downloads/ramp-fe-challenge/src/App.tsx"],"sourcesContent":["import { Fragment, useCallback, useEffect, useMemo, useState } from \"react\"\nimport { InputSelect } from \"./components/InputSelect\"\nimport { Instructions } from \"./components/Instructions\"\nimport { Transactions } from \"./components/Transactions\"\nimport { useEmployees } from \"./hooks/useEmployees\"\nimport { usePaginatedTransactions } from \"./hooks/usePaginatedTransactions\"\nimport { useTransactionsByEmployee } from \"./hooks/useTransactionsByEmployee\"\nimport { EMPTY_EMPLOYEE } from \"./utils/constants\"\nimport { Employee } from \"./utils/types\"\n\nexport function App() {\n  const { data: employees, fetchAll: fetchEmployees, loading: employeesLoading } = useEmployees()\n  const {\n    data: paginatedTransactions,\n    fetchAll: fetchPaginatedTransactions,\n    loading: paginatedLoading,\n  } = usePaginatedTransactions()\n  const {\n    data: transactionsByEmployee,\n    fetchById: fetchTransactionsByEmployee,\n    invalidateData: invalidateEmployeeData,\n  } = useTransactionsByEmployee()\n\n  const [isLoading, setIsLoading] = useState(false)\n  const [isAllEmployees, setIsAllEmployees] = useState(true)\n  const [activeTransactions, setActiveTransactions] = useState<any[]>([])\n\n  // Fetch transactions for all employees when employees are loaded\n  useEffect(() => {\n    const initializeData = async () => {\n      if (!employees && !employeesLoading) {\n        await fetchEmployees()\n      }\n\n      if (employees && isAllEmployees) {\n        await fetchPaginatedTransactions()\n      }\n    }\n\n    initializeData()\n  }, [employees, employeesLoading, isAllEmployees, fetchEmployees, fetchPaginatedTransactions])\n\n  // Update active transactions based on current state\n  useEffect(() => {\n    if (isAllEmployees) {\n      setActiveTransactions(paginatedTransactions?.data || [])\n    } else {\n      setActiveTransactions(transactionsByEmployee || [])\n    }\n  }, [isAllEmployees, paginatedTransactions, transactionsByEmployee])\n\n  const handleEmployeeChange = async (newValue: Employee | null) => {\n    setIsLoading(true)\n\n    if (!newValue || newValue.id === \"all-employees\") {\n      // Switch to All Employees\n      console.log(\"Switching to All Employees...\")\n      setIsAllEmployees(true)\n      await fetchPaginatedTransactions() // Fetch transactions for all employees\n      invalidateEmployeeData() // Clear employee-specific transactions\n    } else {\n      // Fetch transactions for the selected employee\n      console.log(`Fetching transactions for employee ID: ${newValue.id}`)\n      setIsAllEmployees(false)\n      await fetchTransactionsByEmployee(newValue.id)\n    }\n\n    setIsLoading(false)\n  }\n\n  const handleViewMore = async () => {\n    if (isAllEmployees && paginatedTransactions?.nextPage) {\n      await fetchPaginatedTransactions()\n    }\n  }\n\n  return (\n    <Fragment>\n      <main className=\"MainContainer\">\n        <Instructions />\n        <hr className=\"RampBreak--l\" />\n        <InputSelect<Employee>\n          isLoading={isLoading || employeesLoading}\n          defaultValue={EMPTY_EMPLOYEE}\n          items={employees ? [EMPTY_EMPLOYEE, ...employees] : []}\n          label=\"Filter by employee\"\n          loadingLabel=\"Loading employees...\"\n          parseItem={(item) => ({\n            value: item.id,\n            label: `${item.firstName} ${item.lastName}`,\n          })}\n          onChange={handleEmployeeChange}\n        />\n        <div className=\"RampBreak--l\" />\n        <div className=\"RampGrid\">\n          {isLoading ? (\n            <div>Loading transactions...</div>\n          ) : (\n            <Transactions transactions={activeTransactions} />\n          )}\n          {isAllEmployees && paginatedTransactions?.nextPage && (\n            <button\n              className=\"RampButton\"\n              onClick={handleViewMore}\n              disabled={isLoading || paginatedLoading}\n            >\n              View More\n            </button>\n          )}\n        </div>\n      </main>\n    </Fragment>\n  )\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}