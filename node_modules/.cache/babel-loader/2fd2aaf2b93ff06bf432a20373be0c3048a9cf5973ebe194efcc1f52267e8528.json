{"ast":null,"code":"var _jsxFileName = \"/Users/roderickmoise/Desktop/Documents/Downloads/ramp-fe-challenge/src/App.tsx\",\n  _s = $RefreshSig$();\nimport { Fragment, useEffect, useState } from \"react\";\nimport { InputSelect } from \"./components/InputSelect\";\nimport { Instructions } from \"./components/Instructions\";\nimport { Transactions } from \"./components/Transactions\";\nimport { useEmployees } from \"./hooks/useEmployees\";\nimport { usePaginatedTransactions } from \"./hooks/usePaginatedTransactions\";\nimport { useTransactionsByEmployee } from \"./hooks/useTransactionsByEmployee\";\nimport { EMPTY_EMPLOYEE } from \"./utils/constants\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport function App() {\n  _s();\n  const {\n    data: employees,\n    fetchAll: fetchEmployees\n  } = useEmployees();\n  const {\n    data: paginatedTransactions,\n    fetchAll: fetchPaginatedTransactions\n  } = usePaginatedTransactions();\n  const {\n    data: transactionsByEmployee,\n    fetchById: fetchTransactionsByEmployee\n  } = useTransactionsByEmployee();\n  const [isLoading, setIsLoading] = useState(false);\n  const [selectedEmployee, setSelectedEmployee] = useState(null);\n\n  // Function to load all transactions\n  const loadAllTransactions = async () => {\n    setIsLoading(true);\n    await fetchEmployees();\n    await fetchPaginatedTransactions();\n    setIsLoading(false);\n  };\n\n  // Function to load transactions for a specific employee\n  const loadTransactionsByEmployee = async employeeId => {\n    setIsLoading(true);\n    await fetchTransactionsByEmployee(employeeId);\n    setIsLoading(false);\n  };\n\n  // Effect to load all transactions on initial load\n  useEffect(() => {\n    loadAllTransactions();\n  }, []);\n\n  // Handle employee selection changes\n  const handleEmployeeChange = async newValue => {\n    setSelectedEmployee(newValue);\n    if (!newValue || newValue.id === \"all-employees\") {\n      await loadAllTransactions(); // Load all transactions for all employees\n    } else {\n      await loadTransactionsByEmployee(newValue.id); // Load transactions for the selected employee\n    }\n  };\n  const transactions = selectedEmployee && selectedEmployee.id !== \"all-employees\" ? transactionsByEmployee : (paginatedTransactions === null || paginatedTransactions === void 0 ? void 0 : paginatedTransactions.data) || [];\n  return /*#__PURE__*/_jsxDEV(Fragment, {\n    children: /*#__PURE__*/_jsxDEV(\"main\", {\n      className: \"MainContainer\",\n      children: [/*#__PURE__*/_jsxDEV(Instructions, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 60,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"hr\", {\n        className: \"RampBreak--l\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 61,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(InputSelect, {\n        isLoading: isLoading,\n        defaultValue: EMPTY_EMPLOYEE,\n        items: employees ? [EMPTY_EMPLOYEE, ...employees] : [],\n        label: \"Filter by employee\",\n        loadingLabel: \"Loading employees...\",\n        parseItem: item => ({\n          value: item.id,\n          label: `${item.firstName} ${item.lastName}`\n        }),\n        onChange: handleEmployeeChange // Handle employee selection\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 63,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"RampBreak--l\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 76,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"RampGrid\",\n        children: [isLoading ? /*#__PURE__*/_jsxDEV(\"div\", {\n          children: \"Loading transactions...\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 80,\n          columnNumber: 13\n        }, this) : /*#__PURE__*/_jsxDEV(Transactions, {\n          transactions: transactions\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 82,\n          columnNumber: 13\n        }, this) // Display transactions\n        , selectedEmployee && selectedEmployee.id === \"all-employees\" && (paginatedTransactions === null || paginatedTransactions === void 0 ? void 0 : paginatedTransactions.nextPage) && /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"RampButton\",\n          onClick: fetchPaginatedTransactions // Load more transactions\n          ,\n          disabled: isLoading,\n          children: \"View More\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 88,\n          columnNumber: 15\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 78,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 58,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"cuXFVxA/ggjltIPOCpFYJApW6wY=\", false, function () {\n  return [useEmployees, usePaginatedTransactions, useTransactionsByEmployee];\n});\n_c = App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["Fragment","useEffect","useState","InputSelect","Instructions","Transactions","useEmployees","usePaginatedTransactions","useTransactionsByEmployee","EMPTY_EMPLOYEE","jsxDEV","_jsxDEV","App","_s","data","employees","fetchAll","fetchEmployees","paginatedTransactions","fetchPaginatedTransactions","transactionsByEmployee","fetchById","fetchTransactionsByEmployee","isLoading","setIsLoading","selectedEmployee","setSelectedEmployee","loadAllTransactions","loadTransactionsByEmployee","employeeId","handleEmployeeChange","newValue","id","transactions","children","className","fileName","_jsxFileName","lineNumber","columnNumber","defaultValue","items","label","loadingLabel","parseItem","item","value","firstName","lastName","onChange","nextPage","onClick","disabled","_c","$RefreshReg$"],"sources":["/Users/roderickmoise/Desktop/Documents/Downloads/ramp-fe-challenge/src/App.tsx"],"sourcesContent":["import { Fragment, useCallback, useEffect, useState } from \"react\"\nimport { InputSelect } from \"./components/InputSelect\"\nimport { Instructions } from \"./components/Instructions\"\nimport { Transactions } from \"./components/Transactions\"\nimport { useEmployees } from \"./hooks/useEmployees\"\nimport { usePaginatedTransactions } from \"./hooks/usePaginatedTransactions\"\nimport { useTransactionsByEmployee } from \"./hooks/useTransactionsByEmployee\"\nimport { EMPTY_EMPLOYEE } from \"./utils/constants\"\nimport { Employee } from \"./utils/types\"\n\nexport function App() {\n  const { data: employees, fetchAll: fetchEmployees } = useEmployees()\n  const { data: paginatedTransactions, fetchAll: fetchPaginatedTransactions } =\n    usePaginatedTransactions()\n  const { data: transactionsByEmployee, fetchById: fetchTransactionsByEmployee } =\n    useTransactionsByEmployee()\n\n  const [isLoading, setIsLoading] = useState(false)\n  const [selectedEmployee, setSelectedEmployee] = useState<Employee | null>(null)\n\n  // Function to load all transactions\n  const loadAllTransactions = async () => {\n    setIsLoading(true)\n    await fetchEmployees()\n    await fetchPaginatedTransactions()\n    setIsLoading(false)\n  }\n\n  // Function to load transactions for a specific employee\n  const loadTransactionsByEmployee = async (employeeId: string) => {\n    setIsLoading(true)\n    await fetchTransactionsByEmployee(employeeId)\n    setIsLoading(false)\n  }\n\n  // Effect to load all transactions on initial load\n  useEffect(() => {\n    loadAllTransactions()\n  }, [])\n\n  // Handle employee selection changes\n  const handleEmployeeChange = async (newValue: Employee | null) => {\n    setSelectedEmployee(newValue)\n\n    if (!newValue || newValue.id === \"all-employees\") {\n      await loadAllTransactions() // Load all transactions for all employees\n    } else {\n      await loadTransactionsByEmployee(newValue.id) // Load transactions for the selected employee\n    }\n  }\n\n  const transactions =\n    selectedEmployee && selectedEmployee.id !== \"all-employees\"\n      ? transactionsByEmployee\n      : paginatedTransactions?.data || []\n\n  return (\n    <Fragment>\n      <main className=\"MainContainer\">\n        <Instructions />\n        <hr className=\"RampBreak--l\" />\n\n        <InputSelect<Employee>\n          isLoading={isLoading}\n          defaultValue={EMPTY_EMPLOYEE}\n          items={employees ? [EMPTY_EMPLOYEE, ...employees] : []}\n          label=\"Filter by employee\"\n          loadingLabel=\"Loading employees...\"\n          parseItem={(item) => ({\n            value: item.id,\n            label: `${item.firstName} ${item.lastName}`,\n          })}\n          onChange={handleEmployeeChange} // Handle employee selection\n        />\n\n        <div className=\"RampBreak--l\" />\n\n        <div className=\"RampGrid\">\n          {isLoading ? (\n            <div>Loading transactions...</div>\n          ) : (\n            <Transactions transactions={transactions} /> // Display transactions\n          )}\n\n          {selectedEmployee &&\n            selectedEmployee.id === \"all-employees\" &&\n            paginatedTransactions?.nextPage && (\n              <button\n                className=\"RampButton\"\n                onClick={fetchPaginatedTransactions} // Load more transactions\n                disabled={isLoading}\n              >\n                View More\n              </button>\n            )}\n        </div>\n      </main>\n    </Fragment>\n  )\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}