{"ast":null,"code":"var _jsxFileName = \"/Users/roderickmoise/Desktop/Documents/Downloads/ramp-fe-challenge/src/App.tsx\",\n  _s = $RefreshSig$();\nimport { Fragment, useCallback, useEffect, useMemo, useState } from \"react\";\nimport { InputSelect } from \"./components/InputSelect\";\nimport { Instructions } from \"./components/Instructions\";\nimport { Transactions } from \"./components/Transactions\";\nimport { useEmployees } from \"./hooks/useEmployees\";\nimport { usePaginatedTransactions } from \"./hooks/usePaginatedTransactions\";\nimport { useTransactionsByEmployee } from \"./hooks/useTransactionsByEmployee\";\nimport { EMPTY_EMPLOYEE } from \"./utils/constants\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport function App() {\n  _s();\n  const {\n    data: employees,\n    ...employeeUtils\n  } = useEmployees();\n  const {\n    data: paginatedTransactions = {\n      data: []\n    },\n    ...paginatedTransactionsUtils\n  } = usePaginatedTransactions(); // Default value\n  const {\n    data: transactionsByEmployee,\n    ...transactionsByEmployeeUtils\n  } = useTransactionsByEmployee();\n  const [isLoading, setIsLoading] = useState(false);\n  const [isAllEmployees, setIsAllEmployees] = useState(true);\n  const [allTransactions, setAllTransactions] = useState([]);\n  const [hasMoreTransactions, setHasMoreTransactions] = useState(true);\n\n  // Log paginatedTransactions to see its structure\n  useEffect(() => {\n    console.log(\"Paginated Transactions:\", paginatedTransactions);\n  }, [paginatedTransactions]);\n  const transactions = useMemo(() => {\n    return isAllEmployees ? paginatedTransactions.data || [] // Ensure safe access\n    : transactionsByEmployee || []; // Use fallback\n  }, [paginatedTransactions, transactionsByEmployee, isAllEmployees]);\n  const loadAllTransactions = useCallback(async () => {\n    setIsLoading(true);\n    setIsAllEmployees(true);\n    transactionsByEmployeeUtils.invalidateData();\n    console.log(\"Fetching all transactions...\");\n    await employeeUtils.fetchAll();\n    await paginatedTransactionsUtils.fetchAll();\n    if (paginatedTransactions && paginatedTransactions.data) {\n      console.log(\"Fetched transactions:\", paginatedTransactions.data);\n      if (paginatedTransactions.data.length > 0) {\n        setAllTransactions(prev => [...prev, ...paginatedTransactions.data]);\n        setHasMoreTransactions(true);\n      } else {\n        console.warn(\"No more transactions available.\");\n        setHasMoreTransactions(false);\n      }\n    } else {\n      console.error(\"Error: paginatedTransactions or paginatedTransactions.data is undefined\");\n      setHasMoreTransactions(false);\n    }\n    setIsLoading(false);\n  }, [employeeUtils, paginatedTransactionsUtils, transactionsByEmployeeUtils, paginatedTransactions]);\n  const loadTransactionsByEmployee = useCallback(async employeeId => {\n    if (!employeeId) return;\n    setIsLoading(true);\n    setIsAllEmployees(false);\n    paginatedTransactionsUtils.invalidateData();\n    console.log(\"Fetching transactions for employee ID:\", employeeId);\n    await transactionsByEmployeeUtils.fetchById(employeeId);\n    setIsLoading(false);\n  }, [paginatedTransactionsUtils, transactionsByEmployeeUtils]);\n  useEffect(() => {\n    if (employees === null && !employeeUtils.loading) {\n      loadAllTransactions();\n    }\n  }, [employeeUtils.loading, employees, loadAllTransactions]);\n  const handleViewMore = async () => {\n    if (isAllEmployees && hasMoreTransactions) {\n      console.log(\"Loading more transactions...\");\n      await loadAllTransactions();\n    } else {\n      console.warn(\"No more transactions to load.\");\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(Fragment, {\n    children: /*#__PURE__*/_jsxDEV(\"main\", {\n      className: \"MainContainer\",\n      children: [/*#__PURE__*/_jsxDEV(Instructions, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 90,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"hr\", {\n        className: \"RampBreak--l\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 92,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(InputSelect, {\n        isLoading: isLoading,\n        defaultValue: EMPTY_EMPLOYEE,\n        items: employees === null ? [] : [EMPTY_EMPLOYEE, ...employees],\n        label: \"Filter by employee\",\n        loadingLabel: \"Loading employees\",\n        parseItem: item => ({\n          value: item.id,\n          label: `${item.firstName} ${item.lastName}`\n        }),\n        onChange: async newValue => {\n          console.log(\"Selected employee:\", newValue);\n          if (newValue === null || newValue.id === \"all-employees\") {\n            console.log(\"Switching to All Employees...\");\n            await loadAllTransactions();\n          } else if (newValue.id) {\n            console.log(\"Loading transactions for specific employee:\", newValue.id);\n            await loadTransactionsByEmployee(newValue.id);\n          }\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 94,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"RampBreak--l\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 116,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"RampGrid\",\n        children: [/*#__PURE__*/_jsxDEV(Transactions, {\n          transactions: [...allTransactions, ...transactions]\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 119,\n          columnNumber: 11\n        }, this), isAllEmployees && hasMoreTransactions && /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"RampButton\",\n          disabled: paginatedTransactionsUtils.loading,\n          onClick: handleViewMore,\n          children: \"View More\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 122,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 118,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 89,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 88,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"8rnfoAv8PBoMc6uB617FSLtA5cc=\", false, function () {\n  return [useEmployees, usePaginatedTransactions, useTransactionsByEmployee];\n});\n_c = App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["Fragment","useCallback","useEffect","useMemo","useState","InputSelect","Instructions","Transactions","useEmployees","usePaginatedTransactions","useTransactionsByEmployee","EMPTY_EMPLOYEE","jsxDEV","_jsxDEV","App","_s","data","employees","employeeUtils","paginatedTransactions","paginatedTransactionsUtils","transactionsByEmployee","transactionsByEmployeeUtils","isLoading","setIsLoading","isAllEmployees","setIsAllEmployees","allTransactions","setAllTransactions","hasMoreTransactions","setHasMoreTransactions","console","log","transactions","loadAllTransactions","invalidateData","fetchAll","length","prev","warn","error","loadTransactionsByEmployee","employeeId","fetchById","loading","handleViewMore","children","className","fileName","_jsxFileName","lineNumber","columnNumber","defaultValue","items","label","loadingLabel","parseItem","item","value","id","firstName","lastName","onChange","newValue","disabled","onClick","_c","$RefreshReg$"],"sources":["/Users/roderickmoise/Desktop/Documents/Downloads/ramp-fe-challenge/src/App.tsx"],"sourcesContent":["import { Fragment, useCallback, useEffect, useMemo, useState } from \"react\"\nimport { InputSelect } from \"./components/InputSelect\"\nimport { Instructions } from \"./components/Instructions\"\nimport { Transactions } from \"./components/Transactions\"\nimport { useEmployees } from \"./hooks/useEmployees\"\nimport { usePaginatedTransactions } from \"./hooks/usePaginatedTransactions\"\nimport { useTransactionsByEmployee } from \"./hooks/useTransactionsByEmployee\"\nimport { EMPTY_EMPLOYEE } from \"./utils/constants\"\nimport { Employee, Transaction } from \"./utils/types\"\n\nexport function App() {\n  const { data: employees, ...employeeUtils } = useEmployees()\n  const { data: paginatedTransactions = { data: [] }, ...paginatedTransactionsUtils } =\n    usePaginatedTransactions() // Default value\n  const { data: transactionsByEmployee, ...transactionsByEmployeeUtils } = useTransactionsByEmployee()\n  const [isLoading, setIsLoading] = useState(false)\n  const [isAllEmployees, setIsAllEmployees] = useState(true)\n  const [allTransactions, setAllTransactions] = useState<Transaction[]>([])\n  const [hasMoreTransactions, setHasMoreTransactions] = useState(true)\n\n  // Log paginatedTransactions to see its structure\n  useEffect(() => {\n    console.log(\"Paginated Transactions:\", paginatedTransactions)\n  }, [paginatedTransactions])\n\n  const transactions = useMemo(() => {\n    return isAllEmployees\n      ? paginatedTransactions.data || [] // Ensure safe access\n      : transactionsByEmployee || [] // Use fallback\n  }, [paginatedTransactions, transactionsByEmployee, isAllEmployees])\n\n  const loadAllTransactions = useCallback(async () => {\n    setIsLoading(true)\n    setIsAllEmployees(true)\n    transactionsByEmployeeUtils.invalidateData()\n\n    console.log(\"Fetching all transactions...\")\n    await employeeUtils.fetchAll()\n    await paginatedTransactionsUtils.fetchAll()\n\n    if (paginatedTransactions && paginatedTransactions.data) {\n      console.log(\"Fetched transactions:\", paginatedTransactions.data)\n      if (paginatedTransactions.data.length > 0) {\n        setAllTransactions((prev) => [...prev, ...paginatedTransactions.data])\n        setHasMoreTransactions(true)\n      } else {\n        console.warn(\"No more transactions available.\")\n        setHasMoreTransactions(false)\n      }\n    } else {\n      console.error(\"Error: paginatedTransactions or paginatedTransactions.data is undefined\")\n      setHasMoreTransactions(false)\n    }\n\n    setIsLoading(false)\n  }, [employeeUtils, paginatedTransactionsUtils, transactionsByEmployeeUtils, paginatedTransactions])\n\n  const loadTransactionsByEmployee = useCallback(\n    async (employeeId: string) => {\n      if (!employeeId) return\n      setIsLoading(true)\n      setIsAllEmployees(false)\n      paginatedTransactionsUtils.invalidateData()\n\n      console.log(\"Fetching transactions for employee ID:\", employeeId)\n      await transactionsByEmployeeUtils.fetchById(employeeId)\n      setIsLoading(false)\n    },\n    [paginatedTransactionsUtils, transactionsByEmployeeUtils]\n  )\n\n  useEffect(() => {\n    if (employees === null && !employeeUtils.loading) {\n      loadAllTransactions()\n    }\n  }, [employeeUtils.loading, employees, loadAllTransactions])\n\n  const handleViewMore = async () => {\n    if (isAllEmployees && hasMoreTransactions) {\n      console.log(\"Loading more transactions...\")\n      await loadAllTransactions()\n    } else {\n      console.warn(\"No more transactions to load.\")\n    }\n  }\n\n  return (\n    <Fragment>\n      <main className=\"MainContainer\">\n        <Instructions />\n\n        <hr className=\"RampBreak--l\" />\n\n        <InputSelect<Employee>\n          isLoading={isLoading}\n          defaultValue={EMPTY_EMPLOYEE}\n          items={employees === null ? [] : [EMPTY_EMPLOYEE, ...employees]}\n          label=\"Filter by employee\"\n          loadingLabel=\"Loading employees\"\n          parseItem={(item) => ({\n            value: item.id,\n            label: `${item.firstName} ${item.lastName}`,\n          })}\n          onChange={async (newValue) => {\n            console.log(\"Selected employee:\", newValue)\n            if (newValue === null || newValue.id === \"all-employees\") {\n              console.log(\"Switching to All Employees...\")\n              await loadAllTransactions()\n            } else if (newValue.id) {\n              console.log(\"Loading transactions for specific employee:\", newValue.id)\n              await loadTransactionsByEmployee(newValue.id)\n            }\n          }}\n        />\n\n        <div className=\"RampBreak--l\" />\n\n        <div className=\"RampGrid\">\n          <Transactions transactions={[...allTransactions, ...transactions]} />\n\n          {isAllEmployees && hasMoreTransactions && (\n            <button\n              className=\"RampButton\"\n              disabled={paginatedTransactionsUtils.loading}\n              onClick={handleViewMore}\n            >\n              View More\n            </button>\n          )}\n        </div>\n      </main>\n    </Fragment>\n  )\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}