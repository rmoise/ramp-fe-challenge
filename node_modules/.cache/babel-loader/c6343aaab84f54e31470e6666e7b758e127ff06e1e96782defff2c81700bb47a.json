{"ast":null,"code":"var _s = $RefreshSig$();\nimport { useCallback, useState } from \"react\";\nimport { useCustomFetch } from \"./useCustomFetch\";\nexport function useTransactionsByEmployee() {\n  _s();\n  const {\n    fetchWithCache,\n    loading\n  } = useCustomFetch();\n  const [transactionsByEmployee, setTransactionsByEmployee] = useState(null);\n  const fetchById = useCallback(async employeeId => {\n    if (!employeeId) return null; // Prevent fetching if no employee ID is provided\n\n    console.log(\"Fetching transactions for employee ID:\", employeeId);\n    const data = await fetchWithCache(\"transactionsByEmployee\", {\n      employeeId\n    });\n    if (data) {\n      console.log(\"Transactions for employee fetched successfully:\", data);\n      setTransactionsByEmployee(data);\n    } else {\n      console.warn(\"No transactions data received for employee ID:\", employeeId);\n    }\n    return data; // Ensure it returns the response\n  }, [fetchWithCache]);\n  const invalidateData = useCallback(() => {\n    setTransactionsByEmployee(null);\n  }, []);\n  return {\n    data: transactionsByEmployee,\n    loading,\n    fetchById,\n    invalidateData\n  };\n}\n_s(useTransactionsByEmployee, \"kKvyfBKX5wcdmUqML83LxPYcyfE=\", false, function () {\n  return [useCustomFetch];\n});","map":{"version":3,"names":["useCallback","useState","useCustomFetch","useTransactionsByEmployee","_s","fetchWithCache","loading","transactionsByEmployee","setTransactionsByEmployee","fetchById","employeeId","console","log","data","warn","invalidateData"],"sources":["/Users/roderickmoise/Desktop/Documents/Downloads/ramp-fe-challenge/src/hooks/useTransactionsByEmployee.ts"],"sourcesContent":["import { useCallback, useState } from \"react\"\nimport { RequestByEmployeeParams, Transaction } from \"../utils/types\"\nimport { TransactionsByEmployeeResult } from \"./types\"\nimport { useCustomFetch } from \"./useCustomFetch\"\n\nexport function useTransactionsByEmployee(): TransactionsByEmployeeResult {\n  const { fetchWithCache, loading } = useCustomFetch()\n  const [transactionsByEmployee, setTransactionsByEmployee] = useState<Transaction[] | null>(null)\n\n  const fetchById = useCallback(\n    async (employeeId: string): Promise<Transaction[] | null> => {\n      if (!employeeId) return null // Prevent fetching if no employee ID is provided\n\n      console.log(\"Fetching transactions for employee ID:\", employeeId)\n      const data = await fetchWithCache<Transaction[], RequestByEmployeeParams>(\n        \"transactionsByEmployee\",\n        {\n          employeeId,\n        }\n      )\n\n      if (data) {\n        console.log(\"Transactions for employee fetched successfully:\", data)\n        setTransactionsByEmployee(data)\n      } else {\n        console.warn(\"No transactions data received for employee ID:\", employeeId)\n      }\n\n      return data // Ensure it returns the response\n    },\n    [fetchWithCache]\n  )\n\n  const invalidateData = useCallback(() => {\n    setTransactionsByEmployee(null)\n  }, [])\n\n  return { data: transactionsByEmployee, loading, fetchById, invalidateData }\n}\n"],"mappings":";AAAA,SAASA,WAAW,EAAEC,QAAQ,QAAQ,OAAO;AAG7C,SAASC,cAAc,QAAQ,kBAAkB;AAEjD,OAAO,SAASC,yBAAyBA,CAAA,EAAiC;EAAAC,EAAA;EACxE,MAAM;IAAEC,cAAc;IAAEC;EAAQ,CAAC,GAAGJ,cAAc,CAAC,CAAC;EACpD,MAAM,CAACK,sBAAsB,EAAEC,yBAAyB,CAAC,GAAGP,QAAQ,CAAuB,IAAI,CAAC;EAEhG,MAAMQ,SAAS,GAAGT,WAAW,CAC3B,MAAOU,UAAkB,IAAoC;IAC3D,IAAI,CAACA,UAAU,EAAE,OAAO,IAAI,EAAC;;IAE7BC,OAAO,CAACC,GAAG,CAAC,wCAAwC,EAAEF,UAAU,CAAC;IACjE,MAAMG,IAAI,GAAG,MAAMR,cAAc,CAC/B,wBAAwB,EACxB;MACEK;IACF,CACF,CAAC;IAED,IAAIG,IAAI,EAAE;MACRF,OAAO,CAACC,GAAG,CAAC,iDAAiD,EAAEC,IAAI,CAAC;MACpEL,yBAAyB,CAACK,IAAI,CAAC;IACjC,CAAC,MAAM;MACLF,OAAO,CAACG,IAAI,CAAC,gDAAgD,EAAEJ,UAAU,CAAC;IAC5E;IAEA,OAAOG,IAAI,EAAC;EACd,CAAC,EACD,CAACR,cAAc,CACjB,CAAC;EAED,MAAMU,cAAc,GAAGf,WAAW,CAAC,MAAM;IACvCQ,yBAAyB,CAAC,IAAI,CAAC;EACjC,CAAC,EAAE,EAAE,CAAC;EAEN,OAAO;IAAEK,IAAI,EAAEN,sBAAsB;IAAED,OAAO;IAAEG,SAAS;IAAEM;EAAe,CAAC;AAC7E;AAACX,EAAA,CAjCeD,yBAAyB;EAAA,QACHD,cAAc;AAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}