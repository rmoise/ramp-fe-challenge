{"ast":null,"code":"var _s = $RefreshSig$();\nimport { useCallback, useState } from \"react\";\nimport { useCustomFetch } from \"./useCustomFetch\";\nexport function useTransactionsByEmployee() {\n  _s();\n  const {\n    fetchWithCache,\n    loading\n  } = useCustomFetch();\n  const [transactionsByEmployee, setTransactionsByEmployee] = useState(null);\n\n  // Fetch transactions for a specific employee\n  const fetchById = useCallback(async employeeId => {\n    if (!employeeId) return; // Prevent fetching if no employee ID is provided\n\n    const data = await fetchWithCache(\"transactionsByEmployee\", {\n      employeeId\n    });\n    if (data) {\n      setTransactionsByEmployee(data);\n    }\n  }, [fetchWithCache]);\n\n  // Invalidate the employee-specific transactions\n  const invalidateData = useCallback(() => {\n    setTransactionsByEmployee(null); // Clear transactions\n  }, []);\n  return {\n    data: transactionsByEmployee,\n    loading,\n    fetchById,\n    invalidateData\n  };\n}\n_s(useTransactionsByEmployee, \"kKvyfBKX5wcdmUqML83LxPYcyfE=\", false, function () {\n  return [useCustomFetch];\n});","map":{"version":3,"names":["useCallback","useState","useCustomFetch","useTransactionsByEmployee","_s","fetchWithCache","loading","transactionsByEmployee","setTransactionsByEmployee","fetchById","employeeId","data","invalidateData"],"sources":["/Users/roderickmoise/Desktop/Documents/Downloads/ramp-fe-challenge/src/hooks/useTransactionsByEmployee.ts"],"sourcesContent":["import { useCallback, useState } from \"react\"\nimport { Transaction } from \"../utils/types\"\nimport { TransactionsByEmployeeResult } from \"./types\"\nimport { useCustomFetch } from \"./useCustomFetch\"\n\nexport function useTransactionsByEmployee(): TransactionsByEmployeeResult {\n  const { fetchWithCache, loading } = useCustomFetch()\n  const [transactionsByEmployee, setTransactionsByEmployee] = useState<Transaction[] | null>(null)\n\n  // Fetch transactions for a specific employee\n  const fetchById = useCallback(\n    async (employeeId: string) => {\n      if (!employeeId) return // Prevent fetching if no employee ID is provided\n\n      const data = await fetchWithCache<Transaction[], { employeeId: string }>(\n        \"transactionsByEmployee\",\n        { employeeId }\n      )\n\n      if (data) {\n        setTransactionsByEmployee(data)\n      }\n    },\n    [fetchWithCache]\n  )\n\n  // Invalidate the employee-specific transactions\n  const invalidateData = useCallback(() => {\n    setTransactionsByEmployee(null) // Clear transactions\n  }, [])\n\n  return { data: transactionsByEmployee, loading, fetchById, invalidateData }\n}\n"],"mappings":";AAAA,SAASA,WAAW,EAAEC,QAAQ,QAAQ,OAAO;AAG7C,SAASC,cAAc,QAAQ,kBAAkB;AAEjD,OAAO,SAASC,yBAAyBA,CAAA,EAAiC;EAAAC,EAAA;EACxE,MAAM;IAAEC,cAAc;IAAEC;EAAQ,CAAC,GAAGJ,cAAc,CAAC,CAAC;EACpD,MAAM,CAACK,sBAAsB,EAAEC,yBAAyB,CAAC,GAAGP,QAAQ,CAAuB,IAAI,CAAC;;EAEhG;EACA,MAAMQ,SAAS,GAAGT,WAAW,CAC3B,MAAOU,UAAkB,IAAK;IAC5B,IAAI,CAACA,UAAU,EAAE,OAAM,CAAC;;IAExB,MAAMC,IAAI,GAAG,MAAMN,cAAc,CAC/B,wBAAwB,EACxB;MAAEK;IAAW,CACf,CAAC;IAED,IAAIC,IAAI,EAAE;MACRH,yBAAyB,CAACG,IAAI,CAAC;IACjC;EACF,CAAC,EACD,CAACN,cAAc,CACjB,CAAC;;EAED;EACA,MAAMO,cAAc,GAAGZ,WAAW,CAAC,MAAM;IACvCQ,yBAAyB,CAAC,IAAI,CAAC,EAAC;EAClC,CAAC,EAAE,EAAE,CAAC;EAEN,OAAO;IAAEG,IAAI,EAAEJ,sBAAsB;IAAED,OAAO;IAAEG,SAAS;IAAEG;EAAe,CAAC;AAC7E;AAACR,EAAA,CA3BeD,yBAAyB;EAAA,QACHD,cAAc;AAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}