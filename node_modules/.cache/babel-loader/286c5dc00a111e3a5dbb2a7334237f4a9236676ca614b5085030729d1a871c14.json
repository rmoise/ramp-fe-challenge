{"ast":null,"code":"var _jsxFileName = \"/Users/roderickmoise/Desktop/Documents/Downloads/ramp-fe-challenge/src/App.tsx\",\n  _s = $RefreshSig$();\nimport { Fragment, useCallback, useEffect, useState } from \"react\";\nimport { InputSelect } from \"./components/InputSelect\";\nimport { Instructions } from \"./components/Instructions\";\nimport { Transactions } from \"./components/Transactions\";\nimport { useEmployees } from \"./hooks/useEmployees\";\nimport { usePaginatedTransactions } from \"./hooks/usePaginatedTransactions\";\nimport { useTransactionsByEmployee } from \"./hooks/useTransactionsByEmployee\";\nimport { EMPTY_EMPLOYEE } from \"./utils/constants\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport function App() {\n  _s();\n  const {\n    data: employees,\n    fetchAll: fetchEmployees,\n    loading: employeesLoading\n  } = useEmployees();\n  const {\n    data: paginatedTransactions,\n    fetchAll: fetchPaginatedTransactions,\n    invalidateData: invalidatePaginatedTransactions\n  } = usePaginatedTransactions();\n  const {\n    data: transactionsByEmployee,\n    fetchById: fetchTransactionsByEmployee,\n    invalidateData: invalidateTransactionsByEmployee\n  } = useTransactionsByEmployee();\n  const [transactionsMap, setTransactionsMap] = useState(new Map());\n  const [selectedTransactions, setSelectedTransactions] = useState([]);\n  const [selectedEmployeeId, setSelectedEmployeeId] = useState(null);\n  const [isLoading, setIsLoading] = useState(false);\n  const [isAllEmployees, setIsAllEmployees] = useState(true);\n\n  // Update transactionsMap when new data is fetched\n  useEffect(() => {\n    if (paginatedTransactions !== null && paginatedTransactions !== void 0 && paginatedTransactions.data) {\n      setTransactionsMap(prevMap => {\n        const newMap = new Map(prevMap);\n        paginatedTransactions.data.forEach(transaction => {\n          const existingTransaction = newMap.get(transaction.id);\n          newMap.set(transaction.id, existingTransaction || transaction);\n        });\n        return newMap;\n      });\n    }\n  }, [paginatedTransactions]);\n  useEffect(() => {\n    if (transactionsByEmployee) {\n      setTransactionsMap(prevMap => {\n        const newMap = new Map(prevMap);\n        transactionsByEmployee.forEach(transaction => {\n          const existingTransaction = newMap.get(transaction.id);\n          newMap.set(transaction.id, existingTransaction || transaction);\n        });\n        return newMap;\n      });\n    }\n  }, [transactionsByEmployee]);\n\n  // Update selectedTransactions based on filter\n  useEffect(() => {\n    const allTransactions = Array.from(transactionsMap.values());\n    if (isAllEmployees) {\n      setSelectedTransactions(allTransactions);\n    } else if (selectedEmployeeId) {\n      setSelectedTransactions(allTransactions.filter(transaction => transaction.employee.id === selectedEmployeeId));\n    } else {\n      setSelectedTransactions([]);\n    }\n  }, [transactionsMap, isAllEmployees, selectedEmployeeId]);\n  const updateTransaction = useCallback((transactionId, approved) => {\n    setTransactionsMap(prevMap => {\n      const newMap = new Map(prevMap);\n      const transaction = newMap.get(transactionId);\n      if (transaction) {\n        newMap.set(transactionId, {\n          ...transaction,\n          approved\n        });\n      }\n      return newMap;\n    });\n  }, [setTransactionsMap]);\n  const loadAllTransactions = useCallback(async () => {\n    setIsLoading(true);\n    console.log(\"Loading all transactions...\");\n    await fetchEmployees();\n    await fetchPaginatedTransactions();\n    setIsLoading(false);\n  }, [fetchEmployees, fetchPaginatedTransactions]);\n  const loadTransactionsByEmployee = useCallback(async employeeId => {\n    setIsLoading(true);\n    console.log(`Loading transactions for employee ID: ${employeeId}`);\n    await fetchTransactionsByEmployee(employeeId);\n    setIsLoading(false);\n  }, [fetchTransactionsByEmployee]);\n  useEffect(() => {\n    const initialize = async () => {\n      if (!employees && !employeesLoading) {\n        await loadAllTransactions();\n      }\n    };\n    initialize();\n  }, [employees, employeesLoading, loadAllTransactions]);\n  const handleEmployeeChange = useCallback(async newValue => {\n    console.log(\"handleEmployeeChange called with:\", newValue);\n    setIsAllEmployees(!newValue || newValue.id === \"all-employees\");\n    setSelectedEmployeeId((newValue === null || newValue === void 0 ? void 0 : newValue.id) === \"all-employees\" ? null : (newValue === null || newValue === void 0 ? void 0 : newValue.id) || null);\n    if (!newValue || newValue.id === \"all-employees\") {\n      console.log(\"All Employees selected.\");\n      await loadAllTransactions();\n    } else {\n      console.log(`Fetching transactions for employee ID: ${newValue.id}`);\n      await loadTransactionsByEmployee(newValue.id);\n    }\n  }, [loadAllTransactions, loadTransactionsByEmployee]);\n  return /*#__PURE__*/_jsxDEV(Fragment, {\n    children: /*#__PURE__*/_jsxDEV(\"main\", {\n      className: \"MainContainer\",\n      children: [/*#__PURE__*/_jsxDEV(Instructions, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 132,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"hr\", {\n        className: \"RampBreak--l\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 133,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(InputSelect, {\n        isLoading: isLoading || employeesLoading,\n        defaultValue: EMPTY_EMPLOYEE,\n        items: employees ? [EMPTY_EMPLOYEE, ...employees] : [],\n        label: \"Filter by employee\",\n        loadingLabel: \"Loading employees...\",\n        parseItem: item => ({\n          value: item.id,\n          label: `${item.firstName} ${item.lastName}`\n        }),\n        onChange: handleEmployeeChange\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 134,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"RampBreak--l\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 146,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"RampGrid\",\n        children: [isLoading ? /*#__PURE__*/_jsxDEV(\"div\", {\n          children: \"Loading transactions...\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 149,\n          columnNumber: 13\n        }, this) : /*#__PURE__*/_jsxDEV(Transactions, {\n          transactions: selectedTransactions,\n          updateTransaction: updateTransaction\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 151,\n          columnNumber: 13\n        }, this), isAllEmployees && (paginatedTransactions === null || paginatedTransactions === void 0 ? void 0 : paginatedTransactions.nextPage) && /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"RampButton\",\n          onClick: async () => {\n            console.log(\"Loading more transactions...\");\n            await fetchPaginatedTransactions();\n          },\n          disabled: isLoading,\n          children: \"View More\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 154,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 147,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 131,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 130,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"Mtdge/Ge9e2s9CgMSoO6zR2t7Hc=\", false, function () {\n  return [useEmployees, usePaginatedTransactions, useTransactionsByEmployee];\n});\n_c = App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["Fragment","useCallback","useEffect","useState","InputSelect","Instructions","Transactions","useEmployees","usePaginatedTransactions","useTransactionsByEmployee","EMPTY_EMPLOYEE","jsxDEV","_jsxDEV","App","_s","data","employees","fetchAll","fetchEmployees","loading","employeesLoading","paginatedTransactions","fetchPaginatedTransactions","invalidateData","invalidatePaginatedTransactions","transactionsByEmployee","fetchById","fetchTransactionsByEmployee","invalidateTransactionsByEmployee","transactionsMap","setTransactionsMap","Map","selectedTransactions","setSelectedTransactions","selectedEmployeeId","setSelectedEmployeeId","isLoading","setIsLoading","isAllEmployees","setIsAllEmployees","prevMap","newMap","forEach","transaction","existingTransaction","get","id","set","allTransactions","Array","from","values","filter","employee","updateTransaction","transactionId","approved","loadAllTransactions","console","log","loadTransactionsByEmployee","employeeId","initialize","handleEmployeeChange","newValue","children","className","fileName","_jsxFileName","lineNumber","columnNumber","defaultValue","items","label","loadingLabel","parseItem","item","value","firstName","lastName","onChange","transactions","nextPage","onClick","disabled","_c","$RefreshReg$"],"sources":["/Users/roderickmoise/Desktop/Documents/Downloads/ramp-fe-challenge/src/App.tsx"],"sourcesContent":["import { Fragment, useCallback, useEffect, useState } from \"react\"\nimport { InputSelect } from \"./components/InputSelect\"\nimport { Instructions } from \"./components/Instructions\"\nimport { Transactions } from \"./components/Transactions\"\nimport { useEmployees } from \"./hooks/useEmployees\"\nimport { usePaginatedTransactions } from \"./hooks/usePaginatedTransactions\"\nimport { useTransactionsByEmployee } from \"./hooks/useTransactionsByEmployee\"\nimport { EMPTY_EMPLOYEE } from \"./utils/constants\"\nimport { Employee, Transaction } from \"./utils/types\"\n\nexport function App() {\n  const { data: employees, fetchAll: fetchEmployees, loading: employeesLoading } = useEmployees()\n  const {\n    data: paginatedTransactions,\n    fetchAll: fetchPaginatedTransactions,\n    invalidateData: invalidatePaginatedTransactions,\n  } = usePaginatedTransactions()\n  const {\n    data: transactionsByEmployee,\n    fetchById: fetchTransactionsByEmployee,\n    invalidateData: invalidateTransactionsByEmployee,\n  } = useTransactionsByEmployee()\n\n  const [transactionsMap, setTransactionsMap] = useState<Map<string, Transaction>>(new Map())\n  const [selectedTransactions, setSelectedTransactions] = useState<Transaction[]>([])\n  const [selectedEmployeeId, setSelectedEmployeeId] = useState<string | null>(null)\n  const [isLoading, setIsLoading] = useState(false)\n  const [isAllEmployees, setIsAllEmployees] = useState(true)\n\n  // Update transactionsMap when new data is fetched\n  useEffect(() => {\n    if (paginatedTransactions?.data) {\n      setTransactionsMap((prevMap) => {\n        const newMap = new Map(prevMap)\n        paginatedTransactions.data.forEach((transaction) => {\n          const existingTransaction = newMap.get(transaction.id)\n          newMap.set(transaction.id, existingTransaction || transaction)\n        })\n        return newMap\n      })\n    }\n  }, [paginatedTransactions])\n\n  useEffect(() => {\n    if (transactionsByEmployee) {\n      setTransactionsMap((prevMap) => {\n        const newMap = new Map(prevMap)\n        transactionsByEmployee.forEach((transaction) => {\n          const existingTransaction = newMap.get(transaction.id)\n          newMap.set(transaction.id, existingTransaction || transaction)\n        })\n        return newMap\n      })\n    }\n  }, [transactionsByEmployee])\n\n  // Update selectedTransactions based on filter\n  useEffect(() => {\n    const allTransactions = Array.from(transactionsMap.values())\n    if (isAllEmployees) {\n      setSelectedTransactions(allTransactions)\n    } else if (selectedEmployeeId) {\n      setSelectedTransactions(\n        allTransactions.filter((transaction) => transaction.employee.id === selectedEmployeeId)\n      )\n    } else {\n      setSelectedTransactions([])\n    }\n  }, [transactionsMap, isAllEmployees, selectedEmployeeId])\n\n  const updateTransaction = useCallback(\n    (transactionId: string, approved: boolean) => {\n      setTransactionsMap((prevMap) => {\n        const newMap = new Map(prevMap)\n        const transaction = newMap.get(transactionId)\n        if (transaction) {\n          newMap.set(transactionId, { ...transaction, approved })\n        }\n        return newMap\n      })\n    },\n    [setTransactionsMap]\n  )\n\n  const loadAllTransactions = useCallback(async () => {\n    setIsLoading(true)\n    console.log(\"Loading all transactions...\")\n    await fetchEmployees()\n    await fetchPaginatedTransactions()\n    setIsLoading(false)\n  }, [fetchEmployees, fetchPaginatedTransactions])\n\n  const loadTransactionsByEmployee = useCallback(\n    async (employeeId: string) => {\n      setIsLoading(true)\n      console.log(`Loading transactions for employee ID: ${employeeId}`)\n      await fetchTransactionsByEmployee(employeeId)\n      setIsLoading(false)\n    },\n    [fetchTransactionsByEmployee]\n  )\n\n  useEffect(() => {\n    const initialize = async () => {\n      if (!employees && !employeesLoading) {\n        await loadAllTransactions()\n      }\n    }\n    initialize()\n  }, [employees, employeesLoading, loadAllTransactions])\n\n  const handleEmployeeChange = useCallback(\n    async (newValue: Employee | null) => {\n      console.log(\"handleEmployeeChange called with:\", newValue)\n      setIsAllEmployees(!newValue || newValue.id === \"all-employees\")\n      setSelectedEmployeeId(newValue?.id === \"all-employees\" ? null : newValue?.id || null)\n\n      if (!newValue || newValue.id === \"all-employees\") {\n        console.log(\"All Employees selected.\")\n        await loadAllTransactions()\n      } else {\n        console.log(`Fetching transactions for employee ID: ${newValue.id}`)\n        await loadTransactionsByEmployee(newValue.id)\n      }\n    },\n    [loadAllTransactions, loadTransactionsByEmployee]\n  )\n\n  return (\n    <Fragment>\n      <main className=\"MainContainer\">\n        <Instructions />\n        <hr className=\"RampBreak--l\" />\n        <InputSelect<Employee>\n          isLoading={isLoading || employeesLoading}\n          defaultValue={EMPTY_EMPLOYEE}\n          items={employees ? [EMPTY_EMPLOYEE, ...employees] : []}\n          label=\"Filter by employee\"\n          loadingLabel=\"Loading employees...\"\n          parseItem={(item) => ({\n            value: item.id,\n            label: `${item.firstName} ${item.lastName}`,\n          })}\n          onChange={handleEmployeeChange}\n        />\n        <div className=\"RampBreak--l\" />\n        <div className=\"RampGrid\">\n          {isLoading ? (\n            <div>Loading transactions...</div>\n          ) : (\n            <Transactions transactions={selectedTransactions} updateTransaction={updateTransaction} />\n          )}\n          {isAllEmployees && paginatedTransactions?.nextPage && (\n            <button\n              className=\"RampButton\"\n              onClick={async () => {\n                console.log(\"Loading more transactions...\")\n                await fetchPaginatedTransactions()\n              }}\n              disabled={isLoading}\n            >\n              View More\n            </button>\n          )}\n        </div>\n      </main>\n    </Fragment>\n  )\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}