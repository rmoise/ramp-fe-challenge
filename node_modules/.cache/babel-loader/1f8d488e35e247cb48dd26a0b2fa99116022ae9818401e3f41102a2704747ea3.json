{"ast":null,"code":"var _s = $RefreshSig$();\nimport { useCallback, useState } from \"react\";\nimport { useCustomFetch } from \"./useCustomFetch\";\nexport function usePaginatedTransactions() {\n  _s();\n  const {\n    fetchWithCache,\n    loading\n  } = useCustomFetch();\n  const [paginatedTransactions, setPaginatedTransactions] = useState(null);\n  const fetchAll = useCallback(async () => {\n    var _paginatedTransaction;\n    const params = {\n      page: (_paginatedTransaction = paginatedTransactions === null || paginatedTransactions === void 0 ? void 0 : paginatedTransactions.nextPage) !== null && _paginatedTransaction !== void 0 ? _paginatedTransaction : 0 // Ensure page starts at 0\n    };\n    console.log(\"Fetching paginated transactions with params:\", params);\n    const response = await fetchWithCache(\"paginatedTransactions\", params);\n    console.log(\"API Response for paginated transactions:\", response);\n    setPaginatedTransactions(previousResponse => {\n      if (!response) {\n        console.warn(\"No response received. Returning previous state.\");\n        return previousResponse;\n      }\n      if (!response.data || !Array.isArray(response.data)) {\n        console.warn(\"Received unexpected response structure:\", response);\n        return previousResponse;\n      }\n      return {\n        data: [...((previousResponse === null || previousResponse === void 0 ? void 0 : previousResponse.data) || []), ...response.data],\n        nextPage: response.nextPage !== undefined ? response.nextPage : null\n      };\n    });\n  }, [fetchWithCache, paginatedTransactions]);\n  const invalidateData = useCallback(() => {\n    setPaginatedTransactions(null);\n  }, []);\n  return {\n    data: paginatedTransactions,\n    loading,\n    fetchAll,\n    invalidateData\n  };\n}\n_s(usePaginatedTransactions, \"5C7xQHueO9nKLl+7c12EAAA+DoA=\", false, function () {\n  return [useCustomFetch];\n});","map":{"version":3,"names":["useCallback","useState","useCustomFetch","usePaginatedTransactions","_s","fetchWithCache","loading","paginatedTransactions","setPaginatedTransactions","fetchAll","_paginatedTransaction","params","page","nextPage","console","log","response","previousResponse","warn","data","Array","isArray","undefined","invalidateData"],"sources":["/Users/roderickmoise/Desktop/Documents/Downloads/ramp-fe-challenge/src/hooks/usePaginatedTransactions.ts"],"sourcesContent":["import { useCallback, useState } from \"react\"\nimport { PaginatedRequestParams, PaginatedResponse, Transaction } from \"../utils/types\"\nimport { useCustomFetch } from \"./useCustomFetch\"\n\nexport function usePaginatedTransactions(): {\n  data: PaginatedResponse<Transaction[]> | null\n  loading: boolean\n  fetchAll: () => Promise<void>\n  invalidateData: () => void\n} {\n  const { fetchWithCache, loading } = useCustomFetch()\n  const [paginatedTransactions, setPaginatedTransactions] = useState<PaginatedResponse<\n    Transaction[]\n  > | null>(null)\n\n  const fetchAll = useCallback(async () => {\n    const params: PaginatedRequestParams = {\n      page: paginatedTransactions?.nextPage ?? 0, // Ensure page starts at 0\n    }\n\n    console.log(\"Fetching paginated transactions with params:\", params)\n\n    const response = await fetchWithCache<PaginatedResponse<Transaction[]>, PaginatedRequestParams>(\n      \"paginatedTransactions\",\n      params\n    )\n\n    console.log(\"API Response for paginated transactions:\", response)\n\n    setPaginatedTransactions((previousResponse) => {\n      if (!response) {\n        console.warn(\"No response received. Returning previous state.\")\n        return previousResponse\n      }\n\n      if (!response.data || !Array.isArray(response.data)) {\n        console.warn(\"Received unexpected response structure:\", response)\n        return previousResponse\n      }\n\n      return {\n        data: [...(previousResponse?.data || []), ...response.data],\n        nextPage: response.nextPage !== undefined ? response.nextPage : null,\n      }\n    })\n  }, [fetchWithCache, paginatedTransactions])\n\n  const invalidateData = useCallback(() => {\n    setPaginatedTransactions(null)\n  }, [])\n\n  return { data: paginatedTransactions, loading, fetchAll, invalidateData }\n}\n"],"mappings":";AAAA,SAASA,WAAW,EAAEC,QAAQ,QAAQ,OAAO;AAE7C,SAASC,cAAc,QAAQ,kBAAkB;AAEjD,OAAO,SAASC,wBAAwBA,CAAA,EAKtC;EAAAC,EAAA;EACA,MAAM;IAAEC,cAAc;IAAEC;EAAQ,CAAC,GAAGJ,cAAc,CAAC,CAAC;EACpD,MAAM,CAACK,qBAAqB,EAAEC,wBAAwB,CAAC,GAAGP,QAAQ,CAExD,IAAI,CAAC;EAEf,MAAMQ,QAAQ,GAAGT,WAAW,CAAC,YAAY;IAAA,IAAAU,qBAAA;IACvC,MAAMC,MAA8B,GAAG;MACrCC,IAAI,GAAAF,qBAAA,GAAEH,qBAAqB,aAArBA,qBAAqB,uBAArBA,qBAAqB,CAAEM,QAAQ,cAAAH,qBAAA,cAAAA,qBAAA,GAAI,CAAC,CAAE;IAC9C,CAAC;IAEDI,OAAO,CAACC,GAAG,CAAC,8CAA8C,EAAEJ,MAAM,CAAC;IAEnE,MAAMK,QAAQ,GAAG,MAAMX,cAAc,CACnC,uBAAuB,EACvBM,MACF,CAAC;IAEDG,OAAO,CAACC,GAAG,CAAC,0CAA0C,EAAEC,QAAQ,CAAC;IAEjER,wBAAwB,CAAES,gBAAgB,IAAK;MAC7C,IAAI,CAACD,QAAQ,EAAE;QACbF,OAAO,CAACI,IAAI,CAAC,iDAAiD,CAAC;QAC/D,OAAOD,gBAAgB;MACzB;MAEA,IAAI,CAACD,QAAQ,CAACG,IAAI,IAAI,CAACC,KAAK,CAACC,OAAO,CAACL,QAAQ,CAACG,IAAI,CAAC,EAAE;QACnDL,OAAO,CAACI,IAAI,CAAC,yCAAyC,EAAEF,QAAQ,CAAC;QACjE,OAAOC,gBAAgB;MACzB;MAEA,OAAO;QACLE,IAAI,EAAE,CAAC,IAAI,CAAAF,gBAAgB,aAAhBA,gBAAgB,uBAAhBA,gBAAgB,CAAEE,IAAI,KAAI,EAAE,CAAC,EAAE,GAAGH,QAAQ,CAACG,IAAI,CAAC;QAC3DN,QAAQ,EAAEG,QAAQ,CAACH,QAAQ,KAAKS,SAAS,GAAGN,QAAQ,CAACH,QAAQ,GAAG;MAClE,CAAC;IACH,CAAC,CAAC;EACJ,CAAC,EAAE,CAACR,cAAc,EAAEE,qBAAqB,CAAC,CAAC;EAE3C,MAAMgB,cAAc,GAAGvB,WAAW,CAAC,MAAM;IACvCQ,wBAAwB,CAAC,IAAI,CAAC;EAChC,CAAC,EAAE,EAAE,CAAC;EAEN,OAAO;IAAEW,IAAI,EAAEZ,qBAAqB;IAAED,OAAO;IAAEG,QAAQ;IAAEc;EAAe,CAAC;AAC3E;AAACnB,EAAA,CAhDeD,wBAAwB;EAAA,QAMFD,cAAc;AAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}