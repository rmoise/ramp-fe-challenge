{"ast":null,"code":"var _jsxFileName = \"/Users/roderickmoise/Desktop/Documents/Downloads/ramp-fe-challenge/src/App.tsx\",\n  _s = $RefreshSig$();\nimport { Fragment, useCallback, useEffect, useState } from \"react\";\nimport { InputSelect } from \"./components/InputSelect\";\nimport { Instructions } from \"./components/Instructions\";\nimport { Transactions } from \"./components/Transactions\";\nimport { useEmployees } from \"./hooks/useEmployees\";\nimport { usePaginatedTransactions } from \"./hooks/usePaginatedTransactions\";\nimport { useTransactionsByEmployee } from \"./hooks/useTransactionsByEmployee\";\nimport { EMPTY_EMPLOYEE } from \"./utils/constants\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport function App() {\n  _s();\n  const {\n    data: employees,\n    fetchAll: fetchEmployees,\n    loading: employeesLoading\n  } = useEmployees();\n  const {\n    data: paginatedTransactions,\n    fetchAll: fetchPaginatedTransactions,\n    loading: paginatedLoading\n  } = usePaginatedTransactions();\n  const {\n    data: transactionsByEmployee,\n    fetchById: fetchTransactionsByEmployee,\n    invalidateData\n  } = useTransactionsByEmployee();\n  const [isLoading, setIsLoading] = useState(false);\n  const [isAllEmployees, setIsAllEmployees] = useState(true);\n  const [transactionsInitialized, setTransactionsInitialized] = useState(false);\n  const [activeTransactions, setActiveTransactions] = useState([]);\n\n  // Determine which transactions to display (All Employees vs Specific Employee)\n  const handleSetTransactions = useCallback(() => {\n    if (isAllEmployees) {\n      if (paginatedTransactions !== null && paginatedTransactions !== void 0 && paginatedTransactions.data) {\n        setActiveTransactions(paginatedTransactions.data);\n      }\n    } else {\n      if (transactionsByEmployee) {\n        setActiveTransactions(transactionsByEmployee);\n      }\n    }\n  }, [isAllEmployees, paginatedTransactions === null || paginatedTransactions === void 0 ? void 0 : paginatedTransactions.data, transactionsByEmployee]);\n\n  // Fetch paginated transactions for \"All Employees\"\n  const fetchAllEmployeesTransactions = useCallback(async () => {\n    try {\n      console.log(\"Fetching paginated transactions for all employees...\");\n      await fetchPaginatedTransactions(); // Correctly fetch paginated transactions for all employees\n    } catch (error) {\n      console.error(\"Failed to fetch paginated transactions for all employees\", error);\n    }\n  }, [fetchPaginatedTransactions]);\n\n  // Fetch transactions for a specific employee\n  const fetchSpecificEmployeeTransactions = useCallback(async employeeId => {\n    setIsLoading(true);\n    await fetchTransactionsByEmployee(employeeId);\n    setIsAllEmployees(false);\n    setActiveTransactions(transactionsByEmployee || []);\n    setIsLoading(false);\n  }, [fetchTransactionsByEmployee, transactionsByEmployee]);\n\n  // Initialize employees and fetch \"All Employees\" transactions on first load\n  useEffect(() => {\n    const initialize = async () => {\n      if (!employeesLoading && !employees) {\n        await fetchEmployees();\n      }\n      if (employees && !transactionsInitialized) {\n        setTransactionsInitialized(true);\n        await fetchAllEmployeesTransactions();\n      }\n    };\n    initialize();\n  }, [employees, employeesLoading, transactionsInitialized, fetchEmployees, fetchAllEmployeesTransactions]);\n\n  // Handle employee selection changes\n  const handleEmployeeChange = useCallback(async newEmployee => {\n    if (!newEmployee || newEmployee.id === \"all-employees\") {\n      // Switching to \"All Employees\" mode\n      console.log(\"Switching to All Employees. Fetching paginated transactions for all employees...\");\n      setIsLoading(true); // Set loading state\n      setIsAllEmployees(true); // Set mode to \"All Employees\"\n      setActiveTransactions([]); // Clear current transactions\n\n      // Invalidate any employee-specific transactions\n      invalidateData(); // Clear employee-specific transactions\n\n      // Fetch all employees' paginated transactions\n      await fetchAllEmployeesTransactions(); // Correct function to fetch paginated transactions for all employees\n\n      // Update active transactions with the new paginated data\n      setActiveTransactions((paginatedTransactions === null || paginatedTransactions === void 0 ? void 0 : paginatedTransactions.data) || []);\n      setIsLoading(false); // Reset loading state\n    } else if (newEmployee.id) {\n      // Fetch transactions for a specific employee\n      console.log(`Fetching transactions for employee ID: ${newEmployee.id}`);\n      setIsLoading(true); // Set loading state\n\n      // Fetch transactions for the specific employee\n      await fetchSpecificEmployeeTransactions(newEmployee.id); // Correct function to fetch transactions for a specific employee\n\n      setIsLoading(false); // Reset loading state\n    }\n  }, [fetchAllEmployeesTransactions, fetchSpecificEmployeeTransactions, paginatedTransactions, invalidateData]);\n\n  // Handle \"View More\" button click\n  const handleViewMore = useCallback(async () => {\n    if (isAllEmployees && (paginatedTransactions === null || paginatedTransactions === void 0 ? void 0 : paginatedTransactions.nextPage) !== null) {\n      await fetchPaginatedTransactions();\n      handleSetTransactions();\n    }\n  }, [isAllEmployees, paginatedTransactions === null || paginatedTransactions === void 0 ? void 0 : paginatedTransactions.nextPage, fetchPaginatedTransactions, handleSetTransactions]);\n\n  // Trigger transaction update whenever the mode or data changes\n  useEffect(() => {\n    handleSetTransactions();\n  }, [handleSetTransactions]);\n  return /*#__PURE__*/_jsxDEV(Fragment, {\n    children: /*#__PURE__*/_jsxDEV(\"main\", {\n      className: \"MainContainer\",\n      children: [/*#__PURE__*/_jsxDEV(Instructions, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 151,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"hr\", {\n        className: \"RampBreak--l\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 152,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(InputSelect, {\n        isLoading: isLoading || employeesLoading,\n        defaultValue: EMPTY_EMPLOYEE,\n        items: employees ? [EMPTY_EMPLOYEE, ...employees] : [],\n        label: \"Filter by employee\",\n        loadingLabel: \"Loading employees...\",\n        parseItem: item => ({\n          value: item.id,\n          label: `${item.firstName} ${item.lastName}`\n        }),\n        onChange: handleEmployeeChange\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 154,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"RampBreak--l\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 167,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"RampGrid\",\n        children: [isLoading ? /*#__PURE__*/_jsxDEV(\"div\", {\n          children: \"Loading transactions...\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 171,\n          columnNumber: 13\n        }, this) : /*#__PURE__*/_jsxDEV(Transactions, {\n          transactions: activeTransactions\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 173,\n          columnNumber: 13\n        }, this), isAllEmployees && (paginatedTransactions === null || paginatedTransactions === void 0 ? void 0 : paginatedTransactions.nextPage) && /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"RampButton\",\n          onClick: handleViewMore,\n          disabled: isLoading || paginatedLoading || (paginatedTransactions === null || paginatedTransactions === void 0 ? void 0 : paginatedTransactions.nextPage) === null,\n          children: \"View More\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 176,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 169,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 150,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 149,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"nqmIQpLlmDRvOXf67eT6wWKi1DE=\", false, function () {\n  return [useEmployees, usePaginatedTransactions, useTransactionsByEmployee];\n});\n_c = App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["Fragment","useCallback","useEffect","useState","InputSelect","Instructions","Transactions","useEmployees","usePaginatedTransactions","useTransactionsByEmployee","EMPTY_EMPLOYEE","jsxDEV","_jsxDEV","App","_s","data","employees","fetchAll","fetchEmployees","loading","employeesLoading","paginatedTransactions","fetchPaginatedTransactions","paginatedLoading","transactionsByEmployee","fetchById","fetchTransactionsByEmployee","invalidateData","isLoading","setIsLoading","isAllEmployees","setIsAllEmployees","transactionsInitialized","setTransactionsInitialized","activeTransactions","setActiveTransactions","handleSetTransactions","fetchAllEmployeesTransactions","console","log","error","fetchSpecificEmployeeTransactions","employeeId","initialize","handleEmployeeChange","newEmployee","id","handleViewMore","nextPage","children","className","fileName","_jsxFileName","lineNumber","columnNumber","defaultValue","items","label","loadingLabel","parseItem","item","value","firstName","lastName","onChange","transactions","onClick","disabled","_c","$RefreshReg$"],"sources":["/Users/roderickmoise/Desktop/Documents/Downloads/ramp-fe-challenge/src/App.tsx"],"sourcesContent":["import { Fragment, useCallback, useEffect, useState } from \"react\"\nimport { InputSelect } from \"./components/InputSelect\"\nimport { Instructions } from \"./components/Instructions\"\nimport { Transactions } from \"./components/Transactions\"\nimport { useEmployees } from \"./hooks/useEmployees\"\nimport { usePaginatedTransactions } from \"./hooks/usePaginatedTransactions\"\nimport { useTransactionsByEmployee } from \"./hooks/useTransactionsByEmployee\"\nimport { EMPTY_EMPLOYEE } from \"./utils/constants\"\nimport { Employee } from \"./utils/types\"\n\nexport function App() {\n  const { data: employees, fetchAll: fetchEmployees, loading: employeesLoading } = useEmployees()\n  const {\n    data: paginatedTransactions,\n    fetchAll: fetchPaginatedTransactions,\n    loading: paginatedLoading,\n  } = usePaginatedTransactions()\n  const {\n    data: transactionsByEmployee,\n    fetchById: fetchTransactionsByEmployee,\n    invalidateData,\n  } = useTransactionsByEmployee()\n\n  const [isLoading, setIsLoading] = useState(false)\n  const [isAllEmployees, setIsAllEmployees] = useState(true)\n  const [transactionsInitialized, setTransactionsInitialized] = useState(false)\n  const [activeTransactions, setActiveTransactions] = useState<any[]>([])\n\n  // Determine which transactions to display (All Employees vs Specific Employee)\n  const handleSetTransactions = useCallback(() => {\n    if (isAllEmployees) {\n      if (paginatedTransactions?.data) {\n        setActiveTransactions(paginatedTransactions.data)\n      }\n    } else {\n      if (transactionsByEmployee) {\n        setActiveTransactions(transactionsByEmployee)\n      }\n    }\n  }, [isAllEmployees, paginatedTransactions?.data, transactionsByEmployee])\n\n  // Fetch paginated transactions for \"All Employees\"\n  const fetchAllEmployeesTransactions = useCallback(async () => {\n    try {\n      console.log(\"Fetching paginated transactions for all employees...\")\n      await fetchPaginatedTransactions() // Correctly fetch paginated transactions for all employees\n    } catch (error) {\n      console.error(\"Failed to fetch paginated transactions for all employees\", error)\n    }\n  }, [fetchPaginatedTransactions])\n\n\n  // Fetch transactions for a specific employee\n  const fetchSpecificEmployeeTransactions = useCallback(\n    async (employeeId: string) => {\n      setIsLoading(true)\n      await fetchTransactionsByEmployee(employeeId)\n      setIsAllEmployees(false)\n      setActiveTransactions(transactionsByEmployee || [])\n      setIsLoading(false)\n    },\n    [fetchTransactionsByEmployee, transactionsByEmployee]\n  )\n\n  // Initialize employees and fetch \"All Employees\" transactions on first load\n  useEffect(() => {\n    const initialize = async () => {\n      if (!employeesLoading && !employees) {\n        await fetchEmployees()\n      }\n\n      if (employees && !transactionsInitialized) {\n        setTransactionsInitialized(true)\n        await fetchAllEmployeesTransactions()\n      }\n    }\n\n    initialize()\n  }, [\n    employees,\n    employeesLoading,\n    transactionsInitialized,\n    fetchEmployees,\n    fetchAllEmployeesTransactions,\n  ])\n\n  // Handle employee selection changes\n  const handleEmployeeChange = useCallback(\n    async (newEmployee: Employee | null) => {\n      if (!newEmployee || newEmployee.id === \"all-employees\") {\n        // Switching to \"All Employees\" mode\n        console.log(\"Switching to All Employees. Fetching paginated transactions for all employees...\")\n\n        setIsLoading(true) // Set loading state\n        setIsAllEmployees(true) // Set mode to \"All Employees\"\n        setActiveTransactions([]) // Clear current transactions\n\n        // Invalidate any employee-specific transactions\n        invalidateData() // Clear employee-specific transactions\n\n        // Fetch all employees' paginated transactions\n        await fetchAllEmployeesTransactions() // Correct function to fetch paginated transactions for all employees\n\n        // Update active transactions with the new paginated data\n        setActiveTransactions(paginatedTransactions?.data || [])\n\n        setIsLoading(false) // Reset loading state\n      } else if (newEmployee.id) {\n        // Fetch transactions for a specific employee\n        console.log(`Fetching transactions for employee ID: ${newEmployee.id}`)\n        setIsLoading(true) // Set loading state\n\n        // Fetch transactions for the specific employee\n        await fetchSpecificEmployeeTransactions(newEmployee.id) // Correct function to fetch transactions for a specific employee\n\n        setIsLoading(false) // Reset loading state\n      }\n    },\n    [\n      fetchAllEmployeesTransactions,\n      fetchSpecificEmployeeTransactions,\n      paginatedTransactions,\n      invalidateData,\n    ]\n  )\n\n\n\n\n  // Handle \"View More\" button click\n  const handleViewMore = useCallback(async () => {\n    if (isAllEmployees && paginatedTransactions?.nextPage !== null) {\n      await fetchPaginatedTransactions()\n      handleSetTransactions()\n    }\n  }, [\n    isAllEmployees,\n    paginatedTransactions?.nextPage,\n    fetchPaginatedTransactions,\n    handleSetTransactions,\n  ])\n\n  // Trigger transaction update whenever the mode or data changes\n  useEffect(() => {\n    handleSetTransactions()\n  }, [handleSetTransactions])\n\n  return (\n    <Fragment>\n      <main className=\"MainContainer\">\n        <Instructions />\n        <hr className=\"RampBreak--l\" />\n\n        <InputSelect<Employee>\n          isLoading={isLoading || employeesLoading}\n          defaultValue={EMPTY_EMPLOYEE}\n          items={employees ? [EMPTY_EMPLOYEE, ...employees] : []}\n          label=\"Filter by employee\"\n          loadingLabel=\"Loading employees...\"\n          parseItem={(item) => ({\n            value: item.id,\n            label: `${item.firstName} ${item.lastName}`,\n          })}\n          onChange={handleEmployeeChange}\n        />\n\n        <div className=\"RampBreak--l\" />\n\n        <div className=\"RampGrid\">\n          {isLoading ? (\n            <div>Loading transactions...</div>\n          ) : (\n            <Transactions transactions={activeTransactions} />\n          )}\n          {isAllEmployees && paginatedTransactions?.nextPage && (\n            <button\n              className=\"RampButton\"\n              onClick={handleViewMore}\n              disabled={isLoading || paginatedLoading || paginatedTransactions?.nextPage === null}\n            >\n              View More\n            </button>\n          )}\n        </div>\n      </main>\n    </Fragment>\n  )\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}