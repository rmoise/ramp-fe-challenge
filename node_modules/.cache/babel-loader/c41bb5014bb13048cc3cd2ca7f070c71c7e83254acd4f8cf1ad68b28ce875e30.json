{"ast":null,"code":"var _jsxFileName = \"/Users/roderickmoise/Desktop/Documents/Downloads/ramp-fe-challenge/src/App.tsx\",\n  _s = $RefreshSig$();\nimport { Fragment, useCallback, useEffect, useState } from \"react\";\nimport { InputSelect } from \"./components/InputSelect\";\nimport { Instructions } from \"./components/Instructions\";\nimport { Transactions } from \"./components/Transactions\";\nimport { useEmployees } from \"./hooks/useEmployees\";\nimport { usePaginatedTransactions } from \"./hooks/usePaginatedTransactions\";\nimport { useTransactionsByEmployee } from \"./hooks/useTransactionsByEmployee\";\nimport { EMPTY_EMPLOYEE } from \"./utils/constants\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport function App() {\n  _s();\n  const {\n    data: employees,\n    fetchAll: fetchEmployees,\n    loading: employeesLoading\n  } = useEmployees();\n  const {\n    data: paginatedTransactions,\n    setData: setPaginatedTransactions,\n    fetchAll: fetchPaginatedTransactions,\n    invalidateData: invalidatePaginatedTransactions\n  } = usePaginatedTransactions();\n  const {\n    data: transactionsByEmployee,\n    setData: setTransactionsByEmployee,\n    fetchById: fetchTransactionsByEmployee,\n    invalidateData: invalidateTransactionsByEmployee\n  } = useTransactionsByEmployee();\n  const [isLoading, setIsLoading] = useState(false);\n  const [isAllEmployees, setIsAllEmployees] = useState(true);\n  const [transactions, setTransactions] = useState([]);\n\n  // Update transactions when data changes\n  useEffect(() => {\n    if (isAllEmployees) {\n      setTransactions((paginatedTransactions === null || paginatedTransactions === void 0 ? void 0 : paginatedTransactions.data) || []);\n    } else {\n      setTransactions(transactionsByEmployee || []);\n    }\n  }, [isAllEmployees, paginatedTransactions, transactionsByEmployee]);\n  const updateTransaction = useCallback((transactionId, approved) => {\n    setTransactions(prevTransactions => prevTransactions.map(transaction => transaction.id === transactionId ? {\n      ...transaction,\n      approved\n    } : transaction));\n\n    // Update the source data\n    if (isAllEmployees && paginatedTransactions) {\n      setPaginatedTransactions(prevData => prevData ? {\n        ...prevData,\n        data: prevData.data.map(transaction => transaction.id === transactionId ? {\n          ...transaction,\n          approved\n        } : transaction)\n      } : prevData);\n    } else if (!isAllEmployees && transactionsByEmployee) {\n      setTransactionsByEmployee(prevTransactions => prevTransactions === null || prevTransactions === void 0 ? void 0 : prevTransactions.map(transaction => transaction.id === transactionId ? {\n        ...transaction,\n        approved\n      } : transaction));\n    }\n  }, [isAllEmployees, paginatedTransactions, transactionsByEmployee, setPaginatedTransactions, setTransactionsByEmployee]);\n  const loadAllTransactions = useCallback(async () => {\n    setIsLoading(true);\n    console.log(\"Loading all transactions...\");\n    await fetchEmployees();\n    await fetchPaginatedTransactions();\n    invalidateTransactionsByEmployee();\n    setIsLoading(false);\n  }, [fetchEmployees, fetchPaginatedTransactions, invalidateTransactionsByEmployee]);\n  const loadTransactionsByEmployee = useCallback(async employeeId => {\n    setIsLoading(true);\n    console.log(`Loading transactions for employee ID: ${employeeId}`);\n    await fetchTransactionsByEmployee(employeeId);\n    invalidatePaginatedTransactions();\n    setIsLoading(false);\n  }, [fetchTransactionsByEmployee, invalidatePaginatedTransactions]);\n  useEffect(() => {\n    const initialize = async () => {\n      if (!employees && !employeesLoading) {\n        await loadAllTransactions();\n      }\n    };\n    initialize();\n  }, [employees, employeesLoading, loadAllTransactions]);\n  const handleEmployeeChange = useCallback(async newValue => {\n    console.log(\"handleEmployeeChange called with:\", newValue);\n    if (!newValue || newValue.id === \"all-employees\") {\n      console.log(\"All Employees selected.\");\n      setIsAllEmployees(true);\n      await loadAllTransactions();\n    } else {\n      console.log(`Fetching transactions for employee ID: ${newValue.id}`);\n      setIsAllEmployees(false);\n      await loadTransactionsByEmployee(newValue.id);\n    }\n  }, [loadAllTransactions, loadTransactionsByEmployee]);\n  return /*#__PURE__*/_jsxDEV(Fragment, {\n    children: /*#__PURE__*/_jsxDEV(\"main\", {\n      className: \"MainContainer\",\n      children: [/*#__PURE__*/_jsxDEV(Instructions, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 124,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"hr\", {\n        className: \"RampBreak--l\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 125,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(InputSelect, {\n        isLoading: isLoading || employeesLoading,\n        defaultValue: EMPTY_EMPLOYEE,\n        items: employees ? [EMPTY_EMPLOYEE, ...employees] : [],\n        label: \"Filter by employee\",\n        loadingLabel: \"Loading employees...\",\n        parseItem: item => ({\n          value: item.id,\n          label: `${item.firstName} ${item.lastName}`\n        }),\n        onChange: handleEmployeeChange\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 126,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"RampBreak--l\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 138,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"RampGrid\",\n        children: [isLoading ? /*#__PURE__*/_jsxDEV(\"div\", {\n          children: \"Loading transactions...\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 141,\n          columnNumber: 13\n        }, this) : /*#__PURE__*/_jsxDEV(Transactions, {\n          transactions: transactions,\n          updateTransaction: updateTransaction\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 143,\n          columnNumber: 13\n        }, this), isAllEmployees && (paginatedTransactions === null || paginatedTransactions === void 0 ? void 0 : paginatedTransactions.nextPage) && /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"RampButton\",\n          onClick: async () => {\n            console.log(\"Loading more transactions...\");\n            await fetchPaginatedTransactions();\n          },\n          disabled: isLoading,\n          children: \"View More\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 146,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 139,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 123,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 122,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"dxctoTS8mIvbXA3uj2iMSpTAL2Q=\", false, function () {\n  return [useEmployees, usePaginatedTransactions, useTransactionsByEmployee];\n});\n_c = App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["Fragment","useCallback","useEffect","useState","InputSelect","Instructions","Transactions","useEmployees","usePaginatedTransactions","useTransactionsByEmployee","EMPTY_EMPLOYEE","jsxDEV","_jsxDEV","App","_s","data","employees","fetchAll","fetchEmployees","loading","employeesLoading","paginatedTransactions","setData","setPaginatedTransactions","fetchPaginatedTransactions","invalidateData","invalidatePaginatedTransactions","transactionsByEmployee","setTransactionsByEmployee","fetchById","fetchTransactionsByEmployee","invalidateTransactionsByEmployee","isLoading","setIsLoading","isAllEmployees","setIsAllEmployees","transactions","setTransactions","updateTransaction","transactionId","approved","prevTransactions","map","transaction","id","prevData","loadAllTransactions","console","log","loadTransactionsByEmployee","employeeId","initialize","handleEmployeeChange","newValue","children","className","fileName","_jsxFileName","lineNumber","columnNumber","defaultValue","items","label","loadingLabel","parseItem","item","value","firstName","lastName","onChange","nextPage","onClick","disabled","_c","$RefreshReg$"],"sources":["/Users/roderickmoise/Desktop/Documents/Downloads/ramp-fe-challenge/src/App.tsx"],"sourcesContent":["import { Fragment, useCallback, useEffect, useState } from \"react\"\nimport { InputSelect } from \"./components/InputSelect\"\nimport { Instructions } from \"./components/Instructions\"\nimport { Transactions } from \"./components/Transactions\"\nimport { useEmployees } from \"./hooks/useEmployees\"\nimport { usePaginatedTransactions } from \"./hooks/usePaginatedTransactions\"\nimport { useTransactionsByEmployee } from \"./hooks/useTransactionsByEmployee\"\nimport { EMPTY_EMPLOYEE } from \"./utils/constants\"\nimport { Employee, Transaction } from \"./utils/types\"\n\nexport function App() {\n  const { data: employees, fetchAll: fetchEmployees, loading: employeesLoading } = useEmployees()\n  const {\n    data: paginatedTransactions,\n    setData: setPaginatedTransactions,\n    fetchAll: fetchPaginatedTransactions,\n    invalidateData: invalidatePaginatedTransactions,\n  } = usePaginatedTransactions()\n  const {\n    data: transactionsByEmployee,\n    setData: setTransactionsByEmployee,\n    fetchById: fetchTransactionsByEmployee,\n    invalidateData: invalidateTransactionsByEmployee,\n  } = useTransactionsByEmployee()\n\n  const [isLoading, setIsLoading] = useState(false)\n  const [isAllEmployees, setIsAllEmployees] = useState(true)\n  const [transactions, setTransactions] = useState<Transaction[]>([])\n\n  // Update transactions when data changes\n  useEffect(() => {\n    if (isAllEmployees) {\n      setTransactions(paginatedTransactions?.data || [])\n    } else {\n      setTransactions(transactionsByEmployee || [])\n    }\n  }, [isAllEmployees, paginatedTransactions, transactionsByEmployee])\n\n  const updateTransaction = useCallback(\n    (transactionId: string, approved: boolean) => {\n      setTransactions((prevTransactions) =>\n        prevTransactions.map((transaction) =>\n          transaction.id === transactionId ? { ...transaction, approved } : transaction\n        )\n      )\n\n      // Update the source data\n      if (isAllEmployees && paginatedTransactions) {\n        setPaginatedTransactions((prevData) =>\n          prevData\n            ? {\n                ...prevData,\n                data: prevData.data.map((transaction) =>\n                  transaction.id === transactionId ? { ...transaction, approved } : transaction\n                ),\n              }\n            : prevData\n        )\n      } else if (!isAllEmployees && transactionsByEmployee) {\n        setTransactionsByEmployee((prevTransactions) =>\n          prevTransactions?.map((transaction) =>\n            transaction.id === transactionId ? { ...transaction, approved } : transaction\n          )\n        )\n      }\n    },\n    [\n      isAllEmployees,\n      paginatedTransactions,\n      transactionsByEmployee,\n      setPaginatedTransactions,\n      setTransactionsByEmployee,\n    ]\n  )\n\n  const loadAllTransactions = useCallback(async () => {\n    setIsLoading(true)\n    console.log(\"Loading all transactions...\")\n    await fetchEmployees()\n    await fetchPaginatedTransactions()\n    invalidateTransactionsByEmployee()\n    setIsLoading(false)\n  }, [fetchEmployees, fetchPaginatedTransactions, invalidateTransactionsByEmployee])\n\n  const loadTransactionsByEmployee = useCallback(\n    async (employeeId: string) => {\n      setIsLoading(true)\n      console.log(`Loading transactions for employee ID: ${employeeId}`)\n      await fetchTransactionsByEmployee(employeeId)\n      invalidatePaginatedTransactions()\n      setIsLoading(false)\n    },\n    [fetchTransactionsByEmployee, invalidatePaginatedTransactions]\n  )\n\n  useEffect(() => {\n    const initialize = async () => {\n      if (!employees && !employeesLoading) {\n        await loadAllTransactions()\n      }\n    }\n    initialize()\n  }, [employees, employeesLoading, loadAllTransactions])\n\n  const handleEmployeeChange = useCallback(\n    async (newValue: Employee | null) => {\n      console.log(\"handleEmployeeChange called with:\", newValue)\n      if (!newValue || newValue.id === \"all-employees\") {\n        console.log(\"All Employees selected.\")\n        setIsAllEmployees(true)\n        await loadAllTransactions()\n      } else {\n        console.log(`Fetching transactions for employee ID: ${newValue.id}`)\n        setIsAllEmployees(false)\n        await loadTransactionsByEmployee(newValue.id)\n      }\n    },\n    [loadAllTransactions, loadTransactionsByEmployee]\n  )\n\n  return (\n    <Fragment>\n      <main className=\"MainContainer\">\n        <Instructions />\n        <hr className=\"RampBreak--l\" />\n        <InputSelect<Employee>\n          isLoading={isLoading || employeesLoading}\n          defaultValue={EMPTY_EMPLOYEE}\n          items={employees ? [EMPTY_EMPLOYEE, ...employees] : []}\n          label=\"Filter by employee\"\n          loadingLabel=\"Loading employees...\"\n          parseItem={(item) => ({\n            value: item.id,\n            label: `${item.firstName} ${item.lastName}`,\n          })}\n          onChange={handleEmployeeChange}\n        />\n        <div className=\"RampBreak--l\" />\n        <div className=\"RampGrid\">\n          {isLoading ? (\n            <div>Loading transactions...</div>\n          ) : (\n            <Transactions transactions={transactions} updateTransaction={updateTransaction} />\n          )}\n          {isAllEmployees && paginatedTransactions?.nextPage && (\n            <button\n              className=\"RampButton\"\n              onClick={async () => {\n                console.log(\"Loading more transactions...\")\n                await fetchPaginatedTransactions()\n              }}\n              disabled={isLoading}\n            >\n              View More\n            </button>\n          )}\n        </div>\n      </main>\n    </Fragment>\n  )\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}